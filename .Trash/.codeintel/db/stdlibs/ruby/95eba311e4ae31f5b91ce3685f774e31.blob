<scope ilk="blob" lang="Ruby" name="complex">
      <scope classrefs="Numeric" doc="The complex number class. See complex.rb for an overview." ilk="class" name="Complex">
        <scope attributes="__classmethod__ __ctor__" ilk="function" name="new" signature="(a, b)" />
        <scope attributes="__classmethod__" doc="Creates a Complex number a+b`i&apos;." ilk="function" name="new!" signature="(a, b=0)" />
        <scope attributes="__classmethod__" doc="Creates a Complex number in terms of r (radius) and theta&#xA;(angle)." ilk="function" name="polar" signature="(r, theta)" />
        <scope doc="Remainder after division by a real or complex number." ilk="function" name="%" signature="(other)" />
        <scope doc="Multiplication with real or complex number." ilk="function" name="*" signature="(other)" />
        <scope doc="Raise this complex number to the given (real or complex)&#xA;power." ilk="function" name="**" signature="(other)" />
        <scope doc="Addition with real or complex number." ilk="function" name="+" signature="(other)" />
        <scope doc="Division by real or complex number." ilk="function" name="/" signature="(other)" />
        <scope doc="Compares the absolute values of the two numbers." ilk="function" name="&lt;=&gt;" signature="(other)" />
        <scope doc="Test for numerical equality (a == a + 0`i&apos;)." ilk="function" name="==" signature="(other)" />
        <scope doc="Absolute value (aka modulus): distance from the zero point&#xA;on the complex plane." ilk="function" name="abs" signature="()" />
        <scope doc="Square of the absolute value." ilk="function" name="abs2" signature="()" />
        <scope doc="Alias for #arg" ilk="function" name="angle" signature="()" />
        <scope doc="Argument (angle from (1,0) on the complex plane)." ilk="function" name="arg" signature="()" />
        <scope doc="Attempts to coerce other to a Complex number." ilk="function" name="coerce" signature="(other)" />
        <scope doc="Alias for #conjugate" ilk="function" name="conj" signature="()" />
        <scope doc="Complex conjugate (z + z.conjugate = 2 * z.real)." ilk="function" name="conjugate" signature="()" />
        <scope doc="FIXME" ilk="function" name="denominator" signature="()" />
        <scope doc="Returns a hash code for the complex number." ilk="function" name="hash" signature="()" />
        <scope doc="The imaginary part of a complex number." ilk="function" name="image" />
        <scope doc="Returns &quot;Complex(`real&apos;, `image&apos;)&quot;." ilk="function" name="inspect" signature="()" />
        <scope doc="FIXME" ilk="function" name="numerator" signature="()" />
        <scope doc="Returns the absolute value `and&apos; the argument." ilk="function" name="polar" signature="()" />
        <scope doc="The real part of a complex number." ilk="function" name="real" />
        <scope doc="Standard string representation of the complex number." ilk="function" name="to_s" signature="()" />
      </scope>
    </scope>
    