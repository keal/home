<scope ilk="blob" lang="Ruby" name="*">
      <scope doc="The Comparable mixin is used by classes whose objects may be&#xA;ordered. The class must define the &lt;=&gt; operator, which&#xA;compares the receiver against another object, returning -1,&#xA;0, or +1 depending on whether the receiver is less than,&#xA;equal to, or greater than the other object." ilk="namespace" name="Comparable">
        <scope doc="Compares two objects based on the receiver&apos;s &lt;=&gt; method,&#xA;returning true if it returns -1." ilk="function" name="&lt;" signature="obj &lt; other    =&gt; true or false" />
        <scope doc="Compares two objects based on the receiver&apos;s &lt;=&gt; method,&#xA;returning true if it returns -1 or 0." ilk="function" name="&lt;=" signature="obj &lt;= other    =&gt; true or false" />
        <scope doc="Compares two objects based on the receiver&apos;s &lt;=&gt; method,&#xA;returning true if it returns 0. Also returns true if `obj&apos;&#xA;and `other&apos; are the same object." ilk="function" name="==" signature="obj == other    =&gt; true or false" />
        <scope doc="Compares two objects based on the receiver&apos;s &lt;=&gt; method,&#xA;returning true if it returns 1." ilk="function" name="&gt;" signature="obj &gt; other    =&gt; true or false" />
        <scope doc="Compares two objects based on the receiver&apos;s &lt;=&gt; method,&#xA;returning true if it returns 0 or 1." ilk="function" name="&gt;=" signature="obj &gt;= other    =&gt; true or false" />
        <scope doc="Returns false if `obj&apos; &lt;=&gt; `min&apos; is less than zero or if&#xA;`anObject&apos; &lt;=&gt; `max&apos; is greater than zero, true otherwise." ilk="function" name="between?" signature="obj.between?(min, max)    =&gt; true or false" />
      </scope>
      <scope doc="The Enumerable mixin provides collection classes with&#xA;several traversal and searching methods, and with the&#xA;ability to sort. The class must provide a method each, which&#xA;yields successive members of the collection." ilk="namespace" name="Enumerable">
        <scope doc="Passes each element of the collection to the given block.&#xA;The method returns true if the block never returns false or&#xA;nil." ilk="function" name="all?" signature="enum.all? [{|obj| block } ]   =&gt; true or false" />
        <scope doc="Passes each element of the collection to the given block.&#xA;The method returns true if the block ever returns a value&#xA;other that false or nil." ilk="function" name="any?" signature="enum.any? [{|obj| block } ]   =&gt; true or false" />
        <scope doc="Returns a new array with the results of running `block&apos; once&#xA;for every element in `enum&apos;." ilk="function" name="collect" signature="enum.collect {| obj | block }  =&gt; array&#xA;enum.map     {| obj | block }  =&gt; array" />
        <scope doc="Passes each entry in `enum&apos; to `block&apos;. Returns the first&#xA;for which `block&apos; is not false." ilk="function" name="detect" signature="enum.detect(ifnone = nil) {| obj | block }  =&gt; obj or nil&#xA;enum.find(ifnone = nil)   {| obj | block }  =&gt; obj or nil" />
        <scope doc="Iterates the given block for each array of consecutive &lt;n&gt;&#xA;elements." ilk="function" name="each_cons" signature="each_cons(n) {...}" />
        <scope doc="Iterates the given block for each slice of &lt;n&gt; elements." ilk="function" name="each_slice" signature="e.each_slice(n) {...}" />
        <scope doc="Calls `block&apos; with two arguments, the item and its index,&#xA;for each item in `enum&apos;." ilk="function" name="each_with_index" signature="enum.each_with_index {|obj, i| block }  -&gt; enum" />
        <scope doc="Returns an array containing the items in `enum&apos;." ilk="function" name="entries" signature="enum.to_a      =&gt;    array&#xA;enum.entries   =&gt;    array" />
        <scope doc="Returns Enumerable::Enumerator.new(self, :each_cons, n)." ilk="function" name="enum_cons" signature="e.enum_cons(n)" />
        <scope doc="Returns Enumerable::Enumerator.new(self, :each_slice, n)." ilk="function" name="enum_slice" signature="e.enum_slice(n)" />
        <scope doc="Returns Enumerable::Enumerator.new(self, :each_with_index)." ilk="function" name="enum_with_index" signature="enum_with_index" />
        <scope doc="Passes each entry in `enum&apos; to `block&apos;. Returns the first&#xA;for which `block&apos; is not false." ilk="function" name="find" signature="enum.detect(ifnone = nil) {| obj | block }  =&gt; obj or nil&#xA;enum.find(ifnone = nil)   {| obj | block }  =&gt; obj or nil" />
        <scope doc="Returns an array containing all elements of `enum&apos; for which&#xA;`block&apos; is not false (see also Enumerable#reject)." ilk="function" name="find_all" signature="enum.find_all {| obj | block }  =&gt; array&#xA;enum.select   {| obj | block }  =&gt; array" />
        <scope doc="Returns an array of every element in `enum&apos; for which&#xA;Pattern === element. If the optional `block&apos; is supplied,&#xA;each matching element is passed to it, and the block&apos;s&#xA;result is stored in the output array." ilk="function" name="grep" signature="enum.grep(pattern)                   =&gt; array&#xA;enum.grep(pattern) {| obj | block }  =&gt; array" />
        <scope doc="Returns true if any member of `enum&apos; equals `obj&apos;. Equality&#xA;is tested using ==." ilk="function" name="include?" signature="enum.include?(obj)     =&gt; true or false&#xA;enum.member?(obj)      =&gt; true or false" />
        <scope doc="Combines the elements of `enum&apos; by applying the block to an&#xA;accumulator value (`memo&apos;) and each element in turn. At each&#xA;step, `memo&apos; is set to the value returned by the block." ilk="function" name="inject" signature="enum.inject(initial) {| memo, obj | block }  =&gt; obj&#xA;enum.inject          {| memo, obj | block }  =&gt; obj" />
        <scope doc="Returns a new array with the results of running `block&apos; once&#xA;for every element in `enum&apos;." ilk="function" name="map" signature="enum.collect {| obj | block }  =&gt; array&#xA;enum.map     {| obj | block }  =&gt; array" />
        <scope doc="Returns the object in `enum&apos; with the maximum value. The&#xA;first form assumes all objects implement Comparable; the&#xA;second uses the block to return `a &lt;=&gt; b&apos;." ilk="function" name="max" signature="enum.max                   =&gt; obj&#xA;enum.max {|a,b| block }    =&gt; obj" />
        <scope doc="Returns true if any member of `enum&apos; equals `obj&apos;. Equality&#xA;is tested using ==." ilk="function" name="member?" signature="enum.include?(obj)     =&gt; true or false&#xA;enum.member?(obj)      =&gt; true or false" />
        <scope doc="Returns the object in `enum&apos; with the minimum value. The&#xA;first form assumes all objects implement Comparable; the&#xA;second uses the block to return `a &lt;=&gt; b&apos;." ilk="function" name="min" signature="enum.min                    =&gt; obj&#xA;enum.min {| a,b | block }   =&gt; obj" />
        <scope doc="Returns two arrays, the first containing the elements of&#xA;`enum&apos; for which the block evaluates to true, the second&#xA;containing the rest." ilk="function" name="partition" signature="enum.partition {| obj | block }  =&gt; [ true_array, false_array ]" />
        <scope doc="Returns an array for all elements of `enum&apos; for which&#xA;`block&apos; is false (see also Enumerable#find_all)." ilk="function" name="reject" signature="enum.reject {| obj | block }  =&gt; array" />
        <scope doc="Returns an array containing all elements of `enum&apos; for which&#xA;`block&apos; is not false (see also Enumerable#reject)." ilk="function" name="select" signature="enum.find_all {| obj | block }  =&gt; array&#xA;enum.select   {| obj | block }  =&gt; array" />
        <scope doc="Returns an array containing the items in `enum&apos; sorted,&#xA;either according to their own &lt;=&gt; method, or by using the&#xA;results of the supplied block. The block should return -1,&#xA;0, or +1 depending on the comparison between `a&apos; and `b&apos;." ilk="function" name="sort" signature="enum.sort                     =&gt; array&#xA;enum.sort {| a, b | block }   =&gt; array" />
        <scope doc="Sorts `enum&apos; using a set of keys generated by mapping the&#xA;values in `enum&apos; through the given block." ilk="function" name="sort_by" signature="enum.sort_by {| obj | block }    =&gt; array" />
        <scope doc="Returns an array containing the items in `enum&apos;." ilk="function" name="to_a" signature="enum.to_a      =&gt;    array&#xA;enum.entries   =&gt;    array" />
        <scope doc="Makes a set from the enumerable object with given arguments.&#xA;Needs to +require &quot;set&quot;+ to use this method." ilk="function" name="to_set" signature="(klass = Set, *args, &amp;block)" />
        <scope doc="Converts any arguments to arrays, then merges elements of&#xA;`enum&apos; with corresponding elements from each argument. This&#xA;generates a sequence of enum#size `n&apos;-element arrays, where&#xA;`n&apos; is one more that the count of arguments." ilk="function" name="zip" signature="enum.zip(arg, ...)                   =&gt; array&#xA;enum.zip(arg, ...) {|arr| block }    =&gt; nil" />
      </scope>
      <scope ilk="namespace" name="Errno">
        <scope classrefs="SystemCallError" ilk="class" name="E2BIG">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EACCES">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EADDRINUSE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EADDRNOTAVAIL">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EAFNOSUPPORT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EAGAIN">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EALREADY">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EBADF">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EBUSY">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ECHILD">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ECONNABORTED">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ECONNREFUSED">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ECONNRESET">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EDEADLK">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EDEADLOCK">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EDESTADDRREQ">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EDOM">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EDQUOT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EEXIST">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EFAULT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EFBIG">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EHOSTDOWN">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EHOSTUNREACH">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EILSEQ">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EINPROGRESS">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EINTR">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EINVAL">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EIO">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EISCONN">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EISDIR">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ELOOP">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EMFILE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EMLINK">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EMSGSIZE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENAMETOOLONG">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENETDOWN">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENETRESET">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENETUNREACH">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENFILE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOBUFS">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENODEV">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOENT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOEXEC">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOLCK">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOMEM">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOPROTOOPT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOSPC">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOSYS">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOTCONN">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOTDIR">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOTEMPTY">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOTSOCK">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENOTTY">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ENXIO">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EOPNOTSUPP">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EPERM">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EPFNOSUPPORT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EPIPE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EPROTONOSUPPORT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EPROTOTYPE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ERANGE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EREMOTE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EROFS">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ESHUTDOWN">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ESOCKTNOSUPPORT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ESPIPE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ESRCH">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ESTALE">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ETIMEDOUT">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="ETOOMANYREFS">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EUSERS">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EWOULDBLOCK">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
        <scope classrefs="SystemCallError" ilk="class" name="EXDEV">
          <variable attributes="__const__" citdl="Fixnum" name="Errno" />
        </scope>
      </scope>
      <scope doc="FileTest implements file test operations similar to those&#xA;used in File::Stat. It exists as a standalone module, and&#xA;its methods are also insinuated into the File class." ilk="namespace" name="FileTest">
        <scope doc="Returns true if the named file is a block device." ilk="function" name="blockdev?" signature="File.blockdev?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file is a character device." ilk="function" name="chardev?" signature="File.chardev?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file is a directory, false&#xA;otherwise." ilk="function" name="directory?" signature="File.directory?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file is executable by the&#xA;effective user id of this process." ilk="function" name="executable?" signature="File.executable?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file is executable by the real&#xA;user id of this process." ilk="function" name="executable_real?" signature="File.executable_real?(file_name)   =&gt; true or false" />
        <scope doc="Return true if the named file exists." ilk="function" name="exist?" signature="File.exist?(file_name)    =&gt;  true or false&#xA;File.exists?(file_name)   =&gt;  true or false    (obsolete)" />
        <scope doc="Return true if the named file exists." ilk="function" name="exists?" signature="File.exist?(file_name)    =&gt;  true or false&#xA;File.exists?(file_name)   =&gt;  true or false    (obsolete)" />
        <scope doc="Returns true if the named file exists and is a regular file." ilk="function" name="file?" signature="File.file?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file exists and the effective&#xA;group id of the calling process is the owner of the file.&#xA;Returns false on Windows." ilk="function" name="grpowned?" signature="File.grpowned?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named files are identical." ilk="function" name="identical?" signature="File.identical?(file_1, file_2)   =&gt;  true or false" />
        <scope doc="Returns true if the named file exists and the effective used&#xA;id of the calling process is the owner of the file." ilk="function" name="owned?" signature="File.owned?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file is a pipe." ilk="function" name="pipe?" signature="File.pipe?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file is readable by the effective&#xA;user id of this process." ilk="function" name="readable?" signature="File.readable?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file is readable by the real user&#xA;id of this process." ilk="function" name="readable_real?" signature="File.readable_real?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file has the setgid bit set." ilk="function" name="setgid?" signature="File.setgid?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file has the setuid bit set." ilk="function" name="setuid?" signature="File.setuid?(file_name)   =&gt;  true or false" />
        <scope doc="Returns the size of file_name." ilk="function" name="size" signature="File.size(file_name)   =&gt; integer" />
        <scope doc="Returns nil if file_name doesn&apos;t exist or has zero size, the&#xA;size of the file otherwise." ilk="function" name="size?" signature="File.file?(file_name)   =&gt; integer  or  nil" />
        <scope doc="Returns true if the named file is a socket." ilk="function" name="socket?" signature="File.socket?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file has the sticky bit set." ilk="function" name="sticky?" signature="File.sticky?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file is a symbolic link." ilk="function" name="symlink?" signature="File.symlink?(file_name)   =&gt;  true or false" />
        <scope doc="Returns true if the named file is writable by the effective&#xA;user id of this process." ilk="function" name="writable?" signature="File.writable?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file is writable by the real user&#xA;id of this process." ilk="function" name="writable_real?" signature="File.writable_real?(file_name)   =&gt; true or false" />
        <scope doc="Returns true if the named file exists and has a zero size." ilk="function" name="zero?" signature="File.zero?(file_name)   =&gt; true or false" />
      </scope>
      <scope doc="The GC module provides an interface to Ruby&apos;s mark and sweep&#xA;garbage collection mechanism. Some of the underlying methods&#xA;are also available via the ObjectSpace module." ilk="namespace" name="GC">
        <scope attributes="__classmethod__" doc="Disables garbage collection, returning true if garbage&#xA;collection was already disabled." ilk="function" name="disable" signature="GC.disable    =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Enables garbage collection, returning true if garbage&#xA;collection was previously disabled." ilk="function" name="enable" signature="GC.enable    =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Initiates garbage collection, unless manually disabled." ilk="function" name="start" signature="GC.start                     =&gt; nil&#xA;gc.garbage_collect           =&gt; nil&#xA;ObjectSpace.garbage_collect  =&gt; nil" />
        <scope doc="Initiates garbage collection, unless manually disabled." ilk="function" name="garbage_collect" signature="GC.start                     =&gt; nil&#xA;gc.garbage_collect           =&gt; nil&#xA;ObjectSpace.garbage_collect  =&gt; nil" />
      </scope>
      <scope ilk="namespace" name="Kernel">
        <scope doc="Returns `arg&apos; as an Array. First tries to call `arg&apos;.to_ary,&#xA;then `arg&apos;.to_a." ilk="function" name="Array" signature="Array(arg)    =&gt; array" />
        <scope doc="Returns `arg&apos; converted to a float. Numeric types are&#xA;converted directly, the rest are converted using `arg&apos;.to_f." ilk="function" name="Float" signature="Float(arg)    =&gt; float" />
        <scope doc="Converts `arg&apos; to a Fixnum or Bignum. Numeric types are&#xA;converted directly (with floating point numbers being&#xA;truncated)." ilk="function" name="Integer" signature="Integer(arg)    =&gt; integer" />
        <scope doc="Converts `arg&apos; to a String by calling its to_s method." ilk="function" name="String" signature="String(arg)   =&gt; string" />
        <scope doc="alias for URI.parse." ilk="function" name="URI" signature="(uri_str)" />
        <scope doc="Returns the standard output of running `cmd&apos; in a subshell.&#xA;The built-in syntax %x{...} uses this method." ilk="function" name="`" signature="`cmd`    =&gt; string" />
        <scope doc="Terminate execution immediately, effectively by calling&#xA;Kernel.exit(1). If `msg&apos; is given, it is written to STDERR&#xA;prior to terminating." ilk="function" name="abort" signature="abort&#xA;Kernel::abort&#xA;Process::abort" />
        <scope doc="Converts `block&apos; to a Proc object (and therefore binds it at&#xA;the point of call) and registers it for execution when the&#xA;program exits. If multiple handlers are registered, they are&#xA;executed in reverse order of registration." ilk="function" name="at_exit" signature="at_exit { block } -&gt; proc" />
        <scope doc="Registers `filename&apos; to be loaded (using Kernel::require)&#xA;the first time that `module&apos; (which may be a String or a&#xA;symbol) is accessed." ilk="function" name="autoload" signature="autoload(module, filename)   =&gt; nil" />
        <scope doc="Registers `filename&apos; to be loaded (using Kernel::require)&#xA;the first time that `module&apos; (which may be a String or a&#xA;symbol) is accessed." ilk="function" name="autoload?" signature="autoload(module, filename)   =&gt; nil" />
        <scope doc="Returns a Binding object, describing the variable and method&#xA;bindings at the point of call. This object can be used when&#xA;calling eval to execute the evaluated command in this&#xA;environment." ilk="function" name="binding" signature="binding -&gt; a_binding" />
        <scope doc="Returns true if yield would execute a block in the current&#xA;context. The iterator? form is mildly deprecated." ilk="function" name="block_given?" signature="block_given?   =&gt; true or false&#xA;iterator?      =&gt; true or false" />
        <scope doc="Generates a Continuation object, which it passes to the&#xA;associated block. Performing a `cont&apos;.call will cause the&#xA;callcc to return (as will falling through the end of the&#xA;block)." ilk="function" name="callcc" signature="callcc {|cont| block }   =&gt;  obj" />
        <scope doc="Returns the current execution stack---an array containing&#xA;strings in the form ```file:line&apos;&apos;&apos; or ```file:line: in&#xA;`method&apos;&apos;&apos;&apos;. The optional `start&apos; parameter determines the&#xA;number of initial stack entries to omit from the result." ilk="function" name="caller" signature="caller(start=1)    =&gt; array" />
        <scope doc="catch executes its block. If a throw is executed, Ruby&#xA;searches up its stack for a catch block with a tag&#xA;corresponding to the throw&apos;s `symbol&apos;." ilk="function" name="catch" signature="catch(symbol) {| | block }  &gt; obj" />
        <scope doc="Equivalent to $_ = $_.chomp(`string&apos;). See String#chomp." ilk="function" name="chomp" signature="chomp            =&gt; $_&#xA;chomp(string)    =&gt; $_" />
        <scope doc="Equivalent to $_.chomp!(`string&apos;)." ilk="function" name="chomp!" signature="chomp!             =&gt; $_ or nil&#xA;chomp!(string)     =&gt; $_ or nil" />
        <scope doc="Equivalent to ($_.dup).chop!, except nil is never returned.&#xA;See String#chop!." ilk="function" name="chop" signature="chop   =&gt; string" />
        <scope doc="Equivalent to $_.chop!." ilk="function" name="chop!" signature="chop!    =&gt; $_ or nil" />
        <scope doc="Evaluates the Ruby expression(s) in `string&apos;. If `binding&apos;&#xA;is given, the evaluation is performed in its context." ilk="function" name="eval" signature="eval(string [, binding [, filename [,lineno]]])  =&gt; obj" />
        <scope doc="Replaces the current process by running the given external&#xA;`command&apos;. If exec is given a single argument, that argument&#xA;is taken as a line that is subject to shell expansion before&#xA;being executed." ilk="function" name="exec" signature="exec(command [, arg, ...])" />
        <scope doc="Initiates the termination of the Ruby script by raising the&#xA;SystemExit exception. This exception may be caught." ilk="function" name="exit" signature="exit(integer=0)&#xA;Kernel::exit(integer=0)&#xA;Process::exit(integer=0)" />
        <scope doc="Exits the process immediately. No exit handlers are run." ilk="function" name="exit!" signature="Process.exit!(fixnum=-1)" />
        <scope doc="With no arguments, raises the exception in $! or raises a&#xA;RuntimeError if $! is nil. With a single String argument,&#xA;raises a RuntimeError with the string as a message." ilk="function" name="fail" signature="raise&#xA;raise(string)&#xA;raise(exception [, string [, array]])&#xA;fail&#xA;fail(string)&#xA;fail(exception [, string [, array]])" />
        <scope doc="Creates a subprocess. If a block is specified, that block is&#xA;run in the subprocess, and the subprocess terminates with a&#xA;status of zero." ilk="function" name="fork" signature="Kernel.fork  [{ block }]   =&gt; fixnum or nil&#xA;Process.fork [{ block }]   =&gt; fixnum or nil" />
        <scope doc="Returns the string resulting from applying `format_string&apos;&#xA;to any additional arguments. Within the format string, any&#xA;characters other than format sequences are copied to the&#xA;result." ilk="function" name="format" signature="format(format_string [, arguments...] )   =&gt; string&#xA;sprintf(format_string [, arguments...] )  =&gt; string" />
        <scope doc="obsolete" ilk="function" name="getc" signature="()" />
        <scope doc="Returns (and assigns to $_) the next line from the list of&#xA;files in ARGV (or $*), or from standard input if no files&#xA;are present on the command line. Returns nil at end of file." ilk="function" name="gets" signature="gets(separator=$/)    =&gt; string or nil" />
        <scope doc="Returns an array of the names of global variables." ilk="function" name="global_variables" signature="global_variables    =&gt; array" />
        <scope doc="Equivalent to $_.gsub..., except that $_ receives the&#xA;modified result." ilk="function" name="gsub" signature="gsub(pattern, replacement)    =&gt; string&#xA;gsub(pattern) {|...| block }  =&gt; string" />
        <scope doc="Equivalent to Kernel::gsub, except nil is returned if $_ is&#xA;not modified." ilk="function" name="gsub!" signature="gsub!(pattern, replacement)    =&gt; string or nil&#xA;gsub!(pattern) {|...| block }  =&gt; string or nil" />
        <scope doc="Returns true if yield would execute a block in the current&#xA;context. The iterator? form is mildly deprecated." ilk="function" name="iterator?" signature="block_given?   =&gt; true or false&#xA;iterator?      =&gt; true or false" />
        <scope doc="Equivalent to Proc.new, except the resulting Proc objects&#xA;check the number of parameters passed when called." ilk="function" name="lambda" signature="proc   { |...| block }  =&gt; a_proc&#xA;lambda { |...| block }  =&gt; a_proc" />
        <scope doc="Loads and executes the Ruby program in the file `filename&apos;.&#xA;If the filename does not resolve to an absolute path, the&#xA;file is searched for in the library directories listed in&#xA;$:." ilk="function" name="load" signature="load(filename, wrap=false)   =&gt; true" />
        <scope doc="Returns the names of the current local variables." ilk="function" name="local_variables" signature="local_variables    =&gt; array" />
        <scope doc="Repeatedly executes the block." ilk="function" name="loop" signature="loop {|| block } " />
        <scope doc="Invoked by Ruby when `obj&apos; is sent a message it cannot&#xA;handle. `symbol&apos; is the symbol for the method called, and&#xA;`args&apos; are any arguments that were passed to it." ilk="function" name="method_missing" signature="obj.method_missing(symbol [, *args] )   =&gt; result" />
        <scope doc="Creates an IO object connected to the given stream, file, or&#xA;subprocess." ilk="function" name="open" signature="open(path [, mode [, perm]] )                =&gt; io or nil&#xA;open(path [, mode [, perm]] ) {|io| block }  =&gt; obj" />
        <scope doc="For each object, directly writes `obj&apos;.inspect followed by&#xA;the current output record separator to the program&apos;s&#xA;standard output." ilk="function" name="p" signature="p(obj, ...)    =&gt; nil" />
        <scope doc="Prints each object in turn to $stdout. If the output field&#xA;separator ($,) is not nil, its contents will appear between&#xA;each field." ilk="function" name="print" signature="print(obj, ...)    =&gt; nil" />
        <scope doc="Equivalent to:" ilk="function" name="printf" signature="printf(io, string [, obj ... ] )    =&gt; nil&#xA;printf(string [, obj ... ] )        =&gt; nil" />
        <scope doc="Equivalent to Proc.new, except the resulting Proc objects&#xA;check the number of parameters passed when called." ilk="function" name="proc" signature="proc   { |...| block }  =&gt; a_proc&#xA;lambda { |...| block }  =&gt; a_proc" />
        <scope doc="Equivalent to:" ilk="function" name="putc" signature="putc(int)   =&gt; int" />
        <scope doc="Equivalent to" ilk="function" name="puts" signature="puts(obj, ...)    =&gt; nil" />
        <scope doc="With no arguments, raises the exception in $! or raises a&#xA;RuntimeError if $! is nil. With a single String argument,&#xA;raises a RuntimeError with the string as a message." ilk="function" name="raise" signature="raise&#xA;raise(string)&#xA;raise(exception [, string [, array]])&#xA;fail&#xA;fail(string)&#xA;fail(exception [, string [, array]])" />
        <scope doc="Converts `max&apos; to an integer using max1 = max.to_i.abs. If&#xA;the result is zero, returns a pseudorandom floating point&#xA;number greater than or equal to 0.0 and less than 1.0." ilk="function" name="rand" signature="rand(max=0)    =&gt; number" />
        <scope doc="Equivalent to Kernel::gets, except readline raises EOFError&#xA;at end of file." ilk="function" name="readline" signature="readline(separator=$/)   =&gt; string" />
        <scope doc="Returns an array containing the lines returned by calling&#xA;Kernel.gets(`separator&apos;) until the end of file." ilk="function" name="readlines" signature="readlines(separator=$/)    =&gt; array" />
        <scope doc="Ruby tries to load the library named `string&apos;, returning&#xA;true if successful. If the filename does not resolve to an&#xA;absolute path, it will be searched for in the directories&#xA;listed in $:." ilk="function" name="require" signature="require(string)    =&gt; true or false" />
        <scope doc="Equivalent to calling $_.scan. See String#scan." ilk="function" name="scan" signature="scan(pattern)                   =&gt; array&#xA;scan(pattern) {|///| block }    =&gt; $_" />
        <scope doc="See Kernel#select." ilk="function" name="select" signature="IO.select(read_array &#xA;[, write_array &#xA;[, error_array &#xA;[, timeout]]] ) =&gt;  array  or  nil" />
        <scope doc="Establishes `proc&apos; as the handler for tracing, or disables&#xA;tracing if the parameter is nil. `proc&apos; takes up to six&#xA;parameters: an event name, a filename, a line number, an&#xA;object id, a binding, and the name of a class." ilk="function" name="set_trace_func" signature="set_trace_func(proc)    =&gt; proc&#xA;set_trace_func(nil)     =&gt; nil" />
        <scope doc="Suspends the current thread for `duration&apos; seconds (which&#xA;may be any number, including a Float with fractional&#xA;seconds). Returns the actual number of seconds slept&#xA;(rounded), which may be less than that asked for if another&#xA;thread calls Thread#run." ilk="function" name="sleep" signature="sleep([duration])    =&gt; fixnum" />
        <scope doc="Equivalent to $_.split(`pattern&apos;, `limit&apos;). See&#xA;String#split." ilk="function" name="split" signature="split([pattern [, limit]])    =&gt; array" />
        <scope doc="Returns the string resulting from applying `format_string&apos;&#xA;to any additional arguments. Within the format string, any&#xA;characters other than format sequences are copied to the&#xA;result." ilk="function" name="sprintf" signature="format(format_string [, arguments...] )   =&gt; string&#xA;sprintf(format_string [, arguments...] )  =&gt; string" />
        <scope doc="Seeds the pseudorandom number generator to the value of&#xA;`number&apos;.to_i.abs. If `number&apos; is omitted or zero, seeds the&#xA;generator using a combination of the time, the process id,&#xA;and a sequence number." ilk="function" name="srand" signature="srand(number=0)    =&gt; old_seed" />
        <scope doc="Equivalent to $_.sub(`args&apos;), except that $_ will be updated&#xA;if substitution occurs." ilk="function" name="sub" signature="sub(pattern, replacement)   =&gt; $_&#xA;sub(pattern) { block }      =&gt; $_" />
        <scope doc="Equivalent to $_.sub!(`args&apos;)." ilk="function" name="sub!" signature="sub!(pattern, replacement)    =&gt; $_ or nil&#xA;sub!(pattern) {|...| block }  =&gt; $_ or nil" />
        <scope doc="Calls the operating system function identified by `fixnum&apos;,&#xA;passing in the arguments, which must be either String&#xA;objects, or Integer objects that ultimately fit within a&#xA;native long. Up to nine parameters may be passed (14 on the&#xA;Atari-ST)." ilk="function" name="syscall" signature="syscall(fixnum [, args...])   =&gt; integer" />
        <scope doc="Executes `cmd&apos; in a subshell, returning true if the command&#xA;was found and ran successfully, false otherwise. An error&#xA;status is available in $?." ilk="function" name="system" signature="system(cmd [, arg, ...])    =&gt; true or false" />
        <scope ilk="function" name="test" signature="test(int_cmd, file1 [, file2] ) =&gt; obj" />
        <scope doc="Transfers control to the end of the active catch block&#xA;waiting for `symbol&apos;. Raises NameError if there is no catch&#xA;block for the symbol." ilk="function" name="throw" signature="throw(symbol [, obj])" />
        <scope doc="Controls tracing of assignments to global variables. The&#xA;parameter +symbol_ identifies the variable (as either a&#xA;string name or a symbol identifier)." ilk="function" name="trace_var" signature="trace_var(symbol, cmd )             =&gt; nil&#xA;trace_var(symbol) {|val| block }    =&gt; nil" />
        <scope doc="Specifies the handling of signals. The first parameter is a&#xA;signal name (a string such as ``SIGALRM&apos;&apos;, ``SIGUSR1&apos;&apos;, and&#xA;so on) or a signal number." ilk="function" name="trap" signature="Signal.trap( signal, proc ) =&gt; obj&#xA;Signal.trap( signal ) {| | block } =&gt; obj" />
        <scope doc="Removes tracing for the specified command on the given&#xA;global variable and returns nil. If no command is specified,&#xA;removes all tracing for that variable and returns an array&#xA;containing the commands actually removed." ilk="function" name="untrace_var" signature="untrace_var(symbol [, cmd] )   =&gt; array or nil" />
        <scope doc="Display the given message (followed by a newline) on STDERR&#xA;unless warnings are disabled (for example with the -W0&#xA;flag)." ilk="function" name="warn" signature="warn(msg)   =&gt; nil" />
        <scope attributes="private" doc="Prints any supplied `objects&apos; out in YAML. Intended as a&#xA;variation on +Kernel::p+." ilk="function" name="y" signature="( object, *objects )" />
      </scope>
      <scope doc="The marshaling library converts collections of Ruby objects&#xA;into a byte stream, allowing them to be stored outside the&#xA;currently active script. This data may subsequently be read&#xA;and the original objects reconstituted." ilk="namespace" name="Marshal">
        <scope doc="Serializes obj and all descendent objects. If anIO is&#xA;specified, the serialized data will be written to it,&#xA;otherwise the data will be returned as a String." ilk="function" name="dump" signature="dump( obj [, anIO] , limit=--1 ) =&gt; anIO" />
        <scope doc="Returns the result of converting the serialized data in&#xA;source into a Ruby object (possibly with associated&#xA;subordinate objects). source may be either an instance of IO&#xA;or an object that responds to to_str." ilk="function" name="load" signature="load( source [, proc] ) =&gt; obj&#xA;restore( source [, proc] ) =&gt; obj" />
        <scope doc="Returns the result of converting the serialized data in&#xA;source into a Ruby object (possibly with associated&#xA;subordinate objects). source may be either an instance of IO&#xA;or an object that responds to to_str." ilk="function" name="restore" signature="load( source [, proc] ) =&gt; obj&#xA;restore( source [, proc] ) =&gt; obj" />
        <variable attributes="__const__" citdl="Fixnum" name="MAJOR_VERSION" />
        <variable attributes="__const__" citdl="Fixnum" name="MINOR_VERSION" />
      </scope>
      <scope doc="The Math module contains module functions for basic&#xA;trigonometric and transcendental functions. See class Float&#xA;for a list of constants that define Ruby&apos;s floating point&#xA;accuracy." ilk="namespace" name="Math">
        <scope doc="Computes the arc cosine of `x&apos;. Returns 0..PI." ilk="function" name="acos" signature="Math.acos(x)    =&gt; float" />
        <scope doc="Alias for #acos" ilk="function" name="acos!" signature="(p1)" />
        <scope ilk="function" name="acosh" signature="(z)" />
        <scope doc="Alias for #acosh" ilk="function" name="acosh!" signature="(p1)" />
        <scope ilk="function" name="asin" signature="(z)" />
        <scope doc="Alias for #asin" ilk="function" name="asin!" signature="(p1)" />
        <scope doc="Computes the inverse hyperbolic sine of `x&apos;." ilk="function" name="asinh" signature="Math.asinh(x)    =&gt; float" />
        <scope doc="Alias for #asinh" ilk="function" name="asinh!" signature="(p1)" />
        <scope ilk="function" name="atan" signature="(z)" />
        <scope doc="Alias for #atan" ilk="function" name="atan!" signature="(p1)" />
        <scope doc="Computes the arc tangent given `y&apos; and `x&apos;. Returns -PI..PI." ilk="function" name="atan2" signature="Math.atan2(y, x)  =&gt; float" />
        <scope doc="Alias for #atan2" ilk="function" name="atan2!" signature="(p1, p2)" />
        <scope ilk="function" name="atanh" signature="(z)" />
        <scope doc="Alias for #atanh" ilk="function" name="atanh!" signature="(p1)" />
        <scope doc="Redefined to handle a Complex argument." ilk="function" name="cos" signature="(z)" />
        <scope doc="Alias for #cos" ilk="function" name="cos!" signature="(p1)" />
        <scope ilk="function" name="cosh" signature="(z)" />
        <scope doc="Alias for #cosh" ilk="function" name="cosh!" signature="(p1)" />
        <scope doc="Calculates the error function of x." ilk="function" name="erf" signature="Math.erf(x)  =&gt; float" />
        <scope doc="Calculates the complementary error function of x." ilk="function" name="erfc" signature="Math.erfc(x)  =&gt; float" />
        <scope doc="Returns e**x." ilk="function" name="exp" signature="Math.exp(x)    =&gt; float" />
        <scope doc="Alias for #exp" ilk="function" name="exp!" signature="(p1)" />
        <scope doc="Returns a two-element array containing the normalized&#xA;fraction (a Float) and exponent (a Fixnum) of `numeric&apos;." ilk="function" name="frexp" signature="Math.frexp(numeric)    =&gt; [ fraction, exponent ]" />
        <scope doc="Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled&#xA;triangle with sides `x&apos; and `y&apos;." ilk="function" name="hypot" signature="Math.hypot(x, y)    =&gt; float" />
        <scope doc="Returns the value of `flt&apos;*(2**`int&apos;)." ilk="function" name="ldexp" signature="Math.ldexp(flt, int) -&gt; float" />
        <scope doc="Returns the natural logarithm of `numeric&apos;." ilk="function" name="log" signature="Math.log(numeric)    =&gt; float" />
        <scope doc="Alias for #log" ilk="function" name="log!" signature="(p1)" />
        <scope doc="Returns the base 10 logarithm of `numeric&apos;." ilk="function" name="log10" signature="Math.log10(numeric)    =&gt; float" />
        <scope doc="Alias for #log10" ilk="function" name="log10!" signature="(p1)" />
        <scope doc="Redefined to handle a Complex argument." ilk="function" name="sin" signature="(z)" />
        <scope doc="Alias for #sin" ilk="function" name="sin!" signature="(p1)" />
        <scope doc="Computes the hyperbolic sine of `x&apos; (expressed in radians)." ilk="function" name="sinh" signature="Math.sinh(x)    =&gt; float" />
        <scope doc="Alias for #sinh" ilk="function" name="sinh!" signature="(p1)" />
        <scope doc="Returns the non-negative square root of `numeric&apos;. Raises&#xA;ArgError if `numeric&apos; is less than zero." ilk="function" name="sqrt" signature="Math.sqrt(numeric)    =&gt; float" />
        <scope doc="Alias for #sqrt" ilk="function" name="sqrt!" signature="(p1)" />
        <scope doc="Redefined to handle a Complex argument." ilk="function" name="tan" signature="(z)" />
        <scope doc="Alias for #tan" ilk="function" name="tan!" signature="(p1)" />
        <scope ilk="function" name="tanh" signature="(z)" />
        <scope doc="Alias for #tanh" ilk="function" name="tanh!" signature="(p1)" />
      </scope>
      <scope doc="The ObjectSpace module contains a number of routines that&#xA;interact with the garbage collection facility and allow you&#xA;to traverse all living objects with an iterator." ilk="namespace" name="ObjectSpace">
        <scope doc="Converts an object id to a reference to the object. May not&#xA;be called on an object id passed as a parameter to a&#xA;finalizer." ilk="function" name="_id2ref" signature="ObjectSpace._id2ref(object_id) -&gt; an_object" />
        <scope doc="deprecated" ilk="function" name="add_finalizer" signature="(p1)" />
        <scope doc="deprecated" ilk="function" name="call_finalizer" signature="(p1)" />
        <scope doc="Adds `aProc&apos; as a finalizer, to be called after `obj&apos; was&#xA;destroyed." ilk="function" name="define_finalizer" signature="ObjectSpace.define_finalizer(obj, aProc=proc())" />
        <scope doc="Calls the block once for each living, nonimmediate object in&#xA;this Ruby process. If `module&apos; is specified, calls the block&#xA;for only those classes or modules that match (or are a&#xA;subclass of) `module&apos;." ilk="function" name="each_object" signature="ObjectSpace.each_object([module]) {|obj| ... } =&gt; fixnum" />
        <scope doc="deprecated" ilk="function" name="finalizers" signature="()" />
        <scope doc="Initiates garbage collection, unless manually disabled." ilk="function" name="garbage_collect" signature="GC.start                     =&gt; nil&#xA;gc.garbage_collect           =&gt; nil&#xA;ObjectSpace.garbage_collect  =&gt; nil" />
        <scope doc="deprecated" ilk="function" name="remove_finalizer" signature="(p1)" />
        <scope doc="Removes all finalizers for `obj&apos;." ilk="function" name="undefine_finalizer" signature="ObjectSpace.undefine_finalizer(obj)" />
      </scope>
      <scope doc="Precision is a mixin for concrete numeric classes with&#xA;precision. Here, `precision&apos; means the fineness of&#xA;approximation of a real number, so, this module should not&#xA;be included into anything which is not a subset of Real (so&#xA;it should not be included in classes such as Complex or&#xA;Matrix)." ilk="namespace" name="Precision">
        <scope attributes="__classmethod__" doc="call_seq:" ilk="function" name="included" signature="(p1)" />
        <scope doc="Converts `self&apos; into an instance of `klass&apos;." ilk="function" name="prec" signature="num.prec(klass)   =&gt; a_klass" />
        <scope doc="Returns a Float converted from `num&apos;. It is equivalent to&#xA;prec(Float)." ilk="function" name="prec_f" signature="num.prec_f  =&gt;  Float" />
        <scope doc="Returns an Integer converted from `num&apos;. It is equivalent to&#xA;prec(Integer)." ilk="function" name="prec_i" signature="num.prec_i  =&gt;  Integer" />
      </scope>
      <scope doc="The Process module is a collection of methods used to&#xA;manipulate processes." ilk="namespace" name="Process">
        <scope attributes="__classmethod__" doc="Terminate execution immediately, effectively by calling&#xA;Kernel.exit(1). If `msg&apos; is given, it is written to STDERR&#xA;prior to terminating." ilk="function" name="abort" signature="abort&#xA;Kernel::abort&#xA;Process::abort" />
        <scope attributes="__classmethod__" doc="Initiates the termination of the Ruby script by raising the&#xA;SystemExit exception. This exception may be caught." ilk="function" name="exit" signature="exit(integer=0)&#xA;Kernel::exit(integer=0)&#xA;Process::exit(integer=0)" />
        <scope attributes="__classmethod__" doc="Exits the process immediately. No exit handlers are run." ilk="function" name="exit!" signature="Process.exit!(fixnum=-1)" />
        <scope attributes="__classmethod__" doc="Creates a subprocess. If a block is specified, that block is&#xA;run in the subprocess, and the subprocess terminates with a&#xA;status of zero." ilk="function" name="fork" signature="Kernel.fork  [{ block }]   =&gt; fixnum or nil&#xA;Process.fork [{ block }]   =&gt; fixnum or nil" />
        <scope doc="Some operating systems retain the status of terminated child&#xA;processes until the parent collects that status (normally&#xA;using some variant of wait(). If the parent never collects&#xA;this status, the child stays around as a `zombie&apos; process." ilk="function" name="detach" signature="Process.detach(pid)   =&gt; thread" />
        <scope doc="Returns the effective group ID for this process. Not&#xA;available on all platforms." ilk="function" name="egid" signature="Process.egid          =&gt; fixnum&#xA;Process::GID.eid      =&gt; fixnum&#xA;Process::Sys.geteid   =&gt; fixnum" />
        <scope doc="Sets the effective group ID for this process. Not available&#xA;on all platforms." ilk="function" name="egid=" signature="Process.egid = fixnum   =&gt; fixnum" />
        <scope doc="Returns the effective user ID for this process." ilk="function" name="euid" signature="Process.euid           =&gt; fixnum&#xA;Process::UID.eid       =&gt; fixnum&#xA;Process::Sys.geteuid   =&gt; fixnum" />
        <scope doc="Sets the effective user ID for this process. Not available&#xA;on all platforms." ilk="function" name="euid=" signature="Process.euid= integer" />
        <scope doc="Returns the process group ID for the given process id. Not&#xA;available on all platforms." ilk="function" name="getpgid" signature="Process.getpgid(pid)   =&gt; integer" />
        <scope doc="Returns the process group ID for this process. Not available&#xA;on all platforms." ilk="function" name="getpgrp" signature="Process.getpgrp   =&gt; integer" />
        <scope doc="Gets the scheduling priority for specified process, process&#xA;group, or user. `kind&apos; indicates the kind of entity to find:&#xA;one of Process::PRIO_PGRP, Process::PRIO_USER, or&#xA;Process::PRIO_PROCESS." ilk="function" name="getpriority" signature="Process.getpriority(kind, integer)   =&gt; fixnum" />
        <scope doc="Returns the (real) group ID for this process." ilk="function" name="gid" signature="Process.gid           =&gt; fixnum&#xA;Process::GID.rid      =&gt; fixnum&#xA;Process::Sys.getgid   =&gt; fixnum" />
        <scope doc="Sets the group ID for this process." ilk="function" name="gid=" signature="Process.gid= fixnum   =&gt; fixnum" />
        <scope doc="Get an Array of the gids of groups in the supplemental group&#xA;access list for this process." ilk="function" name="groups" signature="Process.groups   =&gt; array" />
        <scope doc="Set the supplemental group access list to the given Array of&#xA;group IDs." ilk="function" name="groups=" signature="Process.groups= array   =&gt; array" />
        <scope doc="Initializes the supplemental group access list by reading&#xA;the system group database and using all groups of which the&#xA;given user is a member. The group with the specified `gid&apos;&#xA;is also added to the list." ilk="function" name="initgroups" signature="Process.initgroups(username, gid)   =&gt; array" />
        <scope doc="Sends the given signal to the specified process id(s), or to&#xA;the current process if `pid&apos; is zero. `signal&apos; may be an&#xA;integer signal number or a POSIX signal name (either with or&#xA;without a SIG prefix)." ilk="function" name="kill" signature="Process.kill(signal, pid, ...)    =&gt; fixnum" />
        <scope doc="Returns the maximum number of gids allowed in the&#xA;supplemental group access list." ilk="function" name="maxgroups" signature="Process.maxgroups   =&gt; fixnum" />
        <scope doc="Sets the maximum number of gids allowed in the supplemental&#xA;group access list." ilk="function" name="maxgroups=" signature="Process.maxgroups= fixnum   =&gt; fixnum" />
        <scope doc="Returns the process id of this process. Not available on all&#xA;platforms." ilk="function" name="pid" signature="Process.pid   =&gt; fixnum" />
        <scope doc="Returns the process id of the parent of this process. Always&#xA;returns 0 on NT." ilk="function" name="ppid" signature="Process.ppid   =&gt; fixnum" />
        <scope doc="Sets the process group ID of `pid&apos; (0 indicates this&#xA;process) to `integer&apos;. Not available on all platforms." ilk="function" name="setpgid" signature="Process.setpgid(pid, integer)   =&gt; 0" />
        <scope doc="Equivalent to setpgid(0,0). Not available on all platforms." ilk="function" name="setpgrp" signature="Process.setpgrp   =&gt; 0" />
        <scope doc="See Process#getpriority." ilk="function" name="setpriority" signature="Process.setpriority(kind, integer, priority)   =&gt; 0" />
        <scope doc="Establishes this process as a new session and process group&#xA;leader, with no controlling tty. Returns the session id." ilk="function" name="setsid" signature="Process.setsid   =&gt; fixnum" />
        <scope doc="Returns a Tms structure (see Struct::Tms on page 388) that&#xA;contains user and system CPU times for this process." ilk="function" name="times" signature="Process.times   =&gt; aStructTms" />
        <scope doc="Returns the (real) user ID of this process." ilk="function" name="uid" signature="Process.uid           =&gt; fixnum&#xA;Process::UID.rid      =&gt; fixnum&#xA;Process::Sys.getuid   =&gt; fixnum" />
        <scope doc="Sets the (integer) user ID for this process. Not available&#xA;on all platforms." ilk="function" name="uid=" signature="Process.uid= integer   =&gt; numeric" />
        <scope doc="Waits for a child process to exit, returns its process id,&#xA;and sets $? to a Process::Status object containing&#xA;information on that process." ilk="function" name="wait" signature="Process.wait()                     =&gt; fixnum&#xA;Process.wait(pid=-1, flags=0)      =&gt; fixnum&#xA;Process.waitpid(pid=-1, flags=0)   =&gt; fixnum" />
        <scope doc="Waits for a child process to exit (see Process::waitpid for&#xA;exact semantics) and returns an array containing the process&#xA;id and the exit status (a Process::Status object) of that&#xA;child. Raises a SystemError if there are no child processes." ilk="function" name="wait2" signature="Process.wait2(pid=-1, flags=0)      =&gt; [pid, status]&#xA;Process.waitpid2(pid=-1, flags=0)   =&gt; [pid, status]" />
        <scope doc="Waits for all children, returning an array of `pid&apos;/`status&apos;&#xA;pairs (where `status&apos; is a Process::Status object)." ilk="function" name="waitall" signature="Process.waitall   =&gt; [ [pid1,status1], ...]" />
        <scope doc="Waits for a child process to exit, returns its process id,&#xA;and sets $? to a Process::Status object containing&#xA;information on that process." ilk="function" name="waitpid" signature="Process.wait()                     =&gt; fixnum&#xA;Process.wait(pid=-1, flags=0)      =&gt; fixnum&#xA;Process.waitpid(pid=-1, flags=0)   =&gt; fixnum" />
        <scope doc="Waits for a child process to exit (see Process::waitpid for&#xA;exact semantics) and returns an array containing the process&#xA;id and the exit status (a Process::Status object) of that&#xA;child. Raises a SystemError if there are no child processes." ilk="function" name="waitpid2" signature="Process.wait2(pid=-1, flags=0)      =&gt; [pid, status]&#xA;Process.waitpid2(pid=-1, flags=0)   =&gt; [pid, status]" />
        <variable attributes="__const__" citdl="Fixnum" name="PRIO_PGRP" />
        <variable attributes="__const__" citdl="Fixnum" name="PRIO_PROCESS" />
        <variable attributes="__const__" citdl="Fixnum" name="PRIO_USER" />
        <variable attributes="__const__" citdl="Fixnum" name="WNOHANG" />
        <variable attributes="__const__" citdl="Fixnum" name="WNOHANG" />
        <variable attributes="__const__" citdl="Fixnum" name="WUNTRACED" />
        <variable attributes="__const__" citdl="Fixnum" name="WUNTRACED" />
      </scope>
      <scope doc="Many operating systems allow signals to be sent to running&#xA;processes. Some signals have a defined effect on the&#xA;process, while others may be trapped at the code level and&#xA;acted upon." ilk="namespace" name="Signal">
        <scope doc="Returns a list of signal names mapped to the corresponding&#xA;underlying signal numbers." ilk="function" name="list" signature="Signal.list =&gt; a_hash" />
        <scope doc="Specifies the handling of signals. The first parameter is a&#xA;signal name (a string such as ``SIGALRM&apos;&apos;, ``SIGUSR1&apos;&apos;, and&#xA;so on) or a signal number." ilk="function" name="trap" signature="Signal.trap( signal, proc ) =&gt; obj&#xA;Signal.trap( signal ) {| | block } =&gt; obj" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="ArgumentError" />
      <scope classrefs="Object" doc="Arrays are ordered, integer-indexed collections of any&#xA;object. Array indexing starts at 0, as in C or Java." ilk="class" name="Array">
        <import symbol="Enumerable" />
        <scope attributes="__classmethod__" doc="Returns a new array populated with the given objects." ilk="function" name="[]" signature="(...)" />
        <scope attributes="__classmethod__ __ctor__" doc="Returns a new array. In the first form, the new array is&#xA;empty." ilk="function" name="new" signature="Array.new(size=0, obj=nil)&#xA;Array.new(array)&#xA;Array.new(size) {|index| block }" />
        <scope doc="Set Intersection---Returns a new array containing elements&#xA;common to the two arrays, with no duplicates." ilk="function" name="&amp;" signature="array &amp; other_array" />
        <scope doc="Repetition---With a String argument, equivalent to&#xA;self.join(str). Otherwise, returns a new array built by&#xA;concatenating the `int&apos; copies of `self&apos;." ilk="function" name="*" signature="array * int     -&gt;    an_array&#xA;array * str     -&gt;    a_string" />
        <scope doc="Concatenation---Returns a new array built by concatenating&#xA;the two arrays together to produce a third array." ilk="function" name="+" signature="array + other_array   -&gt; an_array" />
        <scope doc="Append---Pushes the given object on to the end of this&#xA;array. This expression returns the array itself, so several&#xA;appends may be chained together." ilk="function" name="&lt;&lt;" signature="array &lt;&lt; obj            -&gt; array" />
        <scope doc="Comparison---Returns an integer (-1, 0, or +1) if this array&#xA;is less than, equal to, or greater than other_array. Each&#xA;object in each array is compared (using &lt;=&gt;)." ilk="function" name="&lt;=&gt;" signature="array &lt;=&gt; other_array   -&gt;  -1, 0, +1" />
        <scope doc="Equality---Two arrays are equal if they contain the same&#xA;number of elements and if each element is equal to&#xA;(according to Object.==) the corresponding element in the&#xA;other array." ilk="function" name="==" signature="array == other_array   -&gt;   bool" />
        <scope doc="Element Reference---Returns the element at `index&apos;, or&#xA;returns a subarray starting at `start&apos; and continuing for&#xA;`length&apos; elements, or returns a subarray specified by&#xA;`range&apos;. Negative indices count backward from the end of the&#xA;array (-1 is the last element)." ilk="function" name="[]" signature="array[index]                -&gt; obj      or nil&#xA;array[start, length]        -&gt; an_array or nil&#xA;array[range]                -&gt; an_array or nil&#xA;array.slice(index)          -&gt; obj      or nil&#xA;array.slice(start, length)  -&gt; an_array or nil&#xA;array.slice(range)          -&gt; an_array or nil" />
        <scope doc="Element Assignment---Sets the element at `index&apos;, or&#xA;replaces a subarray starting at `start&apos; and continuing for&#xA;`length&apos; elements, or replaces a subarray specified by&#xA;`range&apos;. If indices are greater than the current capacity of&#xA;the array, the array grows automatically." ilk="function" name="[]=" signature="array[index]         = obj                     -&gt;  obj&#xA;array[start, length] = obj or an_array or nil  -&gt;  obj or an_array or nil&#xA;array[range]         = obj or an_array or nil  -&gt;  obj or an_array or nil" />
        <scope doc="Calculates the set of unambiguous abbreviations for the&#xA;strings in self. If passed a pattern or a string, only the&#xA;strings matching the pattern or starting with the string are&#xA;considered." ilk="function" name="abbrev" signature="(pattern = nil)" />
        <scope doc="Searches through an array whose elements are also arrays&#xA;comparing `obj&apos; with the first element of each contained&#xA;array using obj.==. Returns the first contained array that&#xA;matches (that is, the first associated array), or nil if no&#xA;match is found." ilk="function" name="assoc" signature="array.assoc(obj)   -&gt;  an_array  or  nil" />
        <scope doc="Returns the element at `index&apos;. A negative index counts from&#xA;the end of `self&apos;." ilk="function" name="at" signature="array.at(index)   -&gt;   obj  or nil" />
        <scope doc="Removes all elements from `self&apos;." ilk="function" name="clear" signature="array.clear    -&gt;  array" />
        <scope doc="Invokes `block&apos; once for each element of `self&apos;. Creates a&#xA;new array containing the values returned by the block." ilk="function" name="collect" signature="array.collect {|item| block }  -&gt; an_array&#xA;array.map     {|item| block }  -&gt; an_array" />
        <scope doc="Invokes the block once for each element of `self&apos;, replacing&#xA;the element with the value returned by `block&apos;. See also&#xA;Enumerable#collect." ilk="function" name="collect!" signature="array.collect! {|item| block }   -&gt;   array&#xA;array.map!     {|item| block }   -&gt;   array" />
        <scope doc="Returns a copy of `self&apos; with all nil elements removed." ilk="function" name="compact" signature="array.compact     -&gt;  an_array" />
        <scope doc="Removes nil elements from array. Returns nil if no changes&#xA;were made." ilk="function" name="compact!" signature="array.compact!    -&gt;   array  or  nil" />
        <scope doc="Appends the elements in other_array to `self&apos;." ilk="function" name="concat" signature="array.concat(other_array)   -&gt;  array" />
        <scope doc="Deletes items from `self&apos; that are equal to `obj&apos;. If the&#xA;item is not found, returns nil." ilk="function" name="delete" signature="array.delete(obj)            -&gt; obj or nil &#xA;array.delete(obj) { block }  -&gt; obj or nil" />
        <scope doc="Deletes the element at the specified index, returning that&#xA;element, or nil if the index is out of range. See also&#xA;Array#slice!." ilk="function" name="delete_at" signature="array.delete_at(index)  -&gt; obj or nil" />
        <scope doc="Deletes every element of `self&apos; for which `block&apos; evaluates&#xA;to true." ilk="function" name="delete_if" signature="array.delete_if {|item| block }  -&gt; array" />
        <scope doc="Calls `block&apos; once for each element in `self&apos;, passing that&#xA;element as a parameter." ilk="function" name="each" signature="array.each {|item| block }   -&gt;   array" />
        <scope doc="Same as Array#each, but passes the index of the element&#xA;instead of the element itself." ilk="function" name="each_index" signature="array.each_index {|index| block }  -&gt;  array" />
        <scope doc="Returns true if `self&apos; array contains no elements." ilk="function" name="empty?" signature="array.empty?   -&gt; true or false" />
        <scope doc="Returns true if `array&apos; and `other&apos; are the same object, or&#xA;are both arrays with the same content." ilk="function" name="eql?" signature="array.eql?(other)  -&gt; true or false" />
        <scope doc="Tries to return the element at position `index&apos;. If the&#xA;index lies outside the array, the first form throws an&#xA;IndexError exception, the second form returns `default&apos;, and&#xA;the third form returns the value of invoking the block,&#xA;passing in the index." ilk="function" name="fetch" signature="array.fetch(index)                    -&gt; obj&#xA;array.fetch(index, default )          -&gt; obj&#xA;array.fetch(index) {|index| block }   -&gt; obj" />
        <scope doc="The first three forms set the selected elements of `self&apos;&#xA;(which may be the entire array) to `obj&apos;. A `start&apos; of nil&#xA;is equivalent to zero." ilk="function" name="fill" signature="array.fill(obj)                                -&gt; array&#xA;array.fill(obj, start [, length])              -&gt; array&#xA;array.fill(obj, range )                        -&gt; array&#xA;array.fill {|index| block }                    -&gt; array&#xA;array.fill(start [, length] ) {|index| block } -&gt; array&#xA;array.fill(range) {|index| block }             -&gt; array" />
        <scope doc="Returns the first element, or the first n elements, of the&#xA;array. If the array is empty, the first form returns nil,&#xA;and the second form returns an empty array." ilk="function" name="first" signature="array.first   -&gt;   obj or nil&#xA;array.first(n) -&gt; an_array" />
        <scope doc="Returns a new array that is a one-dimensional flattening of&#xA;this array (recursively). That is, for every element that is&#xA;an array, extract its elements into the new array." ilk="function" name="flatten" signature="array.flatten -&gt; an_array" />
        <scope doc="Flattens `self&apos; in place." ilk="function" name="flatten!" signature="array.flatten! -&gt; array or nil" />
        <scope doc="Return true if this array is frozen (or temporarily frozen&#xA;while being sorted)." ilk="function" name="frozen?" signature="array.frozen?  -&gt; true or false" />
        <scope doc="Compute a hash-code for this array. Two arrays with the same&#xA;content will have the same hash code (and will compare using&#xA;eql?)." ilk="function" name="hash" signature="array.hash   -&gt; fixnum" />
        <scope doc="Returns true if the given object is present in `self&apos; (that&#xA;is, if any object == `anObject&apos;), false otherwise." ilk="function" name="include?" signature="array.include?(obj)   -&gt; true or false" />
        <scope doc="Returns the index of the first object in `self&apos; such that is&#xA;== to `obj&apos;. Returns nil if no match is found." ilk="function" name="index" signature="array.index(obj)   -&gt;  int or nil" />
        <scope doc="Deprecated; use Array#values_at." ilk="function" name="indexes" signature="array.indexes( i1, i2, ... iN )   -&gt; an_array&#xA;array.indices( i1, i2, ... iN )   -&gt; an_array" />
        <scope doc="Deprecated; use Array#values_at." ilk="function" name="indices" signature="array.indexes( i1, i2, ... iN )   -&gt; an_array&#xA;array.indices( i1, i2, ... iN )   -&gt; an_array" />
        <scope doc="Replaces the contents of `self&apos; with the contents of&#xA;`other_array&apos;, truncating or expanding if necessary." ilk="function" name="initialize_copy" signature="array.replace(other_array)  -&gt; array" />
        <scope doc="Inserts the given values before the element with the given&#xA;index (which may be negative)." ilk="function" name="insert" signature="array.insert(index, obj...)  -&gt; array" />
        <scope doc="Create a printable version of `array&apos;." ilk="function" name="inspect" signature="array.inspect  -&gt; string" />
        <scope doc="Returns a string created by converting each element of the&#xA;array to a string, separated by `sep&apos;." ilk="function" name="join" signature="array.join(sep=$,)    -&gt; str" />
        <scope doc="Returns the last element(s) of `self&apos;. If the array is&#xA;empty, the first form returns nil." ilk="function" name="last" signature="array.last     -&gt;  obj or nil&#xA;array.last(n)  -&gt;  an_array" />
        <scope doc="Returns the number of elements in `self&apos;. May be zero." ilk="function" name="length" signature="array.length -&gt; int" />
        <scope doc="Invokes `block&apos; once for each element of `self&apos;. Creates a&#xA;new array containing the values returned by the block." ilk="function" name="map" signature="array.collect {|item| block }  -&gt; an_array&#xA;array.map     {|item| block }  -&gt; an_array" />
        <scope doc="Invokes the block once for each element of `self&apos;, replacing&#xA;the element with the value returned by `block&apos;. See also&#xA;Enumerable#collect." ilk="function" name="map!" signature="array.collect! {|item| block }   -&gt;   array&#xA;array.map!     {|item| block }   -&gt;   array" />
        <scope doc="Returns the number of non-nil elements in `self&apos;. May be&#xA;zero." ilk="function" name="nitems" signature="array.nitems -&gt; int" />
        <scope doc="Packs the contents of `arr&apos; into a binary sequence according&#xA;to the directives in `aTemplateString&apos; (see the table below)&#xA;Directives ``A,&apos;&apos; ``a,&apos;&apos; and ``Z&apos;&apos; may be followed by a&#xA;count, which gives the width of the resulting field. The&#xA;remaining directives also may take a count, indicating the&#xA;number of array elements to convert." ilk="function" name="pack" signature="arr.pack ( aTemplateString ) -&gt; aBinaryString" />
        <scope doc="Removes the last element from `self&apos; and returns it, or nil&#xA;if the array is empty." ilk="function" name="pop" signature="array.pop  -&gt; obj or nil" />
        <scope doc="Append---Pushes the given object(s) on to the end of this&#xA;array. This expression returns the array itself, so several&#xA;appends may be chained together." ilk="function" name="push" signature="array.push(obj, ... )   -&gt; array" />
        <scope doc="Searches through the array whose elements are also arrays.&#xA;Compares `key&apos; with the second element of each contained&#xA;array using ==." ilk="function" name="rassoc" signature="array.rassoc(key) -&gt; an_array or nil" />
        <scope doc="Returns a new array containing the items in `self&apos; for which&#xA;the block is not true." ilk="function" name="reject" signature="array.reject {|item| block }  -&gt; an_array" />
        <scope doc="Equivalent to Array#delete_if, deleting elements from `self&apos;&#xA;for which the block evaluates to true, but returns nil if no&#xA;changes were made. Also see Enumerable#reject." ilk="function" name="reject!" signature="array.reject! {|item| block }  -&gt; array or nil" />
        <scope doc="Replaces the contents of `self&apos; with the contents of&#xA;`other_array&apos;, truncating or expanding if necessary." ilk="function" name="replace" signature="array.replace(other_array)  -&gt; array" />
        <scope doc="Returns a new array containing `self&apos;&apos;s elements in reverse&#xA;order." ilk="function" name="reverse" signature="array.reverse -&gt; an_array" />
        <scope doc="Reverses `self&apos; in place." ilk="function" name="reverse!" signature="array.reverse!   -&gt; array " />
        <scope doc="Same as Array#each, but traverses `self&apos; in reverse order." ilk="function" name="reverse_each" signature="array.reverse_each {|item| block } " />
        <scope doc="Returns the index of the last object in `array&apos; == to `obj&apos;.&#xA;Returns nil if no match is found." ilk="function" name="rindex" signature="array.rindex(obj)    -&gt;  int or nil" />
        <scope doc="Invokes the block passing in successive elements from&#xA;`array&apos;, returning an array containing those elements for&#xA;which the block returns a true value (equivalent to&#xA;Enumerable#select)." ilk="function" name="select" signature="array.select {|item| block } -&gt; an_array" />
        <scope doc="Returns the first element of `self&apos; and removes it (shifting&#xA;all other elements down by one). Returns nil if the array is&#xA;empty." ilk="function" name="shift" signature="array.shift   -&gt;   obj or nil" />
        <scope doc="Alias for #length" ilk="function" name="size" signature="()" />
        <scope doc="Element Reference---Returns the element at `index&apos;, or&#xA;returns a subarray starting at `start&apos; and continuing for&#xA;`length&apos; elements, or returns a subarray specified by&#xA;`range&apos;. Negative indices count backward from the end of the&#xA;array (-1 is the last element)." ilk="function" name="slice" signature="array[index]                -&gt; obj      or nil&#xA;array[start, length]        -&gt; an_array or nil&#xA;array[range]                -&gt; an_array or nil&#xA;array.slice(index)          -&gt; obj      or nil&#xA;array.slice(start, length)  -&gt; an_array or nil&#xA;array.slice(range)          -&gt; an_array or nil" />
        <scope doc="Deletes the element(s) given by an index (optionally with a&#xA;length) or by a range. Returns the deleted object, subarray,&#xA;or nil if the index is out of range." ilk="function" name="slice!" signature="array.slice!(index)         -&gt; obj or nil&#xA;array.slice!(start, length) -&gt; sub_array or nil&#xA;array.slice!(range)         -&gt; sub_array or nil " />
        <scope doc="Returns a new array created by sorting `self&apos;. Comparisons&#xA;for the sort will be done using the &lt;=&gt; operator or using an&#xA;optional code block." ilk="function" name="sort" signature="array.sort                   -&gt; an_array &#xA;array.sort {| a,b | block }  -&gt; an_array " />
        <scope doc="Sorts `self&apos;. Comparisons for the sort will be done using&#xA;the &lt;=&gt; operator or using an optional code block." ilk="function" name="sort!" signature="array.sort!                   -&gt; array&#xA;array.sort! {| a,b | block }  -&gt; array " />
        <scope doc="Returns `self&apos;. If called on a subclass of Array, converts&#xA;the receiver to an Array object." ilk="function" name="to_a" signature="array.to_a     -&gt; array" />
        <scope doc="Returns `self&apos;." ilk="function" name="to_ary" signature="array.to_ary -&gt; array" />
        <scope doc="Returns `self&apos;.join." ilk="function" name="to_s" signature="array.to_s -&gt; string" />
        <scope doc="Assumes that `self&apos; is an array of arrays and transposes the&#xA;rows and columns." ilk="function" name="transpose" signature="array.transpose -&gt; an_array" />
        <scope doc="Returns a new array by removing duplicate values in `self&apos;." ilk="function" name="uniq" signature="array.uniq   -&gt; an_array" />
        <scope doc="Removes duplicate elements from `self&apos;. Returns nil if no&#xA;changes are made (that is, no duplicates are found)." ilk="function" name="uniq!" signature="array.uniq! -&gt; array or nil" />
        <scope doc="Prepends objects to the front of `array&apos;. other elements up&#xA;one." ilk="function" name="unshift" signature="array.unshift(obj, ...)  -&gt; array" />
        <scope doc="Returns an array containing the elements in `self&apos;&#xA;corresponding to the given selector(s). The selectors may be&#xA;either integer indices or ranges." ilk="function" name="values_at" signature="array.values_at(selector,... )  -&gt; an_array" />
        <scope doc="Converts any arguments to arrays, then merges elements of&#xA;`self&apos; with corresponding elements from each argument. This&#xA;generates a sequence of self.size `n&apos;-element arrays, where&#xA;`n&apos; is one more that the count of arguments." ilk="function" name="zip" signature="array.zip(arg, ...)                   -&gt; an_array&#xA;array.zip(arg, ...) {| arr | block }  -&gt; nil" />
        <scope doc="Set Union---Returns a new array by joining this array with&#xA;other_array, removing duplicates." ilk="function" name="|" signature="array | other_array     -&gt;  an_array" />
      </scope>
      <scope classrefs="Integer" doc="Bignum objects hold integers outside the range of Fixnum.&#xA;Bignum objects are created automatically when integer&#xA;calculations would otherwise overflow a Fixnum." ilk="class" name="Bignum">
        <scope doc="Returns big modulo other. See Numeric.divmod for more&#xA;information." ilk="function" name="%" signature="big % other         =&gt; Numeric&#xA;big.modulo(other)   =&gt; Numeric" />
        <scope doc="Performs bitwise and between `big&apos; and `numeric&apos;." ilk="function" name="&amp;" signature="big &amp; numeric   =&gt;  integer" />
        <scope doc="Multiplies big and other, returning the result." ilk="function" name="*" signature="big * other  =&gt; Numeric" />
        <scope doc="Raises `big&apos; to the `exponent&apos; power (which may be an&#xA;integer, float, or anything that will coerce to a number)." ilk="function" name="**" signature="big ** exponent   #=&gt; numeric" />
        <scope doc="Adds big and other, returning the result." ilk="function" name="+" signature="big + other  =&gt; Numeric" />
        <scope doc="Divides big by other, returning the result." ilk="function" name="/" signature="big / other     =&gt; Numeric&#xA;big.div(other)  =&gt; Numeric" />
        <scope doc="Shifts big left `numeric&apos; positions (right if `numeric&apos; is&#xA;negative)." ilk="function" name="&lt;&lt;" signature="big &lt;&lt; numeric   =&gt;  integer" />
        <scope doc="Comparison---Returns -1, 0, or +1 depending on whether `big&apos;&#xA;is less than, equal to, or greater than `numeric&apos;. This is&#xA;the basis for the tests in Comparable." ilk="function" name="&lt;=&gt;" signature="big &lt;=&gt; numeric   =&gt; -1, 0, +1" />
        <scope doc="Returns true only if `obj&apos; has the same value as `big&apos;.&#xA;Contrast this with Bignum#eql?, which requires `obj&apos; to be a&#xA;Bignum." ilk="function" name="==" signature="big == obj  =&gt; true or false" />
        <scope doc="Shifts big right `numeric&apos; positions (left if `numeric&apos; is&#xA;negative)." ilk="function" name="&gt;&gt;" signature="big &gt;&gt; numeric   =&gt;  integer" />
        <scope doc="Bit Reference---Returns the `n&apos;th bit in the (assumed)&#xA;binary representation of `big&apos;, where `big&apos;[0] is the least&#xA;significant bit." ilk="function" name="[]" signature="big[n] -&gt; 0, 1" />
        <scope doc="Performs bitwise +exclusive or+ between `big&apos; and `numeric&apos;." ilk="function" name="^" signature="big ^ numeric   =&gt;  integer" />
        <scope doc="Returns the absolute value of `big&apos;." ilk="function" name="abs" signature="big.abs -&gt; aBignum" />
        <scope doc="MISSING: documentation" ilk="function" name="coerce" signature="(p1)" />
        <scope doc="Divides big by other, returning the result." ilk="function" name="div" signature="big / other     =&gt; Numeric&#xA;big.div(other)  =&gt; Numeric" />
        <scope doc="See Numeric#divmod." ilk="function" name="divmod" signature="big.divmod(numeric)   =&gt; array" />
        <scope doc="Returns true only if `obj&apos; is a Bignum with the same value&#xA;as `big&apos;. Contrast this with Bignum#==, which performs type&#xA;conversions." ilk="function" name="eql?" signature="big.eql?(obj)   =&gt; true or false" />
        <scope doc="Compute a hash based on the value of `big&apos;." ilk="function" name="hash" signature="big.hash   =&gt; fixnum" />
        <scope doc="Returns big modulo other. See Numeric.divmod for more&#xA;information." ilk="function" name="modulo" signature="big % other         =&gt; Numeric&#xA;big.modulo(other)   =&gt; Numeric" />
        <scope doc="Alias for #**" ilk="function" name="power!" signature="(p1)" />
        <scope doc="Returns the floating point result of dividing `big&apos; by&#xA;`numeric&apos;." ilk="function" name="quo" signature="big.quo(numeric) -&gt; float" />
        <scope doc="Alias for #quo" ilk="function" name="rdiv" signature="(p1)" />
        <scope doc="Returns the remainder after dividing `big&apos; by `numeric&apos;." ilk="function" name="remainder" signature="big.remainder(numeric)    =&gt; number" />
        <scope doc="Returns a Rational number if the result is in fact rational&#xA;(i.e. other &lt; 0)." ilk="function" name="rpower" signature="(other)" />
        <scope doc="Returns the number of bytes in the machine representation of&#xA;`big&apos;." ilk="function" name="size" signature="big.size -&gt; integer" />
        <scope doc="Converts `big&apos; to a Float. If `big&apos; doesn&apos;t fit in a Float,&#xA;the result is infinity." ilk="function" name="to_f" signature="big.to_f -&gt; float" />
        <scope doc="Returns a string containing the representation of `big&apos;&#xA;radix `base&apos; (2 through 36)." ilk="function" name="to_s" signature="big.to_s(base=10)   =&gt;  string" />
        <scope doc="Performs bitwise or between `big&apos; and `numeric&apos;." ilk="function" name="|" signature="big | numeric   =&gt;  integer" />
        <scope doc="Inverts the bits in big. As Bignums are conceptually&#xA;infinite length, the result acts as if it had an infinite&#xA;number of one bits to the left." ilk="function" name="~" signature="~big  =&gt;  integer" />
      </scope>
      <scope classrefs="Object" doc="Objects of class Binding encapsulate the execution context&#xA;at some particular place in the code and retain this context&#xA;for future use. The variables, methods, value of self, and&#xA;possibly an iterator block that can be accessed in this&#xA;context are all retained." ilk="class" name="Binding">
        <scope doc="MISSING: documentation" ilk="function" name="clone" signature="()" />
        <scope doc="MISSING: documentation" ilk="function" name="dup" signature="()" />
      </scope>
      <scope classrefs="Module" doc="Classes in Ruby are first-class objects---each is an&#xA;instance of class Class." ilk="class" name="Class">
        <scope attributes="__classmethod__ __ctor__" doc="Creates a new anonymous (unnamed) class with the given&#xA;superclass (or Object if no parameter is given). You can&#xA;give a class a name by assigning the class object to a&#xA;constant." ilk="function" name="new" signature="Class.new(super_class=Object)   =&gt;    a_class" />
        <scope doc="Allocates space for a new object of `class&apos;&apos;s class. The&#xA;returned object must be an instance of `class&apos;." ilk="function" name="allocate" signature="class.allocate()   =&gt;   obj" />
        <scope doc="Not documented" ilk="function" name="inherited" signature="(p1)" />
        <scope doc="Calls allocate to create a new object of `class&apos;&apos;s class,&#xA;then invokes that object&apos;s initialize method, passing it&#xA;`args&apos;. This is the method that ends up getting called&#xA;whenever an object is constructed using .new." ilk="function" name="new" signature="class.new(args, ...)    =&gt;  obj" />
        <scope doc="Returns the superclass of `class&apos;, or nil." ilk="function" name="superclass" signature="class.superclass -&gt; a_super_class or nil" />
      </scope>
      <scope classrefs="Object" doc="Continuation objects are generated by Kernel#callcc. They&#xA;hold a return address and execution context, allowing a&#xA;nonlocal return to the end of the callcc block from anywhere&#xA;within a program." ilk="class" name="Continuation">
        <scope doc="Invokes the continuation. The program continues from the end&#xA;of the callcc block." ilk="function" name="[]" signature="cont.call(args, ...) &#xA;cont[args, ...]" />
        <scope doc="Invokes the continuation. The program continues from the end&#xA;of the callcc block." ilk="function" name="call" signature="cont.call(args, ...) &#xA;cont[args, ...]" />
      </scope>
      <scope classrefs="Object" ilk="class" name="Data" />
      <scope classrefs="Object" doc="tmpdir - retrieve temporary directory path" ilk="class" name="Dir">
        <import symbol="Enumerable" />
        <scope attributes="__classmethod__" doc="Equivalent to calling `dir&apos;.glob(`string,&apos;0)." ilk="function" name="[]" signature="Dir[ string ] =&gt; array" />
        <scope attributes="__classmethod__" doc="Changes the current working directory of the process to the&#xA;given string. When called without an argument, changes the&#xA;directory to the value of the environment variable HOME, or&#xA;LOGDIR." ilk="function" name="chdir" signature="Dir.chdir( [ string] ) =&gt; 0&#xA;Dir.chdir( [ string] ) {| path | block }  =&gt; anObject" />
        <scope attributes="__classmethod__" doc="Changes this process&apos;s idea of the file system root. Only a&#xA;privileged process may make this call." ilk="function" name="chroot" signature="Dir.chroot( string ) =&gt; 0" />
        <scope attributes="__classmethod__" doc="Deletes the named directory. Raises a subclass of&#xA;SystemCallError if the directory isn&apos;t empty." ilk="function" name="delete" signature="Dir.delete( string ) =&gt; 0&#xA;Dir.rmdir( string ) =&gt; 0&#xA;Dir.unlink( string ) =&gt; 0" />
        <scope attributes="__classmethod__" doc="Returns an array containing all of the filenames in the&#xA;given directory. Will raise a SystemCallError if the named&#xA;directory doesn&apos;t exist." ilk="function" name="entries" signature="Dir.entries( dirname ) =&gt; array" />
        <scope attributes="__classmethod__" doc="Calls the block once for each entry in the named directory,&#xA;passing the filename of each entry as a parameter to the&#xA;block." ilk="function" name="foreach" signature="Dir.foreach( dirname ) {| filename | block }  =&gt; nil" />
        <scope attributes="__classmethod__" doc="Returns the path to the current working directory of this&#xA;process as a string." ilk="function" name="getwd" signature="Dir.getwd =&gt; string&#xA;Dir.pwd =&gt; string" />
        <scope attributes="__classmethod__" doc="Returns the filenames found by expanding the pattern given&#xA;in `string&apos;, either as an `array&apos; or as parameters to the&#xA;block. Note that this pattern is not a regexp (it&apos;s closer&#xA;to a shell glob)." ilk="function" name="glob" signature="Dir.glob( string, [flags] ) =&gt; array&#xA;Dir.glob( string, [flags] ) {| filename | block }  =&gt; nil" />
        <scope attributes="__classmethod__" doc="Makes a new directory named by `string&apos;, with permissions&#xA;specified by the optional parameter `anInteger&apos;. The&#xA;permissions may be modified by the value of File::umask, and&#xA;are ignored on NT." ilk="function" name="mkdir" signature="Dir.mkdir( string [, integer] ) =&gt; 0" />
        <scope attributes="__classmethod__ __ctor__" doc="Returns a new directory object for the named directory." ilk="function" name="new" signature="Dir.new( string ) -&gt; aDir" />
        <scope attributes="__classmethod__" doc="With no block, open is a synonym for Dir::new. If a block is&#xA;present, it is passed `aDir&apos; as a parameter." ilk="function" name="open" signature="Dir.open( string ) =&gt; aDir&#xA;Dir.open( string ) {| aDir | block } =&gt; anObject" />
        <scope attributes="__classmethod__" doc="Returns the path to the current working directory of this&#xA;process as a string." ilk="function" name="pwd" signature="Dir.getwd =&gt; string&#xA;Dir.pwd =&gt; string" />
        <scope attributes="__classmethod__" doc="Deletes the named directory. Raises a subclass of&#xA;SystemCallError if the directory isn&apos;t empty." ilk="function" name="rmdir" signature="Dir.delete( string ) =&gt; 0&#xA;Dir.rmdir( string ) =&gt; 0&#xA;Dir.unlink( string ) =&gt; 0" />
        <scope attributes="__classmethod__" doc="Returns the operating system&apos;s temporary file path." ilk="function" name="tmpdir" signature="()" />
        <scope attributes="__classmethod__" doc="Deletes the named directory. Raises a subclass of&#xA;SystemCallError if the directory isn&apos;t empty." ilk="function" name="unlink" signature="Dir.delete( string ) =&gt; 0&#xA;Dir.rmdir( string ) =&gt; 0&#xA;Dir.unlink( string ) =&gt; 0" />
        <scope doc="Closes the directory stream. Any further attempts to access&#xA;`dir&apos; will raise an IOError." ilk="function" name="close" signature="dir.close =&gt; nil" />
        <scope doc="Calls the block once for each entry in this directory,&#xA;passing the filename of each entry as a parameter to the&#xA;block." ilk="function" name="each" signature="dir.each { |filename| block }  =&gt; dir" />
        <scope doc="Returns the path parameter passed to `dir&apos;&apos;s constructor." ilk="function" name="path" signature="dir.path =&gt; string or nil" />
        <scope doc="Returns the current position in `dir&apos;. See also Dir#seek." ilk="function" name="pos" signature="dir.pos =&gt; integer&#xA;dir.tell =&gt; integer" />
        <scope doc="Synonym for Dir#seek, but returns the position parameter." ilk="function" name="pos=" signature="dir.pos( integer ) =&gt; integer" />
        <scope doc="Reads the next entry from `dir&apos; and returns it as a string.&#xA;Returns nil at the end of the stream." ilk="function" name="read" signature="dir.read =&gt; string or nil" />
        <scope doc="Repositions `dir&apos; to the first entry." ilk="function" name="rewind" signature="dir.rewind =&gt; dir" />
        <scope doc="Seeks to a particular location in `dir&apos;. `integer&apos; must be a&#xA;value returned by Dir#tell." ilk="function" name="seek" signature="dir.seek( integer ) =&gt; dir" />
        <scope doc="Returns the current position in `dir&apos;. See also Dir#seek." ilk="function" name="tell" signature="dir.pos =&gt; integer&#xA;dir.tell =&gt; integer" />
      </scope>
      <scope classrefs="IOError" ilk="class" name="EOFError" />
      <scope classrefs="Object" doc="Descendents of class Exception are used to communicate&#xA;between raise methods and rescue statements in begin/end&#xA;blocks. Exception objects carry information about the&#xA;exception---its type (the exception&apos;s class name), an&#xA;optional descriptive string, and optional traceback&#xA;information." ilk="class" name="Exception">
        <scope attributes="__classmethod__" doc="With no argument, or if the argument is the same as the&#xA;receiver, return the receiver. Otherwise, create a new&#xA;exception object of the same class as the receiver, but with&#xA;a message equal to string.to_str." ilk="function" name="exception" signature="exc.exception(string) -&gt; an_exception or exc" />
        <scope attributes="__classmethod__ __ctor__" doc="Construct a new Exception object, optionally passing in a&#xA;message." ilk="function" name="new" signature="Exception.new(msg = nil)   =&gt;  exception" />
        <scope doc="Returns any backtrace associated with the exception." ilk="function" name="backtrace" signature="exception.backtrace    =&gt; array" />
        <scope doc="With no argument, or if the argument is the same as the&#xA;receiver, return the receiver. Otherwise, create a new&#xA;exception object of the same class as the receiver, but with&#xA;a message equal to string.to_str." ilk="function" name="exception" signature="exc.exception(string) -&gt; an_exception or exc" />
        <scope doc="Return this exception&apos;s class name an message" ilk="function" name="inspect" signature="exception.inspect   =&gt; string" />
        <scope doc="Returns the result of invoking exception.to_s. Normally this&#xA;returns the exception&apos;s message or name." ilk="function" name="message" signature="exception.message   =&gt;  string&#xA;exception.to_str    =&gt;  string" />
        <scope doc="Sets the backtrace information associated with `exc&apos;. The&#xA;argument must be an array of String objects in the format&#xA;described in Exception#backtrace." ilk="function" name="set_backtrace" signature="exc.set_backtrace(array)   =&gt;  array" />
        <scope doc="Returns exception&apos;s message (or the name of the exception if&#xA;no message is set)." ilk="function" name="to_s" signature="exception.to_s   =&gt;  string" />
        <scope doc="Returns the result of invoking exception.to_s. Normally this&#xA;returns the exception&apos;s message or name." ilk="function" name="to_str" signature="exception.message   =&gt;  string&#xA;exception.to_str    =&gt;  string" />
      </scope>
      <scope classrefs="Object" doc="The global value false is the only instance of class&#xA;FalseClass and represents a logically false value in boolean&#xA;expressions. The class provides operators allowing false to&#xA;participate correctly in logical expressions." ilk="class" name="FalseClass">
        <scope doc="And---Returns false. `obj&apos; is always evaluated as it is the&#xA;argument to a method call---there is no short-circuit&#xA;evaluation in this case." ilk="function" name="&amp;" signature="false &amp; obj   =&gt; false&#xA;nil &amp; obj     =&gt; false" />
        <scope doc="Exclusive Or---If `obj&apos; is nil or false, returns false;&#xA;otherwise, returns true." ilk="function" name="^" signature="false ^ obj    =&gt; true or false&#xA;nil   ^ obj    =&gt; true or false" />
        <scope doc="&apos;nuf said..." ilk="function" name="to_s" signature="false.to_s   =&gt;  &quot;false&quot;" />
        <scope doc="Or---Returns false if `obj&apos; is nil or false; true otherwise." ilk="function" name="|" signature="false | obj   =&gt;   true or false&#xA;nil   | obj   =&gt;   true or false" />
      </scope>
      <scope classrefs="IO" doc="A File is an abstraction of any file object accessible by&#xA;the program and is closely associated with class IO File&#xA;includes the methods of module FileTest as class methods,&#xA;allowing you to write (for example) File.exist?(&quot;foo&quot;)." ilk="class" name="File">
        <scope attributes="__classmethod__" doc="Returns the last access time for the named file as a Time&#xA;object)." ilk="function" name="atime" signature="File.atime(file_name)  =&gt;  time" />
        <scope attributes="__classmethod__" doc="Returns the last component of the filename given in&#xA;`file_name&apos;, which must be formed using forward slashes&#xA;(``/&apos;&apos;) regardless of the separator used on the local file&#xA;system. If `suffix&apos; is given and present at the end of&#xA;`file_name&apos;, it is removed." ilk="function" name="basename" signature="File.basename(file_name [, suffix] ) -&gt; base_name" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is a block device." ilk="function" name="blockdev?" signature="File.blockdev?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is a character device." ilk="function" name="chardev?" signature="File.chardev?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Changes permission bits on the named file(s) to the bit&#xA;pattern represented by `mode_int&apos;. Actual effects are&#xA;operating system dependent (see the beginning of this&#xA;section)." ilk="function" name="chmod" signature="File.chmod(mode_int, file_name, ... ) -&gt; integer" />
        <scope attributes="__classmethod__" doc="Changes the owner and group of the named file(s) to the&#xA;given numeric owner and group id&apos;s. Only a process with&#xA;superuser privileges may change the owner of a file." ilk="function" name="chown" signature="File.chown(owner_int, group_int, file_name,... ) -&gt; integer" />
        <scope attributes="__classmethod__" doc="Returns the change time for the named file (the time at&#xA;which directory information about the file was changed, not&#xA;the file itself)." ilk="function" name="ctime" signature="File.ctime(file_name)  =&gt; time" />
        <scope attributes="__classmethod__" doc="Deletes the named files, returning the number of names&#xA;passed as arguments. Raises an exception on any error." ilk="function" name="delete" signature="File.delete(file_name, ...)  =&gt; integer&#xA;File.unlink(file_name, ...)  =&gt; integer" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is a directory, false&#xA;otherwise." ilk="function" name="directory?" signature="File.directory?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Returns all components of the filename given in `file_name&apos;&#xA;except the last one. The filename must be formed using&#xA;forward slashes (``/&apos;&apos;) regardless of the separator used on&#xA;the local file system." ilk="function" name="dirname" signature="File.dirname(file_name ) -&gt; dir_name" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is executable by the&#xA;effective user id of this process." ilk="function" name="executable?" signature="File.executable?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is executable by the real&#xA;user id of this process." ilk="function" name="executable_real?" signature="File.executable_real?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Return true if the named file exists." ilk="function" name="exist?" signature="File.exist?(file_name)    =&gt;  true or false&#xA;File.exists?(file_name)   =&gt;  true or false    (obsolete)" />
        <scope attributes="__classmethod__" doc="Return true if the named file exists." ilk="function" name="exists?" signature="File.exist?(file_name)    =&gt;  true or false&#xA;File.exists?(file_name)   =&gt;  true or false    (obsolete)" />
        <scope attributes="__classmethod__" doc="Converts a pathname to an absolute pathname. Relative paths&#xA;are referenced from the current working directory of the&#xA;process unless `dir_string&apos; is given, in which case it will&#xA;be used as the starting point." ilk="function" name="expand_path" signature="File.expand_path(file_name [, dir_string] ) -&gt; abs_file_name" />
        <scope attributes="__classmethod__" doc="Returns the extension (the portion of file name in `path&apos;&#xA;after the period)." ilk="function" name="extname" signature="File.extname(path) -&gt; string" />
        <scope attributes="__classmethod__" doc="Returns true if the named file exists and is a regular file." ilk="function" name="file?" signature="File.file?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if `path&apos; matches against `pattern&apos; The pattern&#xA;is not a regular expression; instead it follows rules&#xA;similar to shell filename globbing." ilk="function" name="fnmatch" signature="File.fnmatch( pattern, path, [flags] ) =&gt; (true or false)&#xA;File.fnmatch?( pattern, path, [flags] ) =&gt; (true or false)" />
        <scope attributes="__classmethod__" doc="Returns true if `path&apos; matches against `pattern&apos; The pattern&#xA;is not a regular expression; instead it follows rules&#xA;similar to shell filename globbing." ilk="function" name="fnmatch?" signature="File.fnmatch( pattern, path, [flags] ) =&gt; (true or false)&#xA;File.fnmatch?( pattern, path, [flags] ) =&gt; (true or false)" />
        <scope attributes="__classmethod__" doc="Identifies the type of the named file; the return string is&#xA;one of ``file&apos;&apos;, ``directory&apos;&apos;, ``characterSpecial&apos;&apos;,&#xA;``blockSpecial&apos;&apos;, ``fifo&apos;&apos;, ``link&apos;&apos;, ``socket&apos;&apos;, or&#xA;``unknown&apos;&apos;." ilk="function" name="ftype" signature="File.ftype(file_name)   =&gt; string" />
        <scope attributes="__classmethod__" doc="Returns true if the named file exists and the effective&#xA;group id of the calling process is the owner of the file.&#xA;Returns false on Windows." ilk="function" name="grpowned?" signature="File.grpowned?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named files are identical." ilk="function" name="identical?" signature="File.identical?(file_1, file_2)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Returns a new string formed by joining the strings using&#xA;File::SEPARATOR." ilk="function" name="join" signature="File.join(string, ...) -&gt; path" />
        <scope attributes="__classmethod__" doc="Equivalent to File::chmod, but does not follow symbolic&#xA;links (so it will change the permissions associated with the&#xA;link, not the file referenced by the link). Often not&#xA;available." ilk="function" name="lchmod" signature="File.lchmod(mode_int, file_name, ...)  =&gt; integer" />
        <scope attributes="__classmethod__" doc="Equivalent to File::chown, but does not follow symbolic&#xA;links (so it will change the owner associated with the link,&#xA;not the file referenced by the link). Often not available." ilk="function" name="lchown" signature="file.lchown(owner_int, group_int, file_name,..) =&gt; integer" />
        <scope attributes="__classmethod__" doc="Creates a new name for an existing file using a hard link.&#xA;Will not overwrite `new_name&apos; if it already exists (raising&#xA;a subclass of SystemCallError)." ilk="function" name="link" signature="File.link(old_name, new_name)    =&gt; 0" />
        <scope attributes="__classmethod__" doc="Same as File::stat, but does not follow the last symbolic&#xA;link. Instead, reports on the link itself." ilk="function" name="lstat" signature="File.lstat(file_name)   =&gt; stat" />
        <scope attributes="__classmethod__" doc="Returns the modification time for the named file as a Time&#xA;object." ilk="function" name="mtime" signature="File.mtime(file_name)  =&gt;  time" />
        <scope attributes="__classmethod__ __ctor__" doc="Opens the file named by `filename&apos; according to `mode&apos;&#xA;(default is ``r&apos;&apos;) and returns a new File object. See the&#xA;description of class IO for a description of `mode&apos;." ilk="function" name="new" signature="File.new(filename, mode=&quot;r&quot;)            =&gt; file&#xA;File.new(filename [, mode [, perm]])    =&gt; file" />
        <scope attributes="__classmethod__" doc="Returns true if the named file exists and the effective used&#xA;id of the calling process is the owner of the file." ilk="function" name="owned?" signature="File.owned?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is a pipe." ilk="function" name="pipe?" signature="File.pipe?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is readable by the effective&#xA;user id of this process." ilk="function" name="readable?" signature="File.readable?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is readable by the real user&#xA;id of this process." ilk="function" name="readable_real?" signature="File.readable_real?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns the name of the file referenced by the given link.&#xA;Not available on all platforms." ilk="function" name="readlink" signature="File.readlink(link_name) -&gt; file_name" />
        <scope attributes="__classmethod__" doc="Renames the given file to the new name. Raises a&#xA;SystemCallError if the file cannot be renamed." ilk="function" name="rename" signature="File.rename(old_name, new_name)   =&gt; 0" />
        <scope attributes="__classmethod__" doc="Returns true if the named file has the setgid bit set." ilk="function" name="setgid?" signature="File.setgid?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file has the setuid bit set." ilk="function" name="setuid?" signature="File.setuid?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Returns the size of file_name." ilk="function" name="size" signature="File.size(file_name)   =&gt; integer" />
        <scope attributes="__classmethod__" doc="Returns nil if file_name doesn&apos;t exist or has zero size, the&#xA;size of the file otherwise." ilk="function" name="size?" signature="File.file?(file_name)   =&gt; integer  or  nil" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is a socket." ilk="function" name="socket?" signature="File.socket?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Splits the given string into a directory and a file&#xA;component and returns them in a two-element array. See also&#xA;File::dirname and File::basename." ilk="function" name="split" signature="File.split(file_name)   =&gt; array" />
        <scope attributes="__classmethod__" doc="Returns a File::Stat object for the named file (see&#xA;File::Stat)." ilk="function" name="stat" signature="File.stat(file_name)   =&gt;  stat" />
        <scope attributes="__classmethod__" doc="Returns true if the named file has the sticky bit set." ilk="function" name="sticky?" signature="File.sticky?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Creates a symbolic link called `new_name&apos; for the existing&#xA;file `old_name&apos;. Raises a NotImplemented exception on&#xA;platforms that do not support symbolic links." ilk="function" name="symlink" signature="File.symlink(old_name, new_name)   =&gt; 0" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is a symbolic link." ilk="function" name="symlink?" signature="File.symlink?(file_name)   =&gt;  true or false" />
        <scope attributes="__classmethod__" doc="Truncates the file `file_name&apos; to be at most `integer&apos; bytes&#xA;long. Not available on all platforms." ilk="function" name="truncate" signature="File.truncate(file_name, integer)  =&gt; 0" />
        <scope attributes="__classmethod__" doc="Returns the current umask value for this process. If the&#xA;optional argument is given, set the umask to that value and&#xA;return the previous value." ilk="function" name="umask" signature="File.umask()          =&gt; integer&#xA;File.umask(integer)   =&gt; integer" />
        <scope attributes="__classmethod__" doc="Deletes the named files, returning the number of names&#xA;passed as arguments. Raises an exception on any error." ilk="function" name="unlink" signature="File.delete(file_name, ...)  =&gt; integer&#xA;File.unlink(file_name, ...)  =&gt; integer" />
        <scope attributes="__classmethod__" doc="Sets the access and modification times of each named file to&#xA;the first two arguments. Returns the number of file names in&#xA;the argument list." ilk="function" name="utime" signature="File.utime(atime, mtime, file_name,...)   =&gt;  integer" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is writable by the effective&#xA;user id of this process." ilk="function" name="writable?" signature="File.writable?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file is writable by the real user&#xA;id of this process." ilk="function" name="writable_real?" signature="File.writable_real?(file_name)   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns true if the named file exists and has a zero size." ilk="function" name="zero?" signature="File.zero?(file_name)   =&gt; true or false" />
        <scope doc="Returns the last access time (a Time object)" ilk="function" name="atime" signature="file.atime    =&gt; time" />
        <scope doc="Changes permission bits on `file&apos; to the bit pattern&#xA;represented by `mode_int&apos;. Actual effects are platform&#xA;dependent; on Unix systems, see chmod(2) for details." ilk="function" name="chmod" signature="file.chmod(mode_int)   =&gt; 0" />
        <scope doc="Changes the owner and group of `file&apos; to the given numeric&#xA;owner and group id&apos;s. Only a process with superuser&#xA;privileges may change the owner of a file." ilk="function" name="chown" signature="file.chown(owner_int, group_int )   =&gt; 0" />
        <scope doc="Returns the change time for `file&apos; (that is, the time&#xA;directory information about the file was changed, not the&#xA;file itself)." ilk="function" name="ctime" signature="file.ctime -&gt; time" />
        <scope doc="Locks or unlocks a file according to `locking_constant&apos; (a&#xA;logical `or&apos; of the values in the table below). Returns&#xA;false if File::LOCK_NB is specified and the operation would&#xA;otherwise have blocked." ilk="function" name="flock" signature="file.flock (locking_constant ) =&gt;  0 or false" />
        <scope doc="Same as IO#stat, but does not follow the last symbolic link.&#xA;Instead, reports on the link itself." ilk="function" name="lstat" signature="file.lstat   =&gt;  stat" />
        <scope doc="Returns the modification time for `file&apos;." ilk="function" name="mtime" signature="file.mtime -&gt; time" />
        <scope doc="Returns the pathname used to create `file&apos; as a string. Does&#xA;not normalize the name." ilk="function" name="path" signature="file.path -&gt; filename" />
        <scope doc="Truncates `file&apos; to at most `integer&apos; bytes. The file must&#xA;be opened for writing." ilk="function" name="truncate" signature="file.truncate(integer)    =&gt; 0" />
        <variable attributes="__const__" citdl="String" name="ALT_SEPARATOR" />
        <variable attributes="__const__" citdl="String" name="PATH_SEPARATOR" />
      </scope>
      <scope classrefs="Integer" doc="A Fixnum holds Integer values that can be represented in a&#xA;native machine word (minus 1 bit). If any operation on a&#xA;Fixnum exceeds this range, the value is automatically&#xA;converted to a Bignum." ilk="class" name="Fixnum">
        <import symbol="Precision" />
        <scope attributes="__classmethod__" doc="Convert obj to a Fixnum. Works with numeric parameters." ilk="function" name="induced_from" signature="Fixnum.induced_from(obj)    =&gt;  fixnum" />
        <scope doc="Returns fix modulo other. See Numeric.divmod for more&#xA;information." ilk="function" name="%" signature="fix % other         =&gt; Numeric&#xA;fix.modulo(other)   =&gt; Numeric" />
        <scope doc="Bitwise AND." ilk="function" name="&amp;" signature="fix &amp; other     =&gt; integer" />
        <scope doc="Performs multiplication: the class of the resulting object&#xA;depends on the class of numeric and on the magnitude of the&#xA;result." ilk="function" name="*" signature="fix * numeric   =&gt;  numeric_result" />
        <scope doc="Raises fix to the other power, which may be negative or&#xA;fractional." ilk="function" name="**" signature="fix ** other         =&gt; Numeric" />
        <scope doc="Performs addition: the class of the resulting object depends&#xA;on the class of numeric and on the magnitude of the result." ilk="function" name="+" signature="fix + numeric   =&gt;  numeric_result" />
        <scope doc="Performs division: the class of the resulting object depends&#xA;on the class of numeric and on the magnitude of the result." ilk="function" name="/" signature="fix / numeric      =&gt;  numeric_result&#xA;fix.div(numeric)   =&gt;  numeric_result" />
        <scope doc="Returns true if the value of fix is less than that of other." ilk="function" name="&lt;" signature="fix &lt; other     =&gt; true or false" />
        <scope doc="Shifts `fix&apos; left `count&apos; positions (right if `count&apos; is&#xA;negative)." ilk="function" name="&lt;&lt;" signature="fix &lt;&lt; count     =&gt; integer" />
        <scope doc="Returns true if the value of fix is less thanor equal to&#xA;that of other." ilk="function" name="&lt;=" signature="fix &lt;= other     =&gt; true or false" />
        <scope doc="Comparison---Returns -1, 0, or +1 depending on whether `fix&apos;&#xA;is less than, equal to, or greater than `numeric&apos;. This is&#xA;the basis for the tests in Comparable." ilk="function" name="&lt;=&gt;" signature="fix &lt;=&gt; numeric    =&gt; -1, 0, +1" />
        <scope doc="Return true if fix equals other numerically." ilk="function" name="==" signature="fix == other" />
        <scope doc="Returns true if the value of fix is greater than that of&#xA;other." ilk="function" name="&gt;" signature="fix &gt; other     =&gt; true or false" />
        <scope doc="Returns true if the value of fix is greater than or equal to&#xA;that of other." ilk="function" name="&gt;=" signature="fix &gt;= other     =&gt; true or false" />
        <scope doc="Shifts `fix&apos; right `count&apos; positions (left if `count&apos; is&#xA;negative)." ilk="function" name="&gt;&gt;" signature="fix &gt;&gt; count     =&gt; integer" />
        <scope doc="Bit Reference---Returns the `n&apos;th bit in the binary&#xA;representation of `fix&apos;, where `fix&apos;[0] is the least&#xA;significant bit." ilk="function" name="[]" signature="fix[n]     =&gt; 0, 1" />
        <scope doc="Bitwise EXCLUSIVE OR." ilk="function" name="^" signature="fix ^ other     =&gt; integer" />
        <scope doc="Returns the absolute value of `fix&apos;." ilk="function" name="abs" signature="fix.abs -&gt; aFixnum" />
        <scope doc="Performs division: the class of the resulting object depends&#xA;on the class of numeric and on the magnitude of the result." ilk="function" name="div" signature="fix / numeric      =&gt;  numeric_result&#xA;fix.div(numeric)   =&gt;  numeric_result" />
        <scope doc="See Numeric#divmod." ilk="function" name="divmod" signature="fix.divmod(numeric)    =&gt; array" />
        <scope doc="Returns the name of the object whose symbol id is `fix&apos;. If&#xA;there is no symbol in the symbol table with this value,&#xA;returns nil." ilk="function" name="id2name" signature="fix.id2name -&gt; string or nil" />
        <scope doc="Returns fix modulo other. See Numeric.divmod for more&#xA;information." ilk="function" name="modulo" signature="fix % other         =&gt; Numeric&#xA;fix.modulo(other)   =&gt; Numeric" />
        <scope doc="Alias for #**" ilk="function" name="power!" signature="(p1)" />
        <scope doc="If Rational is defined, returns a Rational number instead of&#xA;a Fixnum." ilk="function" name="quo" signature="(other)" />
        <scope doc="Alias for #quo" ilk="function" name="rdiv" signature="(p1)" />
        <scope doc="Returns a Rational number if the result is in fact rational&#xA;(i.e. other &lt; 0)." ilk="function" name="rpower" signature="(other)" />
        <scope doc="Returns the number of `bytes&apos; in the machine representation&#xA;of a Fixnum." ilk="function" name="size" signature="fix.size -&gt; fixnum" />
        <scope doc="Converts `fix&apos; to a Float." ilk="function" name="to_f" signature="fix.to_f -&gt; float" />
        <scope doc="Returns a string containing the representation of `fix&apos;&#xA;radix `base&apos; (between 2 and 36)." ilk="function" name="to_s" signature="fix.to_s( base=10 ) -&gt; aString" />
        <scope doc="Returns the symbol whose integer value is `fix&apos;. See also&#xA;Fixnum#id2name." ilk="function" name="to_sym" signature="fix.to_sym -&gt; aSymbol" />
        <scope doc="Returns true if `fix&apos; is zero." ilk="function" name="zero?" signature="fix.zero?    =&gt; true or false" />
        <scope doc="Bitwise OR." ilk="function" name="|" signature="fix | other     =&gt; integer" />
        <scope doc="One&apos;s complement: returns a number where each bit is&#xA;flipped." ilk="function" name="~" signature="~fix     =&gt; integer" />
      </scope>
      <scope classrefs="Numeric" doc="Float objects represent real numbers using the native&#xA;architecture&apos;s double-precision floating point&#xA;representation." ilk="class" name="Float">
        <import symbol="Precision" />
        <scope attributes="__classmethod__" doc="Convert obj to a float." ilk="function" name="induced_from" signature="Float.induced_from(obj)    =&gt;  float" />
        <scope doc="Return the modulo after division of flt by other." ilk="function" name="%" signature="flt % other         =&gt; float&#xA;flt.modulo(other)   =&gt; float" />
        <scope doc="Returns a new float which is the product of float and other." ilk="function" name="*" signature="float * other   =&gt; float" />
        <scope ilk="function" name="**" />
        <scope doc="Returns a new float which is the sum of float and other." ilk="function" name="+" signature="float + other   =&gt; float" />
        <scope doc="Returns a new float which is the result of dividing float by&#xA;other." ilk="function" name="/" signature="float / other   =&gt; float" />
        <scope doc="true if flt is less than other." ilk="function" name="&lt;" signature="flt &lt; other    =&gt;  true or false" />
        <scope doc="true if flt is less than or equal to other." ilk="function" name="&lt;=" signature="flt &lt;= other    =&gt;  true or false" />
        <scope doc="Returns -1, 0, or +1 depending on whether `flt&apos; is less&#xA;than, equal to, or greater than `numeric&apos;. This is the basis&#xA;for the tests in Comparable." ilk="function" name="&lt;=&gt;" signature="flt &lt;=&gt; numeric   =&gt; -1, 0, +1" />
        <scope doc="Returns true only if `obj&apos; has the same value as `flt&apos;.&#xA;Contrast this with Float#eql?, which requires `obj&apos; to be a&#xA;Float." ilk="function" name="==" signature="flt == obj   =&gt; true or false" />
        <scope doc="true if flt is greater than other." ilk="function" name="&gt;" signature="flt &gt; other    =&gt;  true or false" />
        <scope doc="true if flt is greater than or equal to other." ilk="function" name="&gt;=" signature="flt &gt;= other    =&gt;  true or false" />
        <scope doc="Returns the absolute value of `flt&apos;." ilk="function" name="abs" signature="flt.abs    =&gt; float" />
        <scope doc="Returns the smallest Integer greater than or equal to `flt&apos;." ilk="function" name="ceil" signature="flt.ceil    =&gt; integer" />
        <scope doc="MISSING: documentation" ilk="function" name="coerce" signature="(p1)" />
        <scope doc="See Numeric#divmod." ilk="function" name="divmod" signature="flt.divmod(numeric)    =&gt; array" />
        <scope doc="Returns true only if `obj&apos; is a Float with the same value as&#xA;`flt&apos;. Contrast this with Float#==, which performs type&#xA;conversions." ilk="function" name="eql?" signature="flt.eql?(obj)   =&gt; true or false" />
        <scope doc="Returns true if `flt&apos; is a valid IEEE floating point number&#xA;(it is not infinite, and nan? is false)." ilk="function" name="finite?" signature="flt.finite? -&gt; true or false" />
        <scope doc="Returns the largest integer less than or equal to `flt&apos;." ilk="function" name="floor" signature="flt.floor   =&gt; integer" />
        <scope doc="Returns a hash code for this float." ilk="function" name="hash" signature="flt.hash   =&gt; integer" />
        <scope doc="Returns nil, -1, or +1 depending on whether `flt&apos; is finite,&#xA;-infinity, or +infinity." ilk="function" name="infinite?" signature="flt.infinite? -&gt; nil, -1, +1" />
        <scope doc="Return the modulo after division of flt by other." ilk="function" name="modulo" signature="flt % other         =&gt; float&#xA;flt.modulo(other)   =&gt; float" />
        <scope doc="Returns true if `flt&apos; is an invalid IEEE floating point&#xA;number." ilk="function" name="nan?" signature="flt.nan? -&gt; true or false" />
        <scope doc="Rounds `flt&apos; to the nearest integer." ilk="function" name="round" signature="flt.round   =&gt; integer" />
        <scope doc="As flt is already a float, returns `self&apos;." ilk="function" name="to_f" signature="flt.to_f   =&gt; flt" />
        <scope doc="Returns `flt&apos; truncated to an Integer." ilk="function" name="to_i" signature="flt.to_i       =&gt; integer&#xA;flt.to_int     =&gt; integer&#xA;flt.truncate   =&gt; integer" />
        <scope doc="Returns `flt&apos; truncated to an Integer." ilk="function" name="to_int" signature="flt.to_i       =&gt; integer&#xA;flt.to_int     =&gt; integer&#xA;flt.truncate   =&gt; integer" />
        <scope doc="Returns a string containing a representation of self. As&#xA;well as a fixed or exponential form of the number, the call&#xA;may return ``NaN&apos;&apos;, ``Infinity&apos;&apos;, and ``-Infinity&apos;&apos;." ilk="function" name="to_s" signature="flt.to_s    =&gt; string" />
        <scope doc="Returns `flt&apos; truncated to an Integer." ilk="function" name="truncate" signature="flt.to_i       =&gt; integer&#xA;flt.to_int     =&gt; integer&#xA;flt.truncate   =&gt; integer" />
        <scope doc="Returns true if `flt&apos; is 0.0." ilk="function" name="zero?" signature="flt.zero? -&gt; true or false" />
        <variable attributes="__const__" citdl="Fixnum" name="DIG" />
        <variable attributes="__const__" citdl="Fixnum" name="MANT_DIG" />
        <variable attributes="__const__" citdl="Fixnum" name="MAX_10_EXP" />
        <variable attributes="__const__" citdl="Fixnum" name="MAX_EXP" />
        <variable attributes="__const__" citdl="Fixnum" name="MIN_10_EXP" />
        <variable attributes="__const__" citdl="Fixnum" name="MIN_EXP" />
        <variable attributes="__const__" citdl="Fixnum" name="RADIX" />
        <variable attributes="__const__" citdl="Fixnum" name="ROUNDS" />
      </scope>
      <scope classrefs="RangeError" ilk="class" name="FloatDomainError" />
      <scope classrefs="Object" doc="A Hash is a collection of key-value pairs. It is similar to&#xA;an Array, except that indexing is done via arbitrary keys of&#xA;any object type, not an integer index." ilk="class" name="Hash">
        <import symbol="Enumerable" />
        <scope attributes="__classmethod__" doc="Creates a new hash populated with the given objects.&#xA;Equivalent to the literal { `key&apos;, `value&apos;, ..." ilk="function" name="[]" signature="Hash[ [key =&gt;|, value]* ]   =&gt; hash" />
        <scope attributes="__classmethod__ __ctor__" doc="Returns a new, empty hash. If this hash is subsequently&#xA;accessed by a key that doesn&apos;t correspond to a hash entry,&#xA;the value returned depends on the style of new used to&#xA;create the hash." ilk="function" name="new" signature="Hash.new                          =&gt; hash&#xA;Hash.new(obj)                     =&gt; aHash&#xA;Hash.new {|hash, key| block }     =&gt; aHash" />
        <scope doc="Equality---Two hashes are equal if they each contain the&#xA;same number of keys and if each key-value pair is equal to&#xA;(according to Object#==) the corresponding elements in the&#xA;other hash." ilk="function" name="==" signature="hsh == other_hash    =&gt; true or false" />
        <scope doc="Element Reference---Retrieves the `value&apos; object&#xA;corresponding to the `key&apos; object. If not found, returns the&#xA;a default value (see Hash::new for details)." ilk="function" name="[]" signature="hsh[key]    =&gt;  value" />
        <scope doc="Element Assignment---Associates the value given by `value&apos;&#xA;with the key given by `key&apos;. `key&apos; should not have its value&#xA;changed while it is in use as a key (a String passed as a&#xA;key will be duplicated and frozen)." ilk="function" name="[]=" signature="hsh[key] = value        =&gt; value&#xA;hsh.store(key, value)   =&gt; value" />
        <scope doc="Removes all key-value pairs from `hsh&apos;." ilk="function" name="clear" signature="hsh.clear -&gt; hsh" />
        <scope doc="Returns the default value, the value that would be returned&#xA;by `hsh&apos;[`key&apos;] if `key&apos; did not exist in `hsh&apos;. See also&#xA;Hash::new and Hash#default=." ilk="function" name="default" signature="hsh.default(key=nil)   =&gt; obj" />
        <scope doc="Sets the default value, the value returned for a key that&#xA;does not exist in the hash. It is not possible to set the a&#xA;default to a Proc that will be executed on each key lookup." ilk="function" name="default=" signature="hsh.default = obj     =&gt; hsh" />
        <scope doc="If Hash::new was invoked with a block, return that block,&#xA;otherwise return nil." ilk="function" name="default_proc" signature="hsh.default_proc -&gt; anObject" />
        <scope doc="Deletes and returns a key-value pair from `hsh&apos; whose key is&#xA;equal to `key&apos;. If the key is not found, returns the&#xA;`default value&apos;." ilk="function" name="delete" signature="hsh.delete(key)                   =&gt; value&#xA;hsh.delete(key) {| key | block }  =&gt; value" />
        <scope doc="Deletes every key-value pair from `hsh&apos; for which `block&apos;&#xA;evaluates to true." ilk="function" name="delete_if" signature="hsh.delete_if {| key, value | block }  -&gt; hsh" />
        <scope doc="Calls `block&apos; once for each key in `hsh&apos;, passing the key&#xA;and value to the block as a two-element array. Because of&#xA;the assignment semantics of block parameters, these elements&#xA;will be split out if the block has two formal parameters." ilk="function" name="each" signature="hsh.each {| key, value | block } -&gt; hsh" />
        <scope doc="Calls `block&apos; once for each key in `hsh&apos;, passing the key as&#xA;a parameter." ilk="function" name="each_key" signature="hsh.each_key {| key | block } -&gt; hsh" />
        <scope doc="Calls `block&apos; once for each key in `hsh&apos;, passing the key&#xA;and value as parameters." ilk="function" name="each_pair" signature="hsh.each_pair {| key_value_array | block } -&gt; hsh" />
        <scope doc="Calls `block&apos; once for each key in `hsh&apos;, passing the value&#xA;as a parameter." ilk="function" name="each_value" signature="hsh.each_value {| value | block } -&gt; hsh" />
        <scope doc="Returns true if `hsh&apos; contains no key-value pairs." ilk="function" name="empty?" signature="hsh.empty?    =&gt; true or false" />
        <scope doc="Returns a value from the hash for the given key. If the key&#xA;can&apos;t be found, there are several options: With no other&#xA;arguments, it will raise an IndexError exception; if&#xA;`default&apos; is given, then that will be returned; if the&#xA;optional code block is specified, then that will be run and&#xA;its result returned." ilk="function" name="fetch" signature="hsh.fetch(key [, default] )       =&gt; obj&#xA;hsh.fetch(key) {| key | block }   =&gt; obj" />
        <scope doc="Returns true if the given key is present in `hsh&apos;." ilk="function" name="has_key?" signature="hsh.has_key?(key)    =&gt; true or false&#xA;hsh.include?(key)    =&gt; true or false&#xA;hsh.key?(key)        =&gt; true or false&#xA;hsh.member?(key)     =&gt; true or false" />
        <scope doc="Returns true if the given value is present for some key in&#xA;`hsh&apos;." ilk="function" name="has_value?" signature="hsh.has_value?(value)    =&gt; true or false&#xA;hsh.value?(value)        =&gt; true or false" />
        <scope doc="Returns true if the given key is present in `hsh&apos;." ilk="function" name="include?" signature="hsh.has_key?(key)    =&gt; true or false&#xA;hsh.include?(key)    =&gt; true or false&#xA;hsh.key?(key)        =&gt; true or false&#xA;hsh.member?(key)     =&gt; true or false" />
        <scope doc="Returns the key for a given value. If not found, returns&#xA;nil." ilk="function" name="index" signature="hsh.index(value)    =&gt; key" />
        <scope doc="Deprecated in favor of Hash#select." ilk="function" name="indexes" signature="hsh.indexes(key, ...)    =&gt; array&#xA;hsh.indices(key, ...)    =&gt; array" />
        <scope doc="Deprecated in favor of Hash#select." ilk="function" name="indices" signature="hsh.indexes(key, ...)    =&gt; array&#xA;hsh.indices(key, ...)    =&gt; array" />
        <scope doc="Replaces the contents of `hsh&apos; with the contents of&#xA;`other_hash&apos;." ilk="function" name="initialize_copy" signature="hsh.replace(other_hash) -&gt; hsh" />
        <scope doc="Return the contents of this hash as a string." ilk="function" name="inspect" signature="hsh.inspect  =&gt; string" />
        <scope doc="Returns a new hash created by using `hsh&apos;&apos;s values as keys,&#xA;and the keys as values." ilk="function" name="invert" signature="hsh.invert -&gt; aHash" />
        <scope doc="Returns true if the given key is present in `hsh&apos;." ilk="function" name="key?" signature="hsh.has_key?(key)    =&gt; true or false&#xA;hsh.include?(key)    =&gt; true or false&#xA;hsh.key?(key)        =&gt; true or false&#xA;hsh.member?(key)     =&gt; true or false" />
        <scope doc="Returns a new array populated with the keys from this hash.&#xA;See also Hash#values." ilk="function" name="keys" signature="hsh.keys    =&gt; array" />
        <scope doc="Returns the number of key-value pairs in the hash." ilk="function" name="length" signature="hsh.length    =&gt;  fixnum&#xA;hsh.size      =&gt;  fixnum" />
        <scope doc="Returns true if the given key is present in `hsh&apos;." ilk="function" name="member?" signature="hsh.has_key?(key)    =&gt; true or false&#xA;hsh.include?(key)    =&gt; true or false&#xA;hsh.key?(key)        =&gt; true or false&#xA;hsh.member?(key)     =&gt; true or false" />
        <scope doc="Returns a new hash containing the contents of `other_hash&apos;&#xA;and the contents of `hsh&apos;, overwriting entries in `hsh&apos; with&#xA;duplicate keys with those from `other_hash&apos;." ilk="function" name="merge" signature="hsh.merge(other_hash)                              -&gt; a_hash&#xA;hsh.merge(other_hash){|key, oldval, newval| block} -&gt; a_hash" />
        <scope doc="Adds the contents of `other_hash&apos; to `hsh&apos;, overwriting&#xA;entries with duplicate keys with those from `other_hash&apos;." ilk="function" name="merge!" signature="hsh.merge!(other_hash)                                 =&gt; hsh&#xA;hsh.update(other_hash)                                 =&gt; hsh&#xA;hsh.merge!(other_hash){|key, oldval, newval| block}    =&gt; hsh&#xA;hsh.update(other_hash){|key, oldval, newval| block}    =&gt; hsh" />
        <scope doc="Rebuilds the hash based on the current hash values for each&#xA;key. If values of key objects have changed since they were&#xA;inserted, this method will reindex `hsh&apos;." ilk="function" name="rehash" signature="hsh.rehash -&gt; hsh" />
        <scope doc="Same as Hash#delete_if, but works on (and returns) a copy of&#xA;the `hsh&apos;. Equivalent to `hsh&apos;.dup.delete_if." ilk="function" name="reject" signature="hsh.reject {| key, value | block }  -&gt; a_hash" />
        <scope doc="Equivalent to Hash#delete_if, but returns nil if no changes&#xA;were made." ilk="function" name="reject!" signature="hsh.reject! {| key, value | block }  -&gt; hsh or nil" />
        <scope doc="Replaces the contents of `hsh&apos; with the contents of&#xA;`other_hash&apos;." ilk="function" name="replace" signature="hsh.replace(other_hash) -&gt; hsh" />
        <scope doc="Returns a new array consisting of [key,value] pairs for&#xA;which the block returns true. Also see Hash.values_at." ilk="function" name="select" signature="hsh.select {|key, value| block}   =&gt; array" />
        <scope doc="Removes a key-value pair from `hsh&apos; and returns it as the&#xA;two-item array [ `key, value&apos; ], or the hash&apos;s default value&#xA;if the hash is empty." ilk="function" name="shift" signature="hsh.shift -&gt; anArray or obj" />
        <scope doc="Returns the number of key-value pairs in the hash." ilk="function" name="size" signature="hsh.length    =&gt;  fixnum&#xA;hsh.size      =&gt;  fixnum" />
        <scope doc="Converts `hsh&apos; to a nested array of [ `key, value&apos; ] arrays&#xA;and sorts it, using Array#sort." ilk="function" name="sort" signature="hsh.sort                    =&gt; array &#xA;hsh.sort {| a, b | block }  =&gt; array " />
        <scope doc="Element Assignment---Associates the value given by `value&apos;&#xA;with the key given by `key&apos;. `key&apos; should not have its value&#xA;changed while it is in use as a key (a String passed as a&#xA;key will be duplicated and frozen)." ilk="function" name="store" signature="hsh[key] = value        =&gt; value&#xA;hsh.store(key, value)   =&gt; value" />
        <scope doc="Converts `hsh&apos; to a nested array of [ `key, value&apos; ] arrays." ilk="function" name="to_a" signature="hsh.to_a -&gt; array" />
        <scope doc="Returns `self&apos;." ilk="function" name="to_hash" signature="hsh.to_hash   =&gt; hsh" />
        <scope doc="Converts `hsh&apos; to a string by converting the hash to an&#xA;array of [ `key, value&apos; ] pairs and then converting that&#xA;array to a string using Array#join with the default&#xA;separator." ilk="function" name="to_s" signature="hsh.to_s   =&gt; string" />
        <scope doc="Adds the contents of `other_hash&apos; to `hsh&apos;, overwriting&#xA;entries with duplicate keys with those from `other_hash&apos;." ilk="function" name="update" signature="hsh.merge!(other_hash)                                 =&gt; hsh&#xA;hsh.update(other_hash)                                 =&gt; hsh&#xA;hsh.merge!(other_hash){|key, oldval, newval| block}    =&gt; hsh&#xA;hsh.update(other_hash){|key, oldval, newval| block}    =&gt; hsh" />
        <scope doc="Returns true if the given value is present for some key in&#xA;`hsh&apos;." ilk="function" name="value?" signature="hsh.has_value?(value)    =&gt; true or false&#xA;hsh.value?(value)        =&gt; true or false" />
        <scope doc="Returns a new array populated with the values from `hsh&apos;.&#xA;See also Hash#keys." ilk="function" name="values" signature="hsh.values    =&gt; array" />
        <scope doc="Return an array containing the values associated with the&#xA;given keys. Also see Hash.select." ilk="function" name="values_at" signature="hsh.values_at(key, ...)   =&gt; array" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="IndexError" />
      <scope classrefs="Numeric" doc="Integer is the basis for the two concrete classes that hold&#xA;whole numbers, Bignum and Fixnum." ilk="class" name="Integer">
        <import symbol="Precision" />
        <scope attributes="__classmethod__" doc="Convert obj to an Integer." ilk="function" name="induced_from" signature="Integer.induced_from(obj)    =&gt;  fixnum, bignum" />
        <scope doc="As `int&apos; is already an Integer, all these methods simply&#xA;return the receiver." ilk="function" name="ceil" signature="int.to_i      =&gt; int&#xA;int.to_int    =&gt; int&#xA;int.floor     =&gt; int&#xA;int.ceil      =&gt; int&#xA;int.round     =&gt; int&#xA;int.truncate  =&gt; int" />
        <scope doc="Returns a string containing the ASCII character represented&#xA;by the receiver&apos;s value." ilk="function" name="chr" signature="int.chr    =&gt; string" />
        <scope doc="In an integer, the denominator is 1. Therefore, this method&#xA;returns 1." ilk="function" name="denominator" signature="()" />
        <scope doc="Iterates `block&apos;, passing decreasing values from `int&apos; down&#xA;to and including `limit&apos;." ilk="function" name="downto" signature="int.downto(limit) {|i| block }     =&gt; int" />
        <scope doc="As `int&apos; is already an Integer, all these methods simply&#xA;return the receiver." ilk="function" name="floor" signature="int.to_i      =&gt; int&#xA;int.to_int    =&gt; int&#xA;int.floor     =&gt; int&#xA;int.ceil      =&gt; int&#xA;int.round     =&gt; int&#xA;int.truncate  =&gt; int" />
        <scope doc="Returns the `greatest common denominator&apos; of the two numbers&#xA;(self and n)." ilk="function" name="gcd" signature="(other)" />
        <scope doc="Returns the GCD `and&apos; the LCM (see #gcd and #lcm) of the two&#xA;arguments (self and other). This is more efficient than&#xA;calculating them separately." ilk="function" name="gcdlcm" signature="(other)" />
        <scope doc="Always returns true." ilk="function" name="integer?" signature="int.integer? -&gt; true" />
        <scope doc="Returns the `lowest common multiple&apos; (LCM) of the two&#xA;arguments (self and other)." ilk="function" name="lcm" signature="(other)" />
        <scope doc="Returns the Integer equal to `int&apos; + 1." ilk="function" name="next" signature="int.next    =&gt; integer&#xA;int.succ    =&gt; integer" />
        <scope doc="In an integer, the value `is&apos; the numerator of its rational&#xA;equivalent. Therefore, this method returns self." ilk="function" name="numerator" signature="()" />
        <scope doc="As `int&apos; is already an Integer, all these methods simply&#xA;return the receiver." ilk="function" name="round" signature="int.to_i      =&gt; int&#xA;int.to_int    =&gt; int&#xA;int.floor     =&gt; int&#xA;int.ceil      =&gt; int&#xA;int.round     =&gt; int&#xA;int.truncate  =&gt; int" />
        <scope doc="Returns the Integer equal to `int&apos; + 1." ilk="function" name="succ" signature="int.next    =&gt; integer&#xA;int.succ    =&gt; integer" />
        <scope doc="Iterates block `int&apos; times, passing in values from zero to&#xA;`int&apos; - 1." ilk="function" name="times" signature="int.times {|i| block }     =&gt; int" />
        <scope doc="As `int&apos; is already an Integer, all these methods simply&#xA;return the receiver." ilk="function" name="to_i" signature="int.to_i      =&gt; int&#xA;int.to_int    =&gt; int&#xA;int.floor     =&gt; int&#xA;int.ceil      =&gt; int&#xA;int.round     =&gt; int&#xA;int.truncate  =&gt; int" />
        <scope doc="As `int&apos; is already an Integer, all these methods simply&#xA;return the receiver." ilk="function" name="to_int" signature="int.to_i      =&gt; int&#xA;int.to_int    =&gt; int&#xA;int.floor     =&gt; int&#xA;int.ceil      =&gt; int&#xA;int.round     =&gt; int&#xA;int.truncate  =&gt; int" />
        <scope doc="Returns a Rational representation of this integer." ilk="function" name="to_r" signature="()" />
        <scope doc="As `int&apos; is already an Integer, all these methods simply&#xA;return the receiver." ilk="function" name="truncate" signature="int.to_i      =&gt; int&#xA;int.to_int    =&gt; int&#xA;int.floor     =&gt; int&#xA;int.ceil      =&gt; int&#xA;int.round     =&gt; int&#xA;int.truncate  =&gt; int" />
        <scope doc="Iterates `block&apos;, passing in integer values from `int&apos; up to&#xA;and including `limit&apos;." ilk="function" name="upto" signature="int.upto(limit) {|i| block }     =&gt; int" />
      </scope>
      <scope classrefs="SignalException" ilk="class" name="Interrupt" />
      <scope classrefs="Object" doc="Class IO is the basis for all input and output in Ruby. An&#xA;I/O stream may be `duplexed&apos; (that is, bidirectional), and&#xA;so may use more than one native operating system stream." ilk="class" name="IO">
        <import symbol="Enumerable" />
        <import symbol="File::Constants" />
        <scope attributes="__classmethod__" doc="Synonym for IO::new." ilk="function" name="for_fd" signature="IO.for_fd(fd, mode)    =&gt; io" />
        <scope attributes="__classmethod__" doc="Executes the block for every line in the named I/O port,&#xA;where lines are separated by `sep_string&apos;." ilk="function" name="foreach" signature="IO.foreach(name, sep_string=$/) {|line| block }   =&gt; nil" />
        <scope attributes="__classmethod__ __ctor__" doc="Returns a new IO object (a stream) for the given integer&#xA;file descriptor and mode string. See also IO#fileno and&#xA;IO::for_fd." ilk="function" name="new" signature="IO.new(fd, mode)   =&gt; io" />
        <scope attributes="__classmethod__" doc="With no associated block, open is a synonym for IO::new. If&#xA;the optional code block is given, it will be passed `io&apos; as&#xA;an argument, and the IO object will automatically be closed&#xA;when the block terminates." ilk="function" name="open" signature="IO.open(fd, mode_string=&quot;r&quot; )               =&gt; io&#xA;IO.open(fd, mode_string=&quot;r&quot; ) {|io| block } =&gt; obj" />
        <scope attributes="__classmethod__" doc="Creates a pair of pipe endpoints (connected to each other)&#xA;and returns them as a two-element array of IO objects: [&#xA;`read_file&apos;, `write_file&apos; ]. Not available on all platforms." ilk="function" name="pipe" signature="IO.pipe -&gt; array" />
        <scope attributes="__classmethod__" doc="Runs the specified command string as a subprocess; the&#xA;subprocess&apos;s standard input and output will be connected to&#xA;the returned IO object. If `cmd_string&apos; starts with a ``-&apos;&apos;,&#xA;then a new instance of Ruby is started as the subprocess." ilk="function" name="popen" signature="IO.popen(cmd_string, mode=&quot;r&quot; )               =&gt; io&#xA;IO.popen(cmd_string, mode=&quot;r&quot; ) {|io| block } =&gt; obj" />
        <scope attributes="__classmethod__" doc="Opens the file, optionally seeks to the given offset, then&#xA;returns `length&apos; bytes (defaulting to the rest of the file).&#xA;read ensures the file is closed before returning." ilk="function" name="read" signature="IO.read(name, [length [, offset]] )   =&gt; string" />
        <scope attributes="__classmethod__" doc="Reads the entire file specified by `name&apos; as individual&#xA;lines, and returns those lines in an array. Lines are&#xA;separated by `sep_string&apos;." ilk="function" name="readlines" signature="IO.readlines(name, sep_string=$/)   =&gt; array" />
        <scope attributes="__classmethod__" doc="See Kernel#select." ilk="function" name="select" signature="IO.select(read_array &#xA;[, write_array &#xA;[, error_array &#xA;[, timeout]]] ) =&gt;  array  or  nil" />
        <scope attributes="__classmethod__" doc="Opens the given path, returning the underlying file&#xA;descriptor as a Fixnum." ilk="function" name="sysopen" signature="IO.sysopen(path, [mode, [perm]])  =&gt; fixnum" />
        <scope doc="String Output---Writes `obj&apos; to `ios&apos;. `obj&apos; will be&#xA;converted to a string using to_s." ilk="function" name="&lt;&lt;" signature="ios &lt;&lt; obj     =&gt; ios" />
        <scope doc="Puts `ios&apos; into binary mode. This is useful only in MS-&#xA;DOS/Windows environments." ilk="function" name="binmode" signature="ios.binmode    =&gt; ios" />
        <scope doc="Closes `ios&apos; and flushes any pending writes to the operating&#xA;system. The stream is unavailable for any further data&#xA;operations; an IOError is raised if such an attempt is made." ilk="function" name="close" signature="ios.close   =&gt; nil" />
        <scope doc="Closes the read end of a duplex I/O stream (i.e., one that&#xA;contains both a read and a write stream, such as a pipe).&#xA;Will raise an IOError if the stream is not duplexed." ilk="function" name="close_read" signature="ios.close_read    =&gt; nil" />
        <scope doc="Closes the write end of a duplex I/O stream (i.e., one that&#xA;contains both a read and a write stream, such as a pipe).&#xA;Will raise an IOError if the stream is not duplexed." ilk="function" name="close_write" signature="ios.close_write   =&gt; nil" />
        <scope doc="Returns true if `ios&apos; is completely closed (for duplex&#xA;streams, both reader and writer), false otherwise." ilk="function" name="closed?" signature="ios.closed?    =&gt; true or false" />
        <scope doc="Executes the block for every line in `ios&apos;, where lines are&#xA;separated by `sep_string&apos;. `ios&apos; must be opened for reading&#xA;or an IOError will be raised." ilk="function" name="each" signature="ios.each(sep_string=$/)      {|line| block }  =&gt; ios&#xA;ios.each_line(sep_string=$/) {|line| block }  =&gt; ios" />
        <scope doc="Calls the given block once for each byte (0..255) in `ios&apos;,&#xA;passing the byte as an argument. The stream must be opened&#xA;for reading or an IOError will be raised." ilk="function" name="each_byte" signature="ios.each_byte {|byte| block }  =&gt; nil" />
        <scope doc="Executes the block for every line in `ios&apos;, where lines are&#xA;separated by `sep_string&apos;. `ios&apos; must be opened for reading&#xA;or an IOError will be raised." ilk="function" name="each_line" signature="ios.each(sep_string=$/)      {|line| block }  =&gt; ios&#xA;ios.each_line(sep_string=$/) {|line| block }  =&gt; ios" />
        <scope doc="Returns true if `ios&apos; is at end of file that means there are&#xA;no more data to read. The stream must be opened for reading&#xA;or an IOError will be raised." ilk="function" name="eof" signature="ios.eof     =&gt; true or false&#xA;ios.eof?    =&gt; true or false" />
        <scope doc="Returns true if `ios&apos; is at end of file that means there are&#xA;no more data to read. The stream must be opened for reading&#xA;or an IOError will be raised." ilk="function" name="eof?" signature="ios.eof     =&gt; true or false&#xA;ios.eof?    =&gt; true or false" />
        <scope doc="Provides a mechanism for issuing low-level commands to&#xA;control or query file-oriented I/O streams. Arguments and&#xA;results are platform dependent." ilk="function" name="fcntl" signature="ios.fcntl(integer_cmd, arg)    =&gt; integer" />
        <scope doc="Returns an integer representing the numeric file descriptor&#xA;for `ios&apos;." ilk="function" name="fileno" signature="ios.fileno    =&gt; fixnum&#xA;ios.to_i      =&gt; fixnum" />
        <scope doc="Flushes any buffered data within `ios&apos; to the underlying&#xA;operating system (note that this is Ruby internal buffering&#xA;only; the OS may buffer the data as well)." ilk="function" name="flush" signature="ios.flush    =&gt; ios" />
        <scope doc="Immediately writes all buffered data in `ios&apos; to disk.&#xA;Returns nil if the underlying operating system does not&#xA;support `fsync(2)&apos;." ilk="function" name="fsync" signature="ios.fsync   =&gt; 0 or nil" />
        <scope doc="Gets the next 8-bit byte (0..255) from `ios&apos;. Returns nil if&#xA;called at end of file." ilk="function" name="getc" signature="ios.getc   =&gt; fixnum or nil" />
        <scope doc="Reads the next ``line&apos;&apos; from the I/O stream; lines are&#xA;separated by `sep_string&apos;. A separator of nil reads the&#xA;entire contents, and a zero-length separator reads the input&#xA;a paragraph at a time (two successive newlines in the input&#xA;separate paragraphs)." ilk="function" name="gets" signature="ios.gets(sep_string=$/)   =&gt; string or nil" />
        <scope doc="Return a string describing this IO object." ilk="function" name="inspect" signature="ios.inspect   =&gt; string" />
        <scope doc="Provides a mechanism for issuing low-level commands to&#xA;control or query I/O devices. Arguments and results are&#xA;platform dependent." ilk="function" name="ioctl" signature="ios.ioctl(integer_cmd, arg)    =&gt; integer" />
        <scope doc="Returns true if `ios&apos; is associated with a terminal device&#xA;(tty), false otherwise." ilk="function" name="isatty" signature="ios.isatty   =&gt; true or false&#xA;ios.tty?     =&gt; true or false" />
        <scope doc="Returns the current line number in `ios&apos;. The stream must be&#xA;opened for reading." ilk="function" name="lineno" signature="ios.lineno    =&gt; integer" />
        <scope doc="Manually sets the current line number to the given value. $." ilk="function" name="lineno=" signature="ios.lineno = integer    =&gt; integer" />
        <scope doc="Returns the process ID of a child process associated with&#xA;`ios&apos;. This will be set by IO::popen." ilk="function" name="pid" signature="ios.pid    =&gt; fixnum" />
        <scope doc="Returns the current offset (in bytes) of `ios&apos;." ilk="function" name="pos" signature="ios.pos     =&gt; integer&#xA;ios.tell    =&gt; integer" />
        <scope doc="Seeks to the given position (in bytes) in `ios&apos;." ilk="function" name="pos=" signature="ios.pos = integer    =&gt; integer" />
        <scope doc="Writes the given object(s) to `ios&apos;. The stream must be&#xA;opened for writing." ilk="function" name="print" signature="ios.print()             =&gt; nil&#xA;ios.print(obj, ...)     =&gt; nil" />
        <scope doc="Formats and writes to `ios&apos;, converting parameters under&#xA;control of the format string. See Kernel#sprintf for&#xA;details." ilk="function" name="printf" signature="ios.printf(format_string [, obj, ...] )   =&gt; nil" />
        <scope doc="If `obj&apos; is Numeric, write the character whose code is&#xA;`obj&apos;, otherwise write the first character of the string&#xA;representation of `obj&apos; to `ios&apos;." ilk="function" name="putc" signature="ios.putc(obj)    =&gt; obj" />
        <scope doc="Writes the given objects to `ios&apos; as with IO#print. Writes a&#xA;record separator (typically a newline) after any that do not&#xA;already end with a newline sequence." ilk="function" name="puts" signature="ios.puts(obj, ...)    =&gt; nil" />
        <scope doc="Reads at most `length&apos; bytes from the I/O stream, or to the&#xA;end of file if `length&apos; is omitted or is nil. `length&apos; must&#xA;be a non-negative integer or nil." ilk="function" name="read" signature="ios.read([length [, buffer]])    =&gt; string, buffer, or nil" />
        <scope doc="Reads a character as with IO#getc, but raises an EOFError on&#xA;end of file." ilk="function" name="readchar" signature="ios.readchar   =&gt; fixnum" />
        <scope doc="Reads a line as with IO#gets, but raises an EOFError on end&#xA;of file." ilk="function" name="readline" signature="ios.readline(sep_string=$/)   =&gt; string" />
        <scope doc="Reads all of the lines in `ios&apos;, and returns them in&#xA;`anArray&apos;. Lines are separated by the optional `sep_string&apos;." ilk="function" name="readlines" signature="ios.readlines(sep_string=$/)  =&gt;   array" />
        <scope doc="Reads at most `maxlen&apos; bytes from the I/O stream but it&#xA;blocks only if `ios&apos; has no data immediately available. If&#xA;the optional `outbuf&apos; argument is present, it must reference&#xA;a String, which will receive the data." ilk="function" name="readpartial" signature="ios.readpartial(maxlen[, outbuf])    =&gt; string, outbuf" />
        <scope doc="Reassociates `ios&apos; with the I/O stream given in `other_IO&apos;&#xA;or to a new stream opened on `path&apos;. This may dynamically&#xA;change the actual class of this stream." ilk="function" name="reopen" signature="ios.reopen(other_IO)         =&gt; ios &#xA;ios.reopen(path, mode_str)   =&gt; ios" />
        <scope doc="Positions `ios&apos; to the beginning of input, resetting lineno&#xA;to zero." ilk="function" name="rewind" signature="ios.rewind    =&gt; 0" />
        <scope doc="Seeks to a given offset `anInteger&apos; in the stream according&#xA;to the value of `whence&apos;:" ilk="function" name="seek" signature="ios.seek(amount, whence=SEEK_SET) -&gt; 0" />
        <scope doc="Returns status information for `ios&apos; as an object of type&#xA;File::Stat." ilk="function" name="stat" signature="ios.stat    =&gt; stat" />
        <scope doc="Returns the current ``sync mode&apos;&apos; of `ios&apos;. When sync mode&#xA;is true, all output is immediately flushed to the underlying&#xA;operating system and is not buffered by Ruby internally." ilk="function" name="sync" signature="ios.sync    =&gt; true or false" />
        <scope doc="Sets the ``sync mode&apos;&apos; to true or false. When sync mode is&#xA;true, all output is immediately flushed to the underlying&#xA;operating system and is not buffered internally." ilk="function" name="sync=" signature="ios.sync = boolean   =&gt; boolean" />
        <scope doc="Reads `integer&apos; bytes from `ios&apos; using a low-level read and&#xA;returns them as a string. Do not mix with other methods that&#xA;read from `ios&apos; or you may get unpredictable results." ilk="function" name="sysread" signature="ios.sysread(integer )    =&gt; string" />
        <scope doc="Seeks to a given `offset&apos; in the stream according to the&#xA;value of `whence&apos; (see IO#seek for values of `whence&apos;).&#xA;Returns the new offset into the file." ilk="function" name="sysseek" signature="ios.sysseek(offset, whence=SEEK_SET)   =&gt; integer" />
        <scope doc="Writes the given string to `ios&apos; using a low-level write.&#xA;Returns the number of bytes written." ilk="function" name="syswrite" signature="ios.syswrite(string)   =&gt; integer" />
        <scope doc="Returns the current offset (in bytes) of `ios&apos;." ilk="function" name="tell" signature="ios.pos     =&gt; integer&#xA;ios.tell    =&gt; integer" />
        <scope doc="Alias for #fileno" ilk="function" name="to_i" signature="()" />
        <scope doc="Returns `ios&apos;." ilk="function" name="to_io" signature="ios.to_io -&gt; ios" />
        <scope doc="Returns true if `ios&apos; is associated with a terminal device&#xA;(tty), false otherwise." ilk="function" name="tty?" signature="ios.isatty   =&gt; true or false&#xA;ios.tty?     =&gt; true or false" />
        <scope doc="Pushes back one character (passed as a parameter) onto&#xA;`ios&apos;, such that a subsequent buffered read will return it.&#xA;Only one character may be pushed back before a subsequent&#xA;read operation (that is, you will be able to read only the&#xA;last of several characters that have been pushed back)." ilk="function" name="ungetc" signature="ios.ungetc(integer)   =&gt; nil" />
        <scope doc="Writes the given string to `ios&apos;. The stream must be opened&#xA;for writing." ilk="function" name="write" signature="ios.write(string)    =&gt; integer" />
        <variable attributes="__const__" citdl="Fixnum" name="SEEK_CUR" />
        <variable attributes="__const__" citdl="Fixnum" name="SEEK_END" />
        <variable attributes="__const__" citdl="Fixnum" name="SEEK_SET" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="IOError" />
      <scope classrefs="ScriptError" ilk="class" name="LoadError" />
      <scope classrefs="StandardError" ilk="class" name="LocalJumpError">
        <scope doc="call_seq:" ilk="function" name="exit_value" signature="()" />
        <scope doc="The reason this block was terminated: :break, :redo, :retry,&#xA;:next, :return, or :noreason." ilk="function" name="reason" signature="local_jump_error.reason   =&gt; symbol" />
      </scope>
      <scope classrefs="Object" doc="MatchData is the type of the special variable $~, and is the&#xA;type of the object returned by Regexp#match and&#xA;Regexp#last_match. It encapsulates all the results of a&#xA;pattern match, results normally accessed through the special&#xA;variables $&amp;, $&apos;, $`, $1, $2, and so on." ilk="class" name="MatchData">
        <scope doc="Match Reference---MatchData acts as an array, and may be&#xA;accessed using the normal array indexing techniques.&#xA;`mtch&apos;[0] is equivalent to the special variable $&amp;, and&#xA;returns the entire matched string." ilk="function" name="[]" signature="mtch[i]               =&gt; obj&#xA;mtch[start, length]   =&gt; array&#xA;mtch[range]           =&gt; array" />
        <scope doc="Returns the offset of the start of the `n&apos;th element of the&#xA;match array in the string." ilk="function" name="begin" signature="mtch.begin(n)   =&gt; integer" />
        <scope doc="Returns the array of captures; equivalent to&#xA;mtch.to_a[1..-1]." ilk="function" name="captures" signature="mtch.captures   =&gt; array" />
        <scope doc="Returns the offset of the character immediately following&#xA;the end of the `n&apos;th element of the match array in the&#xA;string." ilk="function" name="end" signature="mtch.end(n)   =&gt; integer" />
        <scope doc="Returns a string representing `obj&apos;. The default to_s prints&#xA;the object&apos;s class and an encoding of the object id." ilk="function" name="inspect" signature="obj.to_s    =&gt; string" />
        <scope doc="Returns the number of elements in the match array." ilk="function" name="length" signature="mtch.length   =&gt; integer&#xA;mtch.size     =&gt; integer" />
        <scope doc="Returns a two-element array containing the beginning and&#xA;ending offsets of the `n&apos;th match." ilk="function" name="offset" signature="mtch.offset(n)   =&gt; array" />
        <scope doc="Returns the portion of the original string after the current&#xA;match. Equivalent to the special variable $&apos;." ilk="function" name="post_match" signature="mtch.post_match   =&gt; str" />
        <scope doc="Returns the portion of the original string before the&#xA;current match. Equivalent to the special variable $`." ilk="function" name="pre_match" signature="mtch.pre_match   =&gt; str" />
        <scope doc="Uses each `index&apos; to access the matching values, returning&#xA;an array of the corresponding matches." ilk="function" name="select" signature="mtch.select([index]*)   =&gt; array" />
        <scope doc="Returns the number of elements in the match array." ilk="function" name="size" signature="mtch.length   =&gt; integer&#xA;mtch.size     =&gt; integer" />
        <scope doc="Returns a frozen copy of the string passed in to match." ilk="function" name="string" signature="mtch.string   =&gt; str" />
        <scope doc="Returns the array of matches." ilk="function" name="to_a" signature="mtch.to_a   =&gt; anArray" />
        <scope doc="Returns the entire matched string." ilk="function" name="to_s" signature="mtch.to_s   =&gt; str" />
        <scope doc="Uses each `index&apos; to access the matching values, returning&#xA;an array of the corresponding matches." ilk="function" name="values_at" signature="mtch.select([index]*)   =&gt; array" />
      </scope>
      <scope classrefs="Object" ilk="class" name="MatchingData">
        <scope ilk="function" name="[]" />
        <scope ilk="function" name="begin" />
        <scope ilk="function" name="captures" />
        <scope ilk="function" name="end" />
        <scope ilk="function" name="inspect" />
        <scope ilk="function" name="length" />
        <scope ilk="function" name="offset" />
        <scope ilk="function" name="post_match" />
        <scope ilk="function" name="pre_match" />
        <scope ilk="function" name="select" />
        <scope ilk="function" name="size" />
        <scope ilk="function" name="string" />
        <scope ilk="function" name="to_a" />
        <scope ilk="function" name="to_s" />
        <scope ilk="function" name="values_at" />
      </scope>
      <scope classrefs="Object" ilk="class" name="Method">
        <scope doc="Two method objects are equal if that are bound to the same&#xA;object and contain the same body." ilk="function" name="==" signature="meth == other_meth  =&gt; true or false" />
        <scope doc="Invokes the `meth&apos; with the specified arguments, returning&#xA;the method&apos;s return value." ilk="function" name="[]" signature="meth.call(args, ...)    =&gt; obj&#xA;meth[args, ...]         =&gt; obj" />
        <scope doc="Returns an indication of the number of arguments accepted by&#xA;a method. Returns a nonnegative integer for methods that&#xA;take a fixed number of arguments." ilk="function" name="arity" signature="meth.arity    =&gt; fixnum" />
        <scope doc="Invokes the `meth&apos; with the specified arguments, returning&#xA;the method&apos;s return value." ilk="function" name="call" signature="meth.call(args, ...)    =&gt; obj&#xA;meth[args, ...]         =&gt; obj" />
        <scope doc="MISSING: documentation" ilk="function" name="clone" signature="()" />
        <scope doc="Show the name of the underlying method." ilk="function" name="inspect" signature="meth.to_s      =&gt;  string&#xA;meth.inspect   =&gt;  string" />
        <scope doc="Returns a Proc object corresponding to this method." ilk="function" name="to_proc" signature="meth.to_proc    =&gt; prc" />
        <scope doc="Show the name of the underlying method." ilk="function" name="to_s" signature="meth.to_s      =&gt;  string&#xA;meth.inspect   =&gt;  string" />
        <scope doc="Dissociates `meth&apos; from it&apos;s current receiver. The resulting&#xA;UnboundMethod can subsequently be bound to a new object of&#xA;the same class (see UnboundMethod)." ilk="function" name="unbind" signature="meth.unbind    =&gt; unbound_method" />
      </scope>
      <scope classrefs="Object" doc="A Module is a collection of methods and constants. The&#xA;methods in a module may be instance methods or module&#xA;methods." ilk="class" name="Module">
        <scope attributes="__classmethod__" doc="Returns an array of the names of all constants defined in&#xA;the system. This list includes the names of all modules and&#xA;classes." ilk="function" name="constants" signature="Module.constants   =&gt; array" />
        <scope attributes="__classmethod__" doc="Returns the list of Modules nested at the point of call." ilk="function" name="nesting" signature="Module.nesting    =&gt; array" />
        <scope attributes="__classmethod__ __ctor__" doc="Creates a new anonymous module. If a block is given, it is&#xA;passed the module object, and the block is evaluated in the&#xA;context of this module using module_eval." ilk="function" name="new" signature="Module.new                  =&gt; mod&#xA;Module.new {|mod| block }   =&gt; mod" />
        <scope doc="Returns true if `mod&apos; is a subclass of `other&apos;. Returns nil&#xA;if there&apos;s no relationship between the two." ilk="function" name="&lt;" signature="mod &lt; other   =&gt;  true, false, or nil" />
        <scope doc="Returns true if `mod&apos; is a subclass of `other&apos; or is the&#xA;same as `other&apos;. Returns nil if there&apos;s no relationship&#xA;between the two." ilk="function" name="&lt;=" signature="mod &lt;= other   =&gt;  true, false, or nil" />
        <scope doc="Comparison---Returns -1 if `mod&apos; includes `other_mod&apos;, 0 if&#xA;`mod&apos; is the same as `other_mod&apos;, and +1 if `mod&apos; is&#xA;included by `other_mod&apos; or if `mod&apos; has no relationship with&#xA;`other_mod&apos;. Returns nil if `other_mod&apos; is not a module." ilk="function" name="&lt;=&gt;" signature="mod &lt;=&gt; other_mod   =&gt; -1, 0, +1, or nil" />
        <scope doc="Equality---At the Object level, == returns true only if&#xA;`obj&apos; and `other&apos; are the same object. Typically, this&#xA;method is overridden in descendent classes to provide class-&#xA;specific meaning." ilk="function" name="==" signature="obj == other        =&gt; true or false&#xA;obj.equal?(other)   =&gt; true or false&#xA;obj.eql?(other)     =&gt; true or false" />
        <scope doc="Case Equality---Returns true if `anObject&apos; is an instance of&#xA;`mod&apos; or one of `mod&apos;&apos;s descendents. Of limited use for&#xA;modules, but can be used in case statements to classify&#xA;objects by class." ilk="function" name="===" signature="mod === obj    =&gt; true or false" />
        <scope doc="Returns true if `mod&apos; is an ancestor of `other&apos;. Returns nil&#xA;if there&apos;s no relationship between the two." ilk="function" name="&gt;" signature="mod &gt; other   =&gt;  true, false, or nil" />
        <scope doc="Returns true if `mod&apos; is an ancestor of `other&apos;, or the two&#xA;modules are the same. Returns nil if there&apos;s no relationship&#xA;between the two." ilk="function" name="&gt;=" signature="mod &gt;= other   =&gt;  true, false, or nil" />
        <scope doc="Makes `new_name&apos; a new copy of the method `old_name&apos;. This&#xA;can be used to retain access to methods that are overridden." ilk="function" name="alias_method" signature="alias_method(new_name, old_name)   =&gt; self" />
        <scope doc="Returns a list of modules included in `mod&apos; (including `mod&apos;&#xA;itself)." ilk="function" name="ancestors" signature="mod.ancestors -&gt; array" />
        <scope doc="When this module is included in another, Ruby calls&#xA;append_features in this module, passing it the receiving&#xA;module in `mod&apos;. Ruby&apos;s default implementation is to add the&#xA;constants, methods, and module variables of this module to&#xA;`mod&apos; if this module has not already been added to `mod&apos; or&#xA;one of its ancestors." ilk="function" name="append_features" signature="append_features(mod)   =&gt; mod" />
        <scope doc="Defines a named attribute for this module, where the name is&#xA;`symbol.&apos;id2name, creating an instance variable (@name) and&#xA;a corresponding access method to read it. If the optional&#xA;`writable&apos; argument is true, also creates a method called&#xA;name= to set the attribute." ilk="function" name="attr" signature="attr(symbol, writable=false)    =&gt; nil" />
        <scope doc="Equivalent to calling ``attr`symbol&apos;, true&apos;&apos; on each&#xA;`symbol&apos; in turn." ilk="function" name="attr_accessor" signature="attr_accessor(symbol, ...)    =&gt; nil" />
        <scope doc="Creates instance variables and corresponding methods that&#xA;return the value of each instance variable. Equivalent to&#xA;calling ``attr`:name&apos;&apos;&apos; on each name in turn." ilk="function" name="attr_reader" signature="attr_reader(symbol, ...)    =&gt; nil" />
        <scope doc="Creates an accessor method to allow assignment to the&#xA;attribute `aSymbol&apos;.id2name." ilk="function" name="attr_writer" signature="attr_writer(symbol, ...)    =&gt; nil" />
        <scope doc="Registers `filename&apos; to be loaded (using Kernel::require)&#xA;the first time that `name&apos; (which may be a String or a&#xA;symbol) is accessed in the namespace of `mod&apos;." ilk="function" name="autoload" signature="mod.autoload(name, filename)   =&gt; nil" />
        <scope doc="Returns `filename&apos; to be loaded if `name&apos; is registered as&#xA;autoload in the namespace of `mod&apos;." ilk="function" name="autoload?" signature="mod.autoload?(name)   =&gt; String or nil" />
        <scope doc="Evaluates the string or block in the context of `mod&apos;. This&#xA;can be used to add methods to a class." ilk="function" name="class_eval" signature="mod.class_eval(string [, filename [, lineno]])  =&gt; obj&#xA;mod.module_eval {|| block }                     =&gt; obj" />
        <scope doc="Returns the value of the given class variable (or throws a&#xA;NameError exception)." ilk="function" name="class_variable_get" signature="mod.class_variable_get(symbol)    =&gt; obj" />
        <scope doc="Sets the class variable names by `symbol&apos; to `object&apos;." ilk="function" name="class_variable_set" signature="obj.class_variable_set(symbol, obj)    =&gt; obj" />
        <scope doc="Returns an array of the names of class variables in `mod&apos;&#xA;and the ancestors of `mod&apos;." ilk="function" name="class_variables" signature="mod.class_variables   =&gt; array" />
        <scope doc="Returns true if a constant with the given name is defined by&#xA;`mod&apos;." ilk="function" name="const_defined?" signature="mod.const_defined?(sym)   =&gt; true or false" />
        <scope doc="Returns the value of the named constant in `mod&apos;." ilk="function" name="const_get" signature="mod.const_get(sym)    =&gt; obj" />
        <scope doc="Invoked when a reference is made to an undefined constant in&#xA;`mod&apos;. It is passed a symbol for the undefined constant, and&#xA;returns a value to be used for that constant." ilk="function" name="const_missing" signature="mod.const_missing(sym)    =&gt; obj" />
        <scope doc="Sets the named constant to the given object, returning that&#xA;object. Creates a new constant if no constant with the given&#xA;name previously existed." ilk="function" name="const_set" signature="mod.const_set(sym, obj)    =&gt; obj" />
        <scope doc="Returns an array of the names of the constants accessible in&#xA;`mod&apos;. This includes the names of constants in any included&#xA;modules (example at start of section)." ilk="function" name="constants" signature="mod.constants    =&gt; array" />
        <scope doc="Defines an instance method in the receiver. The `method&apos;&#xA;parameter can be a Proc or Method object." ilk="function" name="define_method" signature="define_method(symbol, method)     =&gt; new_method&#xA;define_method(symbol) { block }   =&gt; proc" />
        <scope doc="Extends the specified object by adding this module&apos;s&#xA;constants and methods (which are added as singleton&#xA;methods). This is the callback method used by Object#extend." ilk="function" name="extend_object" signature="extend_object(obj)    =&gt; obj" />
        <scope doc="Not documented" ilk="function" name="extended" signature="(p1)" />
        <scope doc="Prevents further modifications to `mod&apos;." ilk="function" name="freeze" signature="mod.freeze" />
        <scope doc="Invokes Module.append_features on each parameter in turn." ilk="function" name="include" signature="include(module, ...)    =&gt; self" />
        <scope doc="Returns true if `module&apos; is included in `mod&apos; or one of&#xA;`mod&apos;&apos;s ancestors." ilk="function" name="include?" signature="mod.include?(module)    =&gt; true or false" />
        <scope doc="Callback invoked whenever the receiver is included in&#xA;another module or class. This should be used in preference&#xA;to Module.append_features if your code wants to perform some&#xA;action when a module is included in another." ilk="function" name="included" signature="included( othermod )" />
        <scope doc="Returns the list of modules included in `mod&apos;." ilk="function" name="included_modules" signature="mod.included_modules -&gt; array" />
        <scope doc="Returns an UnboundMethod representing the given instance&#xA;method in `mod&apos;." ilk="function" name="instance_method" signature="mod.instance_method(symbol)   =&gt; unbound_method" />
        <scope doc="Returns an array containing the names of public instance&#xA;methods in the receiver. For a module, these are the public&#xA;methods; for a class, they are the instance (not singleton)&#xA;methods." ilk="function" name="instance_methods" signature="mod.instance_methods(include_super=true)   =&gt; array" />
        <scope doc="Not documented" ilk="function" name="method_added" signature="(p1)" />
        <scope doc="Returns true if the named method is defined by `mod&apos; (or its&#xA;included modules and, if `mod&apos; is a class, its ancestors).&#xA;Public and protected methods are matched." ilk="function" name="method_defined?" signature="mod.method_defined?(symbol)    =&gt; true or false" />
        <scope doc="Not documented" ilk="function" name="method_removed" signature="(p1)" />
        <scope doc="Not documented" ilk="function" name="method_undefined" signature="(p1)" />
        <scope doc="Evaluates the string or block in the context of `mod&apos;. This&#xA;can be used to add methods to a class." ilk="function" name="module_eval" signature="mod.class_eval(string [, filename [, lineno]])  =&gt; obj&#xA;mod.module_eval {|| block }                     =&gt; obj" />
        <scope doc="Creates module functions for the named methods. These&#xA;functions may be called with the module as a receiver, and&#xA;also become available as instance methods to classes that&#xA;mix in the module." ilk="function" name="module_function" signature="module_function(symbol, ...)    =&gt; self" />
        <scope doc="Returns the name of the module `mod&apos;." ilk="function" name="name" signature="mod.name    =&gt; string" />
        <scope doc="With no arguments, sets the default visibility for&#xA;subsequently defined methods to private. With arguments,&#xA;sets the named methods to have private visibility." ilk="function" name="private" signature="private                 =&gt; self&#xA;private(symbol, ...)    =&gt; self" />
        <scope doc="Makes existing class methods private. Often used to hide the&#xA;default constructor new." ilk="function" name="private_class_method" signature="mod.private_class_method(symbol, ...)   =&gt; mod" />
        <scope doc="Returns a list of the private instance methods defined in&#xA;`mod&apos;. If the optional parameter is not false, the methods&#xA;of any ancestors are included." ilk="function" name="private_instance_methods" signature="mod.private_instance_methods(include_super=true)    =&gt; array" />
        <scope doc="Returns true if the named private method is defined by _&#xA;mod_ (or its included modules and, if `mod&apos; is a class, its&#xA;ancestors)." ilk="function" name="private_method_defined?" signature="mod.private_method_defined?(symbol)    =&gt; true or false" />
        <scope doc="With no arguments, sets the default visibility for&#xA;subsequently defined methods to protected. With arguments,&#xA;sets the named methods to have protected visibility." ilk="function" name="protected" signature="protected                =&gt; self&#xA;protected(symbol, ...)   =&gt; self" />
        <scope doc="Returns a list of the protected instance methods defined in&#xA;`mod&apos;. If the optional parameter is not false, the methods&#xA;of any ancestors are included." ilk="function" name="protected_instance_methods" signature="mod.protected_instance_methods(include_super=true)   =&gt; array" />
        <scope doc="Returns true if the named protected method is defined by&#xA;`mod&apos; (or its included modules and, if `mod&apos; is a class, its&#xA;ancestors)." ilk="function" name="protected_method_defined?" signature="mod.protected_method_defined?(symbol)   =&gt; true or false" />
        <scope doc="With no arguments, sets the default visibility for&#xA;subsequently defined methods to public. With arguments, sets&#xA;the named methods to have public visibility." ilk="function" name="public" signature="public                 =&gt; self&#xA;public(symbol, ...)    =&gt; self" />
        <scope doc="Makes a list of existing class methods public." ilk="function" name="public_class_method" signature="mod.public_class_method(symbol, ...)    =&gt; mod" />
        <scope doc="Returns a list of the public instance methods defined in&#xA;`mod&apos;. If the optional parameter is not false, the methods&#xA;of any ancestors are included." ilk="function" name="public_instance_methods" signature="mod.public_instance_methods(include_super=true)   =&gt; array" />
        <scope doc="Returns true if the named public method is defined by `mod&apos;&#xA;(or its included modules and, if `mod&apos; is a class, its&#xA;ancestors)." ilk="function" name="public_method_defined?" signature="mod.public_method_defined?(symbol)   =&gt; true or false" />
        <scope doc="Removes the definition of the `sym&apos;, returning that&#xA;constant&apos;s value." ilk="function" name="remove_class_variable" signature="remove_class_variable(sym)    =&gt; obj" />
        <scope doc="Removes the definition of the given constant, returning that&#xA;constant&apos;s value. Predefined classes and singleton objects&#xA;(such as `true&apos;) cannot be removed." ilk="function" name="remove_const" signature="remove_const(sym)   =&gt; obj" />
        <scope doc="Removes the method identified by `symbol&apos; from the current&#xA;class. For an example, see Module.undef_method." ilk="function" name="remove_method" signature="remove_method(symbol)   =&gt; self" />
        <scope doc="Return a string representing this module or class. For basic&#xA;classes and modules, this is the name." ilk="function" name="to_s" signature="mod.to_s   =&gt; string" />
        <scope doc="Prevents the current class from responding to calls to the&#xA;named method. Contrast this with remove_method, which&#xA;deletes the method from the particular class; Ruby will&#xA;still search superclasses and mixed-in modules for a&#xA;possible receiver." ilk="function" name="undef_method" signature="undef_method(symbol)    =&gt; self" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="NameError">
        <scope attributes="__classmethod__ __ctor__" doc="Construct a new NameError exception. If given the `name&apos;&#xA;parameter may subsequently be examined using the&#xA;NameError.name method." ilk="function" name="new" signature="NameError.new(msg [, name])  =&gt; name_error" />
        <scope doc="Return the name associated with this NameError exception." ilk="function" name="name" signature="name_error.name    =&gt;  string or nil" />
        <scope doc="Produce a nicely-formated string representing the NameError." ilk="function" name="to_s" signature="name_error.to_s   =&gt; string" />
      </scope>
      <scope classrefs="Object" doc="The class of the singleton object nil." ilk="class" name="NilClass">
        <scope doc="And---Returns false. `obj&apos; is always evaluated as it is the&#xA;argument to a method call---there is no short-circuit&#xA;evaluation in this case." ilk="function" name="&amp;" signature="false &amp; obj   =&gt; false&#xA;nil &amp; obj     =&gt; false" />
        <scope doc="Exclusive Or---If `obj&apos; is nil or false, returns false;&#xA;otherwise, returns true." ilk="function" name="^" signature="false ^ obj    =&gt; true or false&#xA;nil   ^ obj    =&gt; true or false" />
        <scope doc="Always returns the string &quot;nil&quot;." ilk="function" name="inspect" signature="nil.inspect  =&gt; &quot;nil&quot;" />
        <scope doc="call_seq:" ilk="function" name="nil?" signature="()" />
        <scope doc="Always returns an empty array." ilk="function" name="to_a" signature="nil.to_a    =&gt; []" />
        <scope doc="Always returns zero." ilk="function" name="to_f" signature="nil.to_f    =&gt; 0.0" />
        <scope doc="Always returns zero." ilk="function" name="to_i" signature="nil.to_i =&gt; 0" />
        <scope doc="Always returns the empty string." ilk="function" name="to_s" signature="nil.to_s    =&gt; &quot;&quot;" />
        <scope doc="Or---Returns false if `obj&apos; is nil or false; true otherwise." ilk="function" name="|" signature="false | obj   =&gt;   true or false&#xA;nil   | obj   =&gt;   true or false" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="NoMemoryError" />
      <scope classrefs="NameError" ilk="class" name="NoMethodError">
        <scope attributes="__classmethod__ __ctor__" doc="Construct a NoMethodError exception for a method of the&#xA;given name called with the given arguments. The name may be&#xA;accessed using the #name method on the resulting object, and&#xA;the arguments using the #args method." ilk="function" name="new" signature="NoMethodError.new(msg, name [, args])  =&gt; no_method_error" />
        <scope doc="Return the arguments passed in as the third parameter to the&#xA;constructor." ilk="function" name="args" signature="no_method_error.args  =&gt; obj" />
      </scope>
      <scope classrefs="ScriptError" ilk="class" name="NotImplementedError" />
      <scope classrefs="Object" doc="Numeric is a built-in class on which Fixnum, Bignum, etc.,&#xA;are based. Here some methods are added so that all number&#xA;types can be treated to some extent as Complex numbers." ilk="class" name="Numeric">
        <import symbol="Comparable" />
        <scope doc="Unary Plus---Returns the receiver&apos;s value." ilk="function" name="+@" signature="+num    =&gt; num" />
        <scope doc="Returns zero if `num&apos; equals `other&apos;, nil otherwise." ilk="function" name="&lt;=&gt;" signature="num &lt;=&gt; other -&gt; 0 or nil" />
        <scope doc="Returns the absolute value of `num&apos;." ilk="function" name="abs" signature="num.abs   =&gt; num or numeric" />
        <scope doc="Alias for #arg" ilk="function" name="angle" signature="()" />
        <scope doc="See Complex#arg." ilk="function" name="arg" signature="()" />
        <scope doc="Returns the smallest Integer greater than or equal to `num&apos;.&#xA;Class Numeric achieves this by converting itself to a Float&#xA;then invoking Float#ceil." ilk="function" name="ceil" signature="num.ceil    =&gt; integer" />
        <scope doc="If `aNumeric&apos; is the same type as `num&apos;, returns an array&#xA;containing `aNumeric&apos; and `num&apos;. Otherwise, returns an array&#xA;with both `aNumeric&apos; and `num&apos; represented as Float objects." ilk="function" name="coerce" signature="num.coerce(numeric)   =&gt; array" />
        <scope doc="Alias for #conjugate" ilk="function" name="conj" signature="()" />
        <scope doc="See Complex#conjugate (short answer: returns `self&apos;)." ilk="function" name="conjugate" signature="()" />
        <scope doc="Uses / to perform division, then converts the result to an&#xA;integer. Numeric does not define the / operator; this is&#xA;left to subclasses." ilk="function" name="div" signature="num.div(numeric)    =&gt; integer" />
        <scope doc="Returns an array containing the quotient and modulus&#xA;obtained by dividing `num&apos; by `aNumeric&apos;." ilk="function" name="divmod" signature="num.divmod( aNumeric ) -&gt; anArray" />
        <scope doc="Returns true if `num&apos; and `numeric&apos; are the same type and&#xA;have equal values." ilk="function" name="eql?" signature="num.eql?(numeric)    =&gt; true or false" />
        <scope doc="Returns the largest integer less than or equal to `num&apos;.&#xA;Numeric implements this by converting `anInteger&apos; to a Float&#xA;and invoking Float#floor." ilk="function" name="floor" signature="num.floor    =&gt; integer" />
        <scope doc="Returns a Complex number (0,`self&apos;)." ilk="function" name="im" signature="()" />
        <scope doc="Alias for #image" ilk="function" name="imag" signature="()" />
        <scope doc="The imaginary part of a complex number, i.e. 0." ilk="function" name="image" signature="()" />
        <scope doc="Returns true if `num&apos; is an Integer (including Fixnum and&#xA;Bignum)." ilk="function" name="integer?" signature="num.integer? -&gt; true or false" />
        <scope doc="Equivalent to `num&apos;.divmod(`aNumeric&apos;)[1]." ilk="function" name="modulo" signature="num.modulo(numeric)    =&gt; result" />
        <scope doc="Returns `num&apos; if `num&apos; is not zero, nil otherwise." ilk="function" name="nonzero?" signature="num.nonzero?    =&gt; num or nil" />
        <scope doc="See Complex#polar." ilk="function" name="polar" signature="()" />
        <scope doc="Equivalent to Numeric#/, but overridden in subclasses." ilk="function" name="quo" signature="num.quo(numeric)    =&gt;   result" />
        <scope doc="The real part of a complex number, i.e. `self&apos;." ilk="function" name="real" signature="()" />
        <scope doc="If `num&apos; and `numeric&apos; have different signs, returns&#xA;`mod&apos;-`numeric&apos;; otherwise, returns `mod&apos;. In both cases&#xA;`mod&apos; is the value `num&apos;.modulo(`numeric&apos;)." ilk="function" name="remainder" signature="num.remainder(numeric)    =&gt; result" />
        <scope doc="Rounds `num&apos; to the nearest integer. Numeric implements this&#xA;by converting itself to a Float and invoking Float#round." ilk="function" name="round" signature="num.round    =&gt; integer" />
        <scope doc="Trap attempts to add methods to Numeric objects." ilk="function" name="singleton_method_added" signature="(p1)" />
        <scope doc="Invokes `block&apos; with the sequence of numbers starting at&#xA;`num&apos;, incremented by `step&apos; on each call. The loop finishes&#xA;when the value to be passed to the block is greater than&#xA;`limit&apos; (if `step&apos; is positive) or less than `limit&apos; (if&#xA;`step&apos; is negative)." ilk="function" name="step" signature="num.step(limit, step ) {|i| block }     =&gt; num" />
        <scope doc="Invokes the child class&apos;s to_i method to convert `num&apos; to an&#xA;integer." ilk="function" name="to_int" signature="num.to_int    =&gt; integer" />
        <scope doc="Returns `num&apos; truncated to an integer. Numeric implements&#xA;this by converting its value to a float and invoking&#xA;Float#truncate." ilk="function" name="truncate" signature="num.truncate    =&gt; integer" />
        <scope doc="Returns true if `num&apos; has a zero value." ilk="function" name="zero?" signature="num.zero?    =&gt; true or false" />
      </scope>
      <scope doc="Object is the parent class of all classes in Ruby. Its&#xA;methods are therefore available to all objects unless&#xA;explicitly overridden." ilk="class" name="Object">
        <scope attributes="__classmethod__ __ctor__" doc="Not documented" ilk="function" name="new" signature="()" />
        <scope doc="Equality---At the Object level, == returns true only if&#xA;`obj&apos; and `other&apos; are the same object. Typically, this&#xA;method is overridden in descendent classes to provide class-&#xA;specific meaning." ilk="function" name="==" signature="obj == other        =&gt; true or false&#xA;obj.equal?(other)   =&gt; true or false&#xA;obj.eql?(other)     =&gt; true or false" />
        <scope doc="Case Equality---For class Object, effectively the same as&#xA;calling #==, but typically overridden by descendents to&#xA;provide meaningful semantics in case statements." ilk="function" name="===" signature="obj === other   =&gt; true or false" />
        <scope doc="Pattern Match---Overridden by descendents (notably Regexp&#xA;and String) to provide meaningful pattern-match semantics." ilk="function" name="=~" signature="obj =~ other  =&gt; false" />
        <scope doc="Document-method: object_id" ilk="function" name="__id__" signature="obj.__id__       =&gt; fixnum&#xA;obj.object_id    =&gt; fixnum" />
        <scope doc="Invokes the method identified by `symbol&apos;, passing it any&#xA;arguments specified. You can use __send__ if the name send&#xA;clashes with an existing method in `obj&apos;." ilk="function" name="__send__" signature="obj.send(symbol [, args...])        =&gt; obj&#xA;obj.__send__(symbol [, args...])    =&gt; obj" />
        <scope doc="Returns the class of `obj&apos;, now preferred over Object#type,&#xA;as an object&apos;s type in Ruby is only loosely tied to that&#xA;object&apos;s class. This method must always be called with an&#xA;explicit receiver, as class is also a reserved word in Ruby." ilk="function" name="class" signature="obj.class    =&gt; class" />
        <scope doc="Produces a shallow copy of `obj&apos;---the instance variables of&#xA;`obj&apos; are copied, but not the objects they reference. Copies&#xA;the frozen and tainted state of `obj&apos;." ilk="function" name="clone" signature="obj.clone -&gt; an_object" />
        <scope doc="Prints `obj&apos; on the given port (default $&gt;)." ilk="function" name="display" signature="obj.display(port=$&gt;)    =&gt; nil" />
        <scope doc="Produces a shallow copy of `obj&apos;---the instance variables of&#xA;`obj&apos; are copied, but not the objects they reference. dup&#xA;copies the tainted state of `obj&apos;." ilk="function" name="dup" signature="obj.dup -&gt; an_object" />
        <scope doc="Returns Enumerable::Enumerator.new(self, method, *args)." ilk="function" name="enum_for" signature="obj.to_enum(method = :each, *args)&#xA;obj.enum_for(method = :each, *args)" />
        <scope doc="Equality---At the Object level, == returns true only if&#xA;`obj&apos; and `other&apos; are the same object. Typically, this&#xA;method is overridden in descendent classes to provide class-&#xA;specific meaning." ilk="function" name="eql?" signature="obj == other        =&gt; true or false&#xA;obj.equal?(other)   =&gt; true or false&#xA;obj.eql?(other)     =&gt; true or false" />
        <scope doc="Equality---At the Object level, == returns true only if&#xA;`obj&apos; and `other&apos; are the same object. Typically, this&#xA;method is overridden in descendent classes to provide class-&#xA;specific meaning." ilk="function" name="equal?" signature="obj == other        =&gt; true or false&#xA;obj.equal?(other)   =&gt; true or false&#xA;obj.eql?(other)     =&gt; true or false" />
        <scope doc="Adds to `obj&apos; the instance methods from each module given as&#xA;a parameter." ilk="function" name="extend" signature="obj.extend(module, ...)    =&gt; obj" />
        <scope doc="Prevents further modifications to `obj&apos;. A TypeError will be&#xA;raised if modification is attempted." ilk="function" name="freeze" signature="obj.freeze    =&gt; obj" />
        <scope doc="Returns the freeze status of `obj&apos;." ilk="function" name="frozen?" signature="obj.frozen?    =&gt; true or false" />
        <scope doc="Generates a Fixnum hash value for this object. This function&#xA;must have the property that a.eql?(b) implies a.hash ==&#xA;b.hash." ilk="function" name="hash" signature="obj.hash    =&gt; fixnum" />
        <scope doc="Soon-to-be deprecated version of Object#object_id." ilk="function" name="id" signature="obj.id    =&gt; fixnum" />
        <scope doc="Returns a string containing a human-readable representation&#xA;of `obj&apos;. If not overridden, uses the to_s method to&#xA;generate the string." ilk="function" name="inspect" signature="obj.inspect   =&gt; string" />
        <scope doc="Evaluates a string containing Ruby source code, or the given&#xA;block, within the context of the receiver (`obj&apos;). In order&#xA;to set the context, the variable self is set to `obj&apos; while&#xA;the code is executing, giving the code access to `obj&apos;&apos;s&#xA;instance variables." ilk="function" name="instance_eval" signature="obj.instance_eval(string [, filename [, lineno]] )   =&gt; obj&#xA;obj.instance_eval {| | block }                       =&gt; obj" />
        <scope doc="Returns true if `obj&apos; is an instance of the given class. See&#xA;also Object#kind_of?." ilk="function" name="instance_of?" signature="obj.instance_of?(class)    =&gt; true or false" />
        <scope doc="Returns the value of the given instance variable (or throws&#xA;a NameError exception)." ilk="function" name="instance_variable_get" signature="obj.instance_variable_get(symbol)    =&gt; obj" />
        <scope doc="Sets the instance variable names by `symbol&apos; to `object&apos;,&#xA;thereby frustrating the efforts of the class&apos;s author to&#xA;attempt to provide proper encapsulation. The variable did&#xA;not have to exist prior to this call." ilk="function" name="instance_variable_set" signature="obj.instance_variable_set(symbol, obj)    =&gt; obj" />
        <scope doc="Returns an array of instance variable names for the&#xA;receiver. Note that simply defining an accessor does not&#xA;create the corresponding instance variable." ilk="function" name="instance_variables" signature="obj.instance_variables    =&gt; array" />
        <scope doc="Returns true if `class&apos; is the class of `obj&apos;, or if `class&apos;&#xA;is one of the superclasses of `obj&apos; or modules included in&#xA;`obj&apos;." ilk="function" name="is_a?" signature="obj.is_a?(class)       =&gt; true or false&#xA;obj.kind_of?(class)    =&gt; true or false" />
        <scope doc="Returns true if `class&apos; is the class of `obj&apos;, or if `class&apos;&#xA;is one of the superclasses of `obj&apos; or modules included in&#xA;`obj&apos;." ilk="function" name="kind_of?" signature="obj.is_a?(class)       =&gt; true or false&#xA;obj.kind_of?(class)    =&gt; true or false" />
        <scope doc="Looks up the named method as a receiver in `obj&apos;, returning&#xA;a Method object (or raising NameError). The Method object&#xA;acts as a closure in `obj&apos;&apos;s object instance, so instance&#xA;variables and the value of self remain available." ilk="function" name="method" signature="obj.method(sym)    =&gt; method" />
        <scope doc="Returns a list of the names of methods publicly accessible&#xA;in `obj&apos;. This will include all the methods accessible in&#xA;`obj&apos;&apos;s ancestors." ilk="function" name="methods" signature="obj.methods    =&gt; array" />
        <scope doc="call_seq:" ilk="function" name="nil?" signature="()" />
        <scope doc="Returns an integer identifier for `obj&apos;. The same number&#xA;will be returned on all calls to id for a given object, and&#xA;no two active objects will share an id." ilk="function" name="object_id" signature="obj.__id__       =&gt; fixnum&#xA;obj.object_id    =&gt; fixnum" />
        <scope doc="Returns the list of private methods accessible to `obj&apos;. If&#xA;the `all&apos; parameter is set to false, only those methods in&#xA;the receiver will be listed." ilk="function" name="private_methods" signature="obj.private_methods(all=true)   =&gt; array" />
        <scope doc="Returns the list of protected methods accessible to `obj&apos;.&#xA;If the `all&apos; parameter is set to false, only those methods&#xA;in the receiver will be listed." ilk="function" name="protected_methods" signature="obj.protected_methods(all=true)   =&gt; array" />
        <scope doc="Returns the list of public methods accessible to `obj&apos;. If&#xA;the `all&apos; parameter is set to false, only those methods in&#xA;the receiver will be listed." ilk="function" name="public_methods" signature="obj.public_methods(all=true)   =&gt; array" />
        <scope doc="Removes the named instance variable from `obj&apos;, returning&#xA;that variable&apos;s value." ilk="function" name="remove_instance_variable" signature="obj.remove_instance_variable(symbol)    =&gt; obj" />
        <scope doc="Returns true&gt; if `obj&apos; responds to the given method. Private&#xA;methods are included in the search only if the optional&#xA;second parameter evaluates to true." ilk="function" name="respond_to?" signature="obj.respond_to?(symbol, include_private=false) =&gt; true or false" />
        <scope doc="Invokes the method identified by `symbol&apos;, passing it any&#xA;arguments specified. You can use __send__ if the name send&#xA;clashes with an existing method in `obj&apos;." ilk="function" name="send" signature="obj.send(symbol [, args...])        =&gt; obj&#xA;obj.__send__(symbol [, args...])    =&gt; obj" />
        <scope doc="Invoked as a callback whenever a singleton method is added&#xA;to the receiver." ilk="function" name="singleton_method_added" signature="singleton_method_added(symbol)" />
        <scope doc="Invoked as a callback whenever a singleton method is removed&#xA;from the receiver." ilk="function" name="singleton_method_removed" signature="singleton_method_removed(symbol)" />
        <scope doc="Invoked as a callback whenever a singleton method is&#xA;undefined in the receiver." ilk="function" name="singleton_method_undefined" signature="singleton_method_undefined(symbol)" />
        <scope doc="Returns an array of the names of singleton methods for&#xA;`obj&apos;. If the optional `all&apos; parameter is true, the list&#xA;will include methods in modules included in `obj&apos;." ilk="function" name="singleton_methods" signature="obj.singleton_methods(all=true)    =&gt; array" />
        <scope doc="Marks `obj&apos; as tainted---if the $SAFE level is set&#xA;appropriately, many method calls which might alter the&#xA;running programs environment will refuse to accept tainted&#xA;strings." ilk="function" name="taint" signature="obj.taint -&gt; obj" />
        <scope doc="Returns true if the object is tainted." ilk="function" name="tainted?" signature="obj.tainted?    =&gt; true or false" />
        <scope doc="Returns an array representation of `obj&apos;. For objects of&#xA;class Object and others that don&apos;t explicitly override the&#xA;method, the return value is an array containing self." ilk="function" name="to_a" signature="obj.to_a -&gt; anArray" />
        <scope doc="Returns Enumerable::Enumerator.new(self, method, *args)." ilk="function" name="to_enum" signature="obj.to_enum(method = :each, *args)&#xA;obj.enum_for(method = :each, *args)" />
        <scope doc="Returns a string representing `obj&apos;. The default to_s prints&#xA;the object&apos;s class and an encoding of the object id." ilk="function" name="to_s" signature="obj.to_s    =&gt; string" />
        <scope doc="Deprecated synonym for Object#class." ilk="function" name="type" signature="obj.type   =&gt; class" />
        <scope doc="Removes the taint from `obj&apos;." ilk="function" name="untaint" signature="obj.untaint    =&gt; obj" />
      </scope>
      <scope classrefs="Object" doc="Proc objects are blocks of code that have been bound to a&#xA;set of local variables. Once bound, the code may be called&#xA;in different contexts and still access those variables." ilk="class" name="Proc">
        <scope attributes="__classmethod__ __ctor__" doc="Creates a new Proc object, bound to the current context.&#xA;Proc::new may be called without a block only within a method&#xA;with an attached block, in which case that block is&#xA;converted to the Proc object." ilk="function" name="new" signature="Proc.new {|...| block } =&gt; a_proc &#xA;Proc.new                =&gt; a_proc " />
        <scope doc="Return true if `prc&apos; is the same object as `other_proc&apos;, or&#xA;if they are both procs with the same body." ilk="function" name="==" signature="prc == other_proc   =&gt;  true or false" />
        <scope doc="Invokes the block, setting the block&apos;s parameters to the&#xA;values in `params&apos; using something close to method calling&#xA;semantics. Generates a warning if multiple values are passed&#xA;to a proc that expects just one (previously this silently&#xA;converted the parameters to an array)." ilk="function" name="[]" signature="prc.call(params,...)   =&gt; obj&#xA;prc[params,...]        =&gt; obj" />
        <scope doc="Returns the number of arguments that would not be ignored.&#xA;If the block is declared to take no arguments, returns 0." ilk="function" name="arity" signature="prc.arity -&gt; fixnum" />
        <scope doc="Returns the binding associated with `prc&apos;. Note that&#xA;Kernel#eval accepts either a Proc or a Binding object as its&#xA;second parameter." ilk="function" name="binding" signature="prc.binding    =&gt; binding" />
        <scope doc="Invokes the block, setting the block&apos;s parameters to the&#xA;values in `params&apos; using something close to method calling&#xA;semantics. Generates a warning if multiple values are passed&#xA;to a proc that expects just one (previously this silently&#xA;converted the parameters to an array)." ilk="function" name="call" signature="prc.call(params,...)   =&gt; obj&#xA;prc[params,...]        =&gt; obj" />
        <scope doc="MISSING: documentation" ilk="function" name="clone" signature="()" />
        <scope doc="MISSING: documentation" ilk="function" name="dup" signature="()" />
        <scope doc="Part of the protocol for converting objects to Proc objects.&#xA;Instances of class Proc simply return themselves." ilk="function" name="to_proc" signature="prc.to_proc -&gt; prc" />
        <scope doc="Shows the unique identifier for this proc, along with an&#xA;indication of where the proc was defined." ilk="function" name="to_s" signature="prc.to_s   =&gt; string" />
      </scope>
      <scope classrefs="Object" doc="A Range represents an interval---a set of values with a&#xA;start and an end. Ranges may be constructed using the&#xA;`s&apos;..`e&apos; and `s&apos;...`e&apos; literals, or with Range::new." ilk="class" name="Range">
        <import symbol="Enumerable" />
        <scope attributes="__classmethod__ __ctor__" doc="Constructs a range using the given `start&apos; and `end&apos;. If the&#xA;third parameter is omitted or is false, the `range&apos; will&#xA;include the end object; otherwise, it will be excluded." ilk="function" name="new" signature="Range.new(start, end, exclusive=false)    =&gt; range" />
        <scope doc="Returns true only if `obj&apos; is a Range, has equivalent&#xA;beginning and end items (by comparing them with ==), and has&#xA;the same #exclude_end? setting as &lt;i&gt;rng&lt;/t&gt;." ilk="function" name="==" signature="rng == obj    =&gt; true or false" />
        <scope doc="Returns true if `obj&apos; is an element of `rng&apos;, false&#xA;otherwise. Conveniently, === is the comparison operator used&#xA;by case statements." ilk="function" name="===" signature="rng === obj       =&gt;  true or false&#xA;rng.member?(val)  =&gt;  true or false&#xA;rng.include?(val) =&gt;  true or false" />
        <scope doc="Returns the first object in `rng&apos;." ilk="function" name="begin" signature="rng.first    =&gt; obj&#xA;rng.begin    =&gt; obj" />
        <scope doc="Iterates over the elements `rng&apos;, passing each in turn to&#xA;the block. You can only iterate if the start object of the&#xA;range supports the succ method (which means that you can&apos;t&#xA;iterate over ranges of Float objects)." ilk="function" name="each" signature="rng.each {| i | block } =&gt; rng" />
        <scope doc="Returns the object that defines the end of `rng&apos;." ilk="function" name="end" signature="rng.end    =&gt; obj&#xA;rng.last   =&gt; obj" />
        <scope doc="Returns true only if `obj&apos; is a Range, has equivalent&#xA;beginning and end items (by comparing them with #eql?), and&#xA;has the same #exclude_end? setting as `rng&apos;." ilk="function" name="eql?" signature="rng.eql?(obj)    =&gt; true or false" />
        <scope doc="Returns true if `rng&apos; excludes its end value." ilk="function" name="exclude_end?" signature="rng.exclude_end?    =&gt; true or false" />
        <scope doc="Returns the first object in `rng&apos;." ilk="function" name="first" signature="rng.first    =&gt; obj&#xA;rng.begin    =&gt; obj" />
        <scope doc="Generate a hash value such that two ranges with the same&#xA;start and end points, and the same value for the &quot;exclude&#xA;end&quot; flag, generate the same hash value." ilk="function" name="hash" signature="rng.hash    =&gt; fixnum" />
        <scope doc="Returns true if `obj&apos; is an element of `rng&apos;, false&#xA;otherwise. Conveniently, === is the comparison operator used&#xA;by case statements." ilk="function" name="include?" signature="rng === obj       =&gt;  true or false&#xA;rng.member?(val)  =&gt;  true or false&#xA;rng.include?(val) =&gt;  true or false" />
        <scope doc="Convert this range object to a printable form (using inspect&#xA;to convert the start and end objects)." ilk="function" name="inspect" signature="rng.inspect  =&gt; string" />
        <scope doc="Returns the object that defines the end of `rng&apos;." ilk="function" name="last" signature="rng.end    =&gt; obj&#xA;rng.last   =&gt; obj" />
        <scope doc="Returns true if `obj&apos; is an element of `rng&apos;, false&#xA;otherwise. Conveniently, === is the comparison operator used&#xA;by case statements." ilk="function" name="member?" signature="rng === obj       =&gt;  true or false&#xA;rng.member?(val)  =&gt;  true or false&#xA;rng.include?(val) =&gt;  true or false" />
        <scope doc="Iterates over `rng&apos;, passing each `n&apos;th element to the&#xA;block. If the range contains numbers or strings, natural&#xA;ordering is used." ilk="function" name="step" signature="rng.step(n=1) {| obj | block }    =&gt; rng" />
        <scope doc="Convert this range object to a printable form." ilk="function" name="to_s" signature="rng.to_s   =&gt; string" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="RangeError" />
      <scope classrefs="Object" doc="Document-class: Regexp" ilk="class" name="Regexp">
        <scope attributes="__classmethod__" doc="Synonym for Regexp.new" ilk="function" name="compile" signature="(...)" />
        <scope attributes="__classmethod__" doc="Escapes any characters that would have special meaning in a&#xA;regular expression. Returns a new escaped string, or self if&#xA;no characters are escaped." ilk="function" name="escape" signature="Regexp.escape(str)   =&gt; a_str&#xA;Regexp.quote(str)    =&gt; a_str" />
        <scope attributes="__classmethod__" doc="The first form returns the MatchData object generated by the&#xA;last successful pattern match. Equivalent to reading the&#xA;global variable $~." ilk="function" name="last_match" signature="Regexp.last_match           =&gt; matchdata&#xA;Regexp.last_match(fixnum)   =&gt; str" />
        <scope attributes="__classmethod__ __ctor__" doc="Constructs a new regular expression from `pattern&apos;, which&#xA;can be either a String or a Regexp (in which case that&#xA;regexp&apos;s options are propagated, and new options may not be&#xA;specified (a change as of Ruby 1.8). If `options&apos; is a&#xA;Fixnum, it should be one or more of the constants&#xA;Regexp::EXTENDED, Regexp::IGNORECASE, and Regexp::MULTILINE,&#xA;`or&apos;-ed together." ilk="function" name="new" signature="Regexp.new(string [, options [, lang]])       =&gt; regexp&#xA;Regexp.new(regexp)                            =&gt; regexp&#xA;Regexp.compile(string [, options [, lang]])   =&gt; regexp&#xA;Regexp.compile(regexp)                        =&gt; regexp" />
        <scope attributes="__classmethod__" doc="Escapes any characters that would have special meaning in a&#xA;regular expression. Returns a new escaped string, or self if&#xA;no characters are escaped." ilk="function" name="quote" signature="Regexp.escape(str)   =&gt; a_str&#xA;Regexp.quote(str)    =&gt; a_str" />
        <scope attributes="__classmethod__" doc="Return a Regexp object that is the union of the given&#xA;`pattern&apos;s, i.e., will match any of its parts. The&#xA;`pattern&apos;s can be Regexp objects, in which case their&#xA;options will be preserved, or Strings." ilk="function" name="union" signature="Regexp.union([pattern]*)   =&gt; new_str" />
        <scope doc="Equality---Two regexps are equal if their patterns are&#xA;identical, they have the same character set code, and their&#xA;casefold? values are the same." ilk="function" name="==" signature="rxp == other_rxp      =&gt; true or false&#xA;rxp.eql?(other_rxp)   =&gt; true or false" />
        <scope doc="Case Equality---Synonym for Regexp#=~ used in case&#xA;statements." ilk="function" name="===" signature="rxp === str   =&gt; true or false" />
        <scope doc="Returns a MatchData object describing the match, or nil if&#xA;there was no match. This is equivalent to retrieving the&#xA;value of the special variable $~ following a normal match." ilk="function" name="=~" signature="rxp.match(str)   =&gt; matchdata or nil" />
        <scope doc="Returns the value of the case-insensitive flag." ilk="function" name="casefold?" signature="rxp.casefold?   =&gt; true or false" />
        <scope doc="Equality---Two regexps are equal if their patterns are&#xA;identical, they have the same character set code, and their&#xA;casefold? values are the same." ilk="function" name="eql?" signature="rxp == other_rxp      =&gt; true or false&#xA;rxp.eql?(other_rxp)   =&gt; true or false" />
        <scope doc="Produce a hash based on the text and options of this regular&#xA;expression." ilk="function" name="hash" signature="rxp.hash   =&gt; fixnum" />
        <scope doc="Produce a nicely formatted string-version of `rxp&apos;. Perhaps&#xA;surprisingly, #inspect actually produces the more natural&#xA;version of the string than #to_s." ilk="function" name="inspect" signature="rxp.inspect   =&gt; string" />
        <scope doc="Returns the character set code for the regexp." ilk="function" name="kcode" signature="rxp.kcode   =&gt; str" />
        <scope doc="Returns a MatchData object describing the match, or nil if&#xA;there was no match. This is equivalent to retrieving the&#xA;value of the special variable $~ following a normal match." ilk="function" name="match" signature="rxp.match(str)   =&gt; matchdata or nil" />
        <scope doc="Returns the set of bits corresponding to the options used&#xA;when creating this Regexp (see Regexp::new for details. Note&#xA;that additional bits may be set in the returned options:&#xA;these are used internally by the regular expression code." ilk="function" name="options" signature="rxp.options   =&gt; fixnum" />
        <scope doc="Returns the original string of the pattern." ilk="function" name="source" signature="rxp.source   =&gt; str" />
        <scope doc="Returns a string containing the regular expression and its&#xA;options (using the (?xxx:yyy) notation. This string can be&#xA;fed back in to Regexp::new to a regular expression with the&#xA;same semantics as the original." ilk="function" name="to_s" signature="rxp.to_s   =&gt; str" />
        <scope doc="Match---Matches `rxp&apos; against the contents of $_. Equivalent&#xA;to `rxp&apos; =~ $_." ilk="function" name="~" signature="~ rxp   =&gt; integer or nil" />
        <variable attributes="__const__" citdl="Fixnum" name="EXTENDED" />
        <variable attributes="__const__" citdl="Fixnum" name="IGNORECASE" />
        <variable attributes="__const__" citdl="Fixnum" name="MULTILINE" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="RegexpError" />
      <scope classrefs="StandardError" ilk="class" name="RuntimeError" />
      <scope classrefs="Exception" ilk="class" name="ScriptError" />
      <scope classrefs="StandardError" ilk="class" name="SecurityError" />
      <scope classrefs="Exception" ilk="class" name="SignalException" />
      <scope classrefs="Exception" ilk="class" name="StandardError" />
      <scope classrefs="Object" doc="A String object holds and manipulates an arbitrary sequence&#xA;of bytes, typically representing characters. String objects&#xA;may be created using String::new or as literals." ilk="class" name="String">
        <import symbol="Comparable" />
        <import symbol="Enumerable" />
        <scope attributes="__classmethod__ __ctor__" doc="Returns a new string object containing a copy of `str&apos;." ilk="function" name="new" signature="String.new(str=&quot;&quot;)   =&gt; new_str" />
        <scope doc="Format---Uses `str&apos; as a format specification, and returns&#xA;the result of applying it to `arg&apos;. If the format&#xA;specification contains more than one substitution, then&#xA;`arg&apos; must be an Array containing the values to be&#xA;substituted." ilk="function" name="%" signature="str % arg   =&gt; new_str" />
        <scope doc="Copy---Returns a new String containing `integer&apos; copies of&#xA;the receiver." ilk="function" name="*" signature="str * integer   =&gt; new_str" />
        <scope doc="Concatenation---Returns a new String containing `other_str&apos;&#xA;concatenated to `str&apos;." ilk="function" name="+" signature="str + other_str   =&gt; new_str" />
        <scope doc="Append---Concatenates the given object to `str&apos;. If the&#xA;object is a Fixnum between 0 and 255, it is converted to a&#xA;character before concatenation." ilk="function" name="&lt;&lt;" signature="str &lt;&lt; fixnum        =&gt; str&#xA;str.concat(fixnum)   =&gt; str&#xA;str &lt;&lt; obj           =&gt; str&#xA;str.concat(obj)      =&gt; str" />
        <scope doc="Comparison---Returns -1 if `other_str&apos; is less than, 0 if&#xA;`other_str&apos; is equal to, and +1 if `other_str&apos; is greater&#xA;than `str&apos;. If the strings are of different lengths, and the&#xA;strings are equal when compared up to the shortest length,&#xA;then the longer string is considered greater than the&#xA;shorter one." ilk="function" name="&lt;=&gt;" signature="str &lt;=&gt; other_str   =&gt; -1, 0, +1" />
        <scope doc="Equality---If `obj&apos; is not a String, returns false.&#xA;Otherwise, returns true if `str&apos; &lt;=&gt; `obj&apos; returns zero." ilk="function" name="==" signature="str == obj   =&gt; true or false" />
        <scope doc="Match---If `obj&apos; is a Regexp, use it as a pattern to match&#xA;against `str&apos;. If `obj&apos; is a String, look for it in `str&apos;&#xA;(similar to String#index)." ilk="function" name="=~" signature="str =~ obj   =&gt; fixnum or nil" />
        <scope doc="Element Reference---If passed a single Fixnum, returns the&#xA;code of the character at that position. If passed two Fixnum&#xA;objects, returns a substring starting at the offset given by&#xA;the first, and a length given by the second." ilk="function" name="[]" signature="str[fixnum]                 =&gt; fixnum or nil&#xA;str[fixnum, fixnum]         =&gt; new_str or nil&#xA;str[range]                  =&gt; new_str or nil&#xA;str[regexp]                 =&gt; new_str or nil&#xA;str[regexp, fixnum]         =&gt; new_str or nil&#xA;str[other_str]              =&gt; new_str or nil&#xA;str.slice(fixnum)           =&gt; fixnum or nil&#xA;str.slice(fixnum, fixnum)   =&gt; new_str or nil&#xA;str.slice(range)            =&gt; new_str or nil&#xA;str.slice(regexp)           =&gt; new_str or nil&#xA;str.slice(regexp, fixnum)   =&gt; new_str or nil&#xA;str.slice(other_str)        =&gt; new_str or nil" />
        <scope doc="Element Assignment---Replaces some or all of the content of&#xA;`str&apos;. The portion of the string affected is determined&#xA;using the same criteria as String#[]." ilk="function" name="[]=" signature="str[fixnum] = fixnum&#xA;str[fixnum] = new_str&#xA;str[fixnum, fixnum] = new_str&#xA;str[range] = aString&#xA;str[regexp] = new_str&#xA;str[regexp, fixnum] = new_str&#xA;str[other_str] = new_str" />
        <scope doc="Returns a copy of `str&apos; with the first character converted&#xA;to uppercase and the remainder to lowercase." ilk="function" name="capitalize" signature="str.capitalize   =&gt; new_str" />
        <scope doc="Modifies `str&apos; by converting the first character to&#xA;uppercase and the remainder to lowercase. Returns nil if no&#xA;changes are made." ilk="function" name="capitalize!" signature="str.capitalize!   =&gt; str or nil" />
        <scope doc="Case-insensitive version of String#&lt;=&gt;." ilk="function" name="casecmp" signature="str.casecmp(other_str)   =&gt; -1, 0, +1" />
        <scope doc="If `integer&apos; is greater than the length of `str&apos;, returns a&#xA;new String of length `integer&apos; with `str&apos; centered and&#xA;padded with `padstr&apos;; otherwise, returns `str&apos;." ilk="function" name="center" signature="str.center(integer, padstr)   =&gt; new_str" />
        <scope doc="Returns a new String with the given record separator removed&#xA;from the end of `str&apos; (if present). If $/ has not been&#xA;changed from the default Ruby record separator, then chomp&#xA;also removes carriage return characters (that is it will&#xA;remove \n, \r, and \r\n)." ilk="function" name="chomp" signature="str.chomp(separator=$/)   =&gt; new_str" />
        <scope doc="Modifies `str&apos; in place as described for String#chomp,&#xA;returning `str&apos;, or nil if no modifications were made." ilk="function" name="chomp!" signature="str.chomp!(separator=$/)   =&gt; str or nil" />
        <scope doc="Returns a new String with the last character removed. If the&#xA;string ends with \r\n, both characters are removed." ilk="function" name="chop" signature="str.chop   =&gt; new_str" />
        <scope doc="Processes `str&apos; as for String#chop, returning `str&apos;, or nil&#xA;if `str&apos; is the empty string. See also String#chomp!." ilk="function" name="chop!" signature="str.chop!   =&gt; str or nil" />
        <scope doc="Append---Concatenates the given object to `str&apos;. If the&#xA;object is a Fixnum between 0 and 255, it is converted to a&#xA;character before concatenation." ilk="function" name="concat" signature="str &lt;&lt; fixnum        =&gt; str&#xA;str.concat(fixnum)   =&gt; str&#xA;str &lt;&lt; obj           =&gt; str&#xA;str.concat(obj)      =&gt; str" />
        <scope doc="Each `other_str&apos; parameter defines a set of characters to&#xA;count. The intersection of these sets defines the characters&#xA;to count in `str&apos;." ilk="function" name="count" signature="str.count([other_str]+)   =&gt; fixnum" />
        <scope doc="Applies a one-way cryptographic hash to `str&apos; by invoking&#xA;the standard library function crypt. The argument is the&#xA;salt string, which should be two characters long, each&#xA;character drawn from [a-zA-Z0-9./]." ilk="function" name="crypt" signature="str.crypt(other_str)   =&gt; new_str" />
        <scope doc="Returns a copy of `str&apos; with all characters in the&#xA;intersection of its arguments deleted. Uses the same rules&#xA;for building the set of characters as String#count." ilk="function" name="delete" signature="str.delete([other_str]+)   =&gt; new_str" />
        <scope doc="Performs a delete operation in place, returning `str&apos;, or&#xA;nil if `str&apos; was not modified." ilk="function" name="delete!" signature="str.delete!([other_str]+&gt;)   =&gt; str or nil" />
        <scope doc="Returns a copy of `str&apos; with all uppercase letters replaced&#xA;with their lowercase counterparts. The operation is locale&#xA;insensitive---only characters ``A&apos;&apos; to ``Z&apos;&apos; are affected." ilk="function" name="downcase" signature="str.downcase   =&gt; new_str" />
        <scope doc="Downcases the contents of `str&apos;, returning nil if no changes&#xA;were made." ilk="function" name="downcase!" signature="str.downcase!   =&gt; str or nil" />
        <scope doc="Produces a version of `str&apos; with all nonprinting characters&#xA;replaced by \nnn notation and all special characters&#xA;escaped." ilk="function" name="dump" signature="str.dump   =&gt; new_str" />
        <scope doc="Splits `str&apos; using the supplied parameter as the record&#xA;separator ($/ by default), passing each substring in turn to&#xA;the supplied block. If a zero-length record separator is&#xA;supplied, the string is split on \n characters, except that&#xA;multiple successive newlines are appended together." ilk="function" name="each" signature="str.each(separator=$/) {|substr| block }        =&gt; str&#xA;str.each_line(separator=$/) {|substr| block }   =&gt; str" />
        <scope doc="Passes each byte in `str&apos; to the given block." ilk="function" name="each_byte" signature="str.each_byte {|fixnum| block }    =&gt; str" />
        <scope doc="Splits `str&apos; using the supplied parameter as the record&#xA;separator ($/ by default), passing each substring in turn to&#xA;the supplied block. If a zero-length record separator is&#xA;supplied, the string is split on \n characters, except that&#xA;multiple successive newlines are appended together." ilk="function" name="each_line" signature="str.each(separator=$/) {|substr| block }        =&gt; str&#xA;str.each_line(separator=$/) {|substr| block }   =&gt; str" />
        <scope doc="Returns true if `str&apos; has a length of zero." ilk="function" name="empty?" signature="str.empty?   =&gt; true or false" />
        <scope doc="Two strings are equal if the have the same length and&#xA;content." ilk="function" name="eql?" signature="str.eql?(other)   =&gt; true or false" />
        <scope doc="Returns a copy of `str&apos; with `all&apos; occurrences of `pattern&apos;&#xA;replaced with either `replacement&apos; or the value of the&#xA;block. The `pattern&apos; will typically be a Regexp; if it is a&#xA;String then no regular expression metacharacters will be&#xA;interpreted (that is /\d/ will match a digit, but &apos;\d&apos; will&#xA;match a backslash followed by a &apos;d&apos;)." ilk="function" name="gsub" signature="str.gsub(pattern, replacement)       =&gt; new_str&#xA;str.gsub(pattern) {|match| block }   =&gt; new_str" />
        <scope doc="Performs the substitutions of String#gsub in place,&#xA;returning `str&apos;, or nil if no substitutions were performed." ilk="function" name="gsub!" signature="str.gsub!(pattern, replacement)        =&gt; str or nil&#xA;str.gsub!(pattern) {|match| block }    =&gt; str or nil" />
        <scope doc="Return a hash based on the string&apos;s length and content." ilk="function" name="hash" signature="str.hash   =&gt; fixnum" />
        <scope doc="Treats leading characters from `str&apos; as a string of&#xA;hexadecimal digits (with an optional sign and an optional&#xA;0x) and returns the corresponding number. Zero is returned&#xA;on error." ilk="function" name="hex" signature="str.hex   =&gt; integer" />
        <scope doc="Returns true if `str&apos; contains the given string or&#xA;character." ilk="function" name="include?" signature="str.include? other_str   =&gt; true or false&#xA;str.include? fixnum      =&gt; true or false" />
        <scope doc="Returns the index of the first occurrence of the given&#xA;`substring&apos;, character (`fixnum&apos;), or pattern (`regexp&apos;) in&#xA;`str&apos;. Returns nil if not found." ilk="function" name="index" signature="str.index(substring [, offset])   =&gt; fixnum or nil&#xA;str.index(fixnum [, offset])      =&gt; fixnum or nil&#xA;str.index(regexp [, offset])      =&gt; fixnum or nil" />
        <scope doc="Replaces the contents and taintedness of `str&apos; with the&#xA;corresponding values in `other_str&apos;." ilk="function" name="initialize_copy" signature="str.replace(other_str)   =&gt; str" />
        <scope doc="Inserts `other_str&apos; before the character at the given&#xA;`index&apos;, modifying `str&apos;. Negative indices count from the&#xA;end of the string, and insert `after&apos; the given character." ilk="function" name="insert" signature="str.insert(index, other_str)   =&gt; str" />
        <scope doc="Returns a printable version of `str&apos;, with special&#xA;characters escaped." ilk="function" name="inspect" signature="str.inspect   =&gt; string" />
        <scope doc="Returns the Symbol corresponding to `str&apos;, creating the&#xA;symbol if it did not previously exist. See Symbol#id2name." ilk="function" name="intern" signature="str.intern   =&gt; symbol&#xA;str.to_sym   =&gt; symbol" />
        <scope doc="Returns whether self&apos;s encoding is EUC-JP or not." ilk="function" name="iseuc" signature="String#iseuc   -&gt; obj or nil" />
        <scope doc="Returns whether self&apos;s encoding is Shift_JIS or not." ilk="function" name="issjis" signature="String#issjis   -&gt; obj or nil" />
        <scope doc="Returns whether self&apos;s encoding is UTF-8 or not." ilk="function" name="isutf8" signature="String#isutf8   -&gt; obj or nil" />
        <scope doc="Convert self to out_code. out_code and in_code are given as&#xA;constants of Kconv." ilk="function" name="kconv" signature="String#kconv(out_code, in_code = Kconv::AUTO)" />
        <scope doc="Returns the length of `str&apos;." ilk="function" name="length" signature="str.length   =&gt; integer" />
        <scope doc="If `integer&apos; is greater than the length of `str&apos;, returns a&#xA;new String of length `integer&apos; with `str&apos; left justified and&#xA;padded with `padstr&apos;; otherwise, returns `str&apos;." ilk="function" name="ljust" signature="str.ljust(integer, padstr=&apos; &apos;)   =&gt; new_str" />
        <scope doc="Returns a copy of `str&apos; with leading whitespace removed. See&#xA;also String#rstrip and String#strip." ilk="function" name="lstrip" signature="str.lstrip   =&gt; new_str" />
        <scope doc="Removes leading whitespace from `str&apos;, returning nil if no&#xA;change was made. See also String#rstrip! and String#strip!." ilk="function" name="lstrip!" signature="str.lstrip!   =&gt; self or nil" />
        <scope doc="Converts `pattern&apos; to a Regexp (if it isn&apos;t already one),&#xA;then invokes its match method on `str&apos;." ilk="function" name="match" signature="str.match(pattern)   =&gt; matchdata or nil" />
        <scope doc="Returns the successor to `str&apos;. The successor is calculated&#xA;by incrementing characters starting from the rightmost&#xA;alphanumeric (or the rightmost character if there are no&#xA;alphanumerics) in the string." ilk="function" name="next" signature="str.succ   =&gt; new_str&#xA;str.next   =&gt; new_str" />
        <scope doc="Equivalent to String#succ, but modifies the receiver in&#xA;place." ilk="function" name="next!" signature="str.succ!   =&gt; str&#xA;str.next!   =&gt; str" />
        <scope doc="Treats leading characters of `str&apos; as a string of octal&#xA;digits (with an optional sign) and returns the corresponding&#xA;number. Returns 0 if the conversion fails." ilk="function" name="oct" signature="str.oct   =&gt; integer" />
        <scope doc="Replaces the contents and taintedness of `str&apos; with the&#xA;corresponding values in `other_str&apos;." ilk="function" name="replace" signature="str.replace(other_str)   =&gt; str" />
        <scope doc="Returns a new string with the characters from `str&apos; in&#xA;reverse order." ilk="function" name="reverse" signature="str.reverse   =&gt; new_str" />
        <scope doc="Reverses `str&apos; in place." ilk="function" name="reverse!" signature="str.reverse!   =&gt; str" />
        <scope doc="Returns the index of the last occurrence of the given&#xA;`substring&apos;, character (`fixnum&apos;), or pattern (`regexp&apos;) in&#xA;`str&apos;. Returns nil if not found." ilk="function" name="rindex" signature="str.rindex(substring [, fixnum])   =&gt; fixnum or nil&#xA;str.rindex(fixnum [, fixnum])   =&gt; fixnum or nil&#xA;str.rindex(regexp [, fixnum])   =&gt; fixnum or nil" />
        <scope doc="If `integer&apos; is greater than the length of `str&apos;, returns a&#xA;new String of length `integer&apos; with `str&apos; right justified&#xA;and padded with `padstr&apos;; otherwise, returns `str&apos;." ilk="function" name="rjust" signature="str.rjust(integer, padstr=&apos; &apos;)   =&gt; new_str" />
        <scope doc="Returns a copy of `str&apos; with trailing whitespace removed.&#xA;See also String#lstrip and String#strip." ilk="function" name="rstrip" signature="str.rstrip   =&gt; new_str" />
        <scope doc="Removes trailing whitespace from `str&apos;, returning nil if no&#xA;change was made. See also String#lstrip! and String#strip!." ilk="function" name="rstrip!" signature="str.rstrip!   =&gt; self or nil" />
        <scope doc="Both forms iterate through `str&apos;, matching the pattern&#xA;(which may be a Regexp or a String). For each match, a&#xA;result is generated and either added to the result array or&#xA;passed to the block." ilk="function" name="scan" signature="str.scan(pattern)                         =&gt; array&#xA;str.scan(pattern) {|match, ...| block }   =&gt; str" />
        <scope doc="Returns the length of `str&apos;." ilk="function" name="size" signature="str.length   =&gt; integer" />
        <scope doc="Element Reference---If passed a single Fixnum, returns the&#xA;code of the character at that position. If passed two Fixnum&#xA;objects, returns a substring starting at the offset given by&#xA;the first, and a length given by the second." ilk="function" name="slice" signature="str[fixnum]                 =&gt; fixnum or nil&#xA;str[fixnum, fixnum]         =&gt; new_str or nil&#xA;str[range]                  =&gt; new_str or nil&#xA;str[regexp]                 =&gt; new_str or nil&#xA;str[regexp, fixnum]         =&gt; new_str or nil&#xA;str[other_str]              =&gt; new_str or nil&#xA;str.slice(fixnum)           =&gt; fixnum or nil&#xA;str.slice(fixnum, fixnum)   =&gt; new_str or nil&#xA;str.slice(range)            =&gt; new_str or nil&#xA;str.slice(regexp)           =&gt; new_str or nil&#xA;str.slice(regexp, fixnum)   =&gt; new_str or nil&#xA;str.slice(other_str)        =&gt; new_str or nil" />
        <scope doc="Deletes the specified portion from `str&apos;, and returns the&#xA;portion deleted. The forms that take a Fixnum will raise an&#xA;IndexError if the value is out of range; the Range form will&#xA;raise a RangeError, and the Regexp and String forms will&#xA;silently ignore the assignment." ilk="function" name="slice!" signature="str.slice!(fixnum)           =&gt; fixnum or nil&#xA;str.slice!(fixnum, fixnum)   =&gt; new_str or nil&#xA;str.slice!(range)            =&gt; new_str or nil&#xA;str.slice!(regexp)           =&gt; new_str or nil&#xA;str.slice!(other_str)        =&gt; new_str or nil" />
        <scope doc="Divides `str&apos; into substrings based on a delimiter,&#xA;returning an array of these substrings." ilk="function" name="split" signature="str.split(pattern=$;, [limit])   =&gt; anArray" />
        <scope doc="Builds a set of characters from the `other_str&apos; parameter(s)&#xA;using the procedure described for String#count. Returns a&#xA;new string where runs of the same character that occur in&#xA;this set are replaced by a single character." ilk="function" name="squeeze" signature="str.squeeze([other_str]*)    =&gt; new_str" />
        <scope doc="Squeezes `str&apos; in place, returning either `str&apos;, or nil if&#xA;no changes were made." ilk="function" name="squeeze!" signature="str.squeeze!([other_str]*)   =&gt; str or nil" />
        <scope doc="Returns a copy of `str&apos; with leading and trailing whitespace&#xA;removed." ilk="function" name="strip" signature="str.strip   =&gt; new_str" />
        <scope doc="Removes leading and trailing whitespace from `str&apos;. Returns&#xA;nil if `str&apos; was not altered." ilk="function" name="strip!" signature="str.strip!   =&gt; str or nil" />
        <scope doc="Returns a copy of `str&apos; with the `first&apos; occurrence of&#xA;`pattern&apos; replaced with either `replacement&apos; or the value of&#xA;the block. The `pattern&apos; will typically be a Regexp; if it&#xA;is a String then no regular expression metacharacters will&#xA;be interpreted (that is /\d/ will match a digit, but &apos;\d&apos;&#xA;will match a backslash followed by a &apos;d&apos;)." ilk="function" name="sub" signature="str.sub(pattern, replacement)         =&gt; new_str&#xA;str.sub(pattern) {|match| block }     =&gt; new_str" />
        <scope doc="Performs the substitutions of String#sub in place, returning&#xA;`str&apos;, or nil if no substitutions were performed." ilk="function" name="sub!" signature="str.sub!(pattern, replacement)          =&gt; str or nil&#xA;str.sub!(pattern) {|match| block }      =&gt; str or nil" />
        <scope doc="Returns the successor to `str&apos;. The successor is calculated&#xA;by incrementing characters starting from the rightmost&#xA;alphanumeric (or the rightmost character if there are no&#xA;alphanumerics) in the string." ilk="function" name="succ" signature="str.succ   =&gt; new_str&#xA;str.next   =&gt; new_str" />
        <scope doc="Equivalent to String#succ, but modifies the receiver in&#xA;place." ilk="function" name="succ!" signature="str.succ!   =&gt; str&#xA;str.next!   =&gt; str" />
        <scope doc="Returns a basic `n&apos;-bit checksum of the characters in `str&apos;,&#xA;where `n&apos; is the optional Fixnum parameter, defaulting to&#xA;16. The result is simply the sum of the binary value of each&#xA;character in `str&apos; modulo 2n - 1." ilk="function" name="sum" signature="str.sum(n=16)   =&gt; integer" />
        <scope doc="Returns a copy of `str&apos; with uppercase alphabetic characters&#xA;converted to lowercase and lowercase characters converted to&#xA;uppercase." ilk="function" name="swapcase" signature="str.swapcase   =&gt; new_str" />
        <scope doc="Equivalent to String#swapcase, but modifies the receiver in&#xA;place, returning `str&apos;, or nil if no changes were made." ilk="function" name="swapcase!" signature="str.swapcase!   =&gt; str or nil" />
        <scope doc="Returns the result of interpreting leading characters in&#xA;`str&apos; as a floating point number. Extraneous characters past&#xA;the end of a valid number are ignored." ilk="function" name="to_f" signature="str.to_f   =&gt; float" />
        <scope doc="Returns the result of interpreting leading characters in&#xA;`str&apos; as an integer base `base&apos; (2, 8, 10, or 16).&#xA;Extraneous characters past the end of a valid number are&#xA;ignored." ilk="function" name="to_i" signature="str.to_i(base=10)   =&gt; integer" />
        <scope doc="Returns the receiver." ilk="function" name="to_s" signature="str.to_s     =&gt; str&#xA;str.to_str   =&gt; str" />
        <scope doc="Returns the receiver." ilk="function" name="to_str" signature="str.to_s     =&gt; str&#xA;str.to_str   =&gt; str" />
        <scope doc="Returns the Symbol corresponding to `str&apos;, creating the&#xA;symbol if it did not previously exist. See Symbol#id2name." ilk="function" name="to_sym" signature="str.intern   =&gt; symbol&#xA;str.to_sym   =&gt; symbol" />
        <scope doc="Convert self to EUC-JP" ilk="function" name="toeuc" signature="String#toeuc   -&gt; string" />
        <scope doc="Convert self to ISO-2022-JP" ilk="function" name="tojis" signature="String#tojis   -&gt; string" />
        <scope doc="Convert self to Shift_JIS" ilk="function" name="tosjis" signature="String#tosjis   -&gt; string" />
        <scope doc="Convert self to UTF-16" ilk="function" name="toutf16" signature="String#toutf16   -&gt; string" />
        <scope doc="Convert self to UTF-8" ilk="function" name="toutf8" signature="String#toutf8   -&gt; string" />
        <scope doc="Returns a copy of `str&apos; with the characters in `from_str&apos;&#xA;replaced by the corresponding characters in `to_str&apos;. If&#xA;`to_str&apos; is shorter than `from_str&apos;, it is padded with its&#xA;last character." ilk="function" name="tr" signature="str.tr(from_str, to_str)   =&gt; new_str" />
        <scope doc="Translates `str&apos; in place, using the same rules as&#xA;String#tr. Returns `str&apos;, or nil if no changes were made." ilk="function" name="tr!" signature="str.tr!(from_str, to_str)   =&gt; str or nil" />
        <scope doc="Processes a copy of `str&apos; as described under String#tr, then&#xA;removes duplicate characters in regions that were affected&#xA;by the translation." ilk="function" name="tr_s" signature="str.tr_s(from_str, to_str)   =&gt; new_str" />
        <scope doc="Performs String#tr_s processing on `str&apos; in place, returning&#xA;`str&apos;, or nil if no changes were made." ilk="function" name="tr_s!" signature="str.tr_s!(from_str, to_str)   =&gt; str or nil" />
        <scope doc="Decodes `str&apos; (which may contain binary data) according to&#xA;the format string, returning an array of each value&#xA;extracted. The format string consists of a sequence of&#xA;single-character directives, summarized in the table at the&#xA;end of this entry." ilk="function" name="unpack" signature="str.unpack(format)   =&gt; anArray" />
        <scope doc="Returns a copy of `str&apos; with all lowercase letters replaced&#xA;with their uppercase counterparts. The operation is locale&#xA;insensitive---only characters ``a&apos;&apos; to ``z&apos;&apos; are affected." ilk="function" name="upcase" signature="str.upcase   =&gt; new_str" />
        <scope doc="Upcases the contents of `str&apos;, returning nil if no changes&#xA;were made." ilk="function" name="upcase!" signature="str.upcase!   =&gt; str or nil" />
        <scope doc="Iterates through successive values, starting at `str&apos; and&#xA;ending at `other_str&apos; inclusive, passing each value in turn&#xA;to the block. The String#succ method is used to generate&#xA;each value." ilk="function" name="upto" signature="str.upto(other_str) {|s| block }   =&gt; str" />
      </scope>
      <scope classrefs="Object" doc="A Struct is a convenient way to bundle a number of&#xA;attributes together, using accessor methods, without having&#xA;to write an explicit class." ilk="class" name="Struct">
        <import symbol="Enumerable" />
        <scope attributes="__classmethod__ __ctor__" doc="Creates a new class, named by `aString&apos;, containing accessor&#xA;methods for the given symbols. If the name `aString&apos; is&#xA;omitted, an anonymous structure class will be created." ilk="function" name="new" signature="Struct.new( [aString] [, aSym]+&gt; )    =&gt; StructClass&#xA;StructClass.new(arg, ...)             =&gt; obj&#xA;StructClass[arg, ...]                 =&gt; obj" />
        <scope doc="Equality---Returns true if `other_struct&apos; is equal to this&#xA;one: they must be of the same class as generated by&#xA;Struct::new, and the values of all instance variables must&#xA;be equal (according to Object#==)." ilk="function" name="==" signature="struct == other_struct     =&gt; true or false" />
        <scope doc="Attribute Reference---Returns the value of the instance&#xA;variable named by `symbol&apos;, or indexed (0..length-1) by&#xA;`fixnum&apos;. Will raise NameError if the named variable does&#xA;not exist, or IndexError if the index is out of range." ilk="function" name="[]" signature="struct[symbol]    =&gt; anObject&#xA;struct[fixnum]    =&gt; anObject " />
        <scope doc="Attribute Assignment---Assigns to the instance variable&#xA;named by `symbol&apos; or `fixnum&apos; the value `obj&apos; and returns&#xA;it. Will raise a NameError if the named variable does not&#xA;exist, or an IndexError if the index is out of range." ilk="function" name="[]=" signature="struct[symbol] = obj    =&gt; obj&#xA;struct[fixnum] = obj    =&gt; obj" />
        <scope doc="Calls `block&apos; once for each instance variable, passing the&#xA;value as a parameter." ilk="function" name="each" signature="struct.each {|obj| block }  =&gt; struct" />
        <scope doc="Calls `block&apos; once for each instance variable, passing the&#xA;name (as a symbol) and the value as parameters." ilk="function" name="each_pair" signature="struct.each_pair {|sym, obj| block }     =&gt; struct" />
        <scope doc="code-seq:" ilk="function" name="eql?" signature="(p1)" />
        <scope doc="Return a hash value based on this struct&apos;s contents." ilk="function" name="hash" signature="struct.hash   =&gt; fixnum" />
        <scope doc="Describe the contents of this struct in a string." ilk="function" name="inspect" signature="struct.to_s      =&gt; string&#xA;struct.inspect   =&gt; string" />
        <scope doc="Returns the number of instance variables." ilk="function" name="length" signature="struct.length    =&gt; fixnum&#xA;struct.size      =&gt; fixnum" />
        <scope doc="Returns an array of strings representing the names of the&#xA;instance variables." ilk="function" name="members" signature="struct.members    =&gt; array" />
        <scope doc="Invokes the block passing in successive elements from&#xA;`struct&apos;, returning an array containing those elements for&#xA;which the block returns a true value (equivalent to&#xA;Enumerable#select)." ilk="function" name="select" signature="struct.select {|i| block }    =&gt; array" />
        <scope doc="Returns the number of instance variables." ilk="function" name="size" signature="struct.length    =&gt; fixnum&#xA;struct.size      =&gt; fixnum" />
        <scope doc="Returns the values for this instance as an array." ilk="function" name="to_a" signature="struct.to_a     =&gt; array&#xA;struct.values   =&gt; array" />
        <scope doc="Describe the contents of this struct in a string." ilk="function" name="to_s" signature="struct.to_s      =&gt; string&#xA;struct.inspect   =&gt; string" />
        <scope doc="Returns the values for this instance as an array." ilk="function" name="values" signature="struct.to_a     =&gt; array&#xA;struct.values   =&gt; array" />
        <scope doc="Returns an array containing the elements in `self&apos;&#xA;corresponding to the given selector(s). The selectors may be&#xA;either integer indices or ranges." ilk="function" name="values_at" signature="struct.values_at(selector,... )  =&gt; an_array" />
      </scope>
      <scope classrefs="Object" doc="Symbol objects represent names and some strings inside the&#xA;Ruby interpreter. They are generated using the :name and&#xA;:&quot;string&quot; literals syntax, and by the various to_sym&#xA;methods." ilk="class" name="Symbol">
        <scope attributes="__classmethod__" doc="Returns an array of all the symbols currently in Ruby&apos;s&#xA;symbol table." ilk="function" name="all_symbols" signature="Symbol.all_symbols    =&gt; array" />
        <scope doc="Equality---At the Object level, == returns true only if&#xA;`obj&apos; and `other&apos; are the same object. Typically, this&#xA;method is overridden in descendent classes to provide class-&#xA;specific meaning." ilk="function" name="===" signature="obj == other        =&gt; true or false&#xA;obj.equal?(other)   =&gt; true or false&#xA;obj.eql?(other)     =&gt; true or false" />
        <scope doc="Returns the name or string corresponding to `sym&apos;." ilk="function" name="id2name" signature="sym.id2name   =&gt; string&#xA;sym.to_s      =&gt; string" />
        <scope doc="Returns the representation of `sym&apos; as a symbol literal." ilk="function" name="inspect" signature="sym.inspect    =&gt; string" />
        <scope doc="Returns an integer that is unique for each symbol within a&#xA;particular execution of a program." ilk="function" name="to_i" signature="sym.to_i      =&gt; fixnum" />
        <scope doc=":nodoc:" ilk="function" name="to_int" signature="()" />
        <scope doc="Returns the name or string corresponding to `sym&apos;." ilk="function" name="to_s" signature="sym.id2name   =&gt; string&#xA;sym.to_s      =&gt; string" />
        <scope doc="In general, to_sym returns the Symbol corresponding to an&#xA;object. As `sym&apos; is already a symbol, self is returned in&#xA;this case." ilk="function" name="to_sym" signature="sym.to_sym   =&gt; sym" />
      </scope>
      <scope classrefs="ScriptError" ilk="class" name="SyntaxError" />
      <scope classrefs="StandardError" ilk="class" name="SystemCallError">
        <scope attributes="__classmethod__" doc="Return true if the receiver is a generic SystemCallError, or&#xA;if the error numbers `self&apos; and `other&apos; are the same." ilk="function" name="===" signature="system_call_error === other  =&gt; true or false" />
        <scope attributes="__classmethod__ __ctor__" doc="If `errno&apos; corresponds to a known system error code,&#xA;constructs the appropriate Errno class for that error,&#xA;otherwise constructs a generic SystemCallError object. The&#xA;error number is subsequently available via the errno method." ilk="function" name="new" signature="SystemCallError.new(msg, errno)  =&gt; system_call_error_subclass" />
        <scope doc="Return this SystemCallError&apos;s error number." ilk="function" name="errno" signature="system_call_error.errno   =&gt; fixnum" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="SystemExit">
        <scope attributes="__classmethod__ __ctor__" doc="Create a new SystemExit exception with the given status." ilk="function" name="new" signature="SystemExit.new(status=0)   =&gt; system_exit" />
        <scope doc="Return the status value associated with this system exit." ilk="function" name="status" signature="system_exit.status   =&gt; fixnum" />
        <scope doc="Returns true if exiting successful, false if not." ilk="function" name="success?" signature="system_exit.success?  =&gt; true or false" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="SystemStackError" />
      <scope classrefs="Object" doc="Thread encapsulates the behavior of a thread of execution,&#xA;including the main thread of the Ruby script." ilk="class" name="Thread">
        <scope attributes="__classmethod__" doc="Returns the status of the global ``abort on exception&apos;&apos;&#xA;condition. The default is false." ilk="function" name="abort_on_exception" signature="Thread.abort_on_exception   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="When set to true, all threads will abort if an exception is&#xA;raised. Returns the new state." ilk="function" name="abort_on_exception=" signature="Thread.abort_on_exception= boolean   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns the status of the global ``thread critical&apos;&apos;&#xA;condition." ilk="function" name="critical" signature="Thread.critical   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Sets the status of the global ``thread critical&apos;&apos; condition&#xA;and returns it. When set to true, prohibits scheduling of&#xA;any existing thread." ilk="function" name="critical=" signature="Thread.critical= boolean   =&gt; true or false" />
        <scope attributes="__classmethod__" doc="Returns the currently executing thread." ilk="function" name="current" signature="Thread.current   =&gt; thread" />
        <scope attributes="__classmethod__" doc="Wraps a block in Thread.critical, restoring the original&#xA;value upon exit from the critical section." ilk="function" name="exclusive" signature="() {|| ...}" />
        <scope attributes="__classmethod__" doc="Terminates the currently running thread and schedules&#xA;another thread to be run. If this thread is already marked&#xA;to be killed, exit returns the Thread." ilk="function" name="exit" signature="Thread.exit   =&gt; thread" />
        <scope attributes="__classmethod__" doc="Basically the same as Thread::new. However, if class Thread&#xA;is subclassed, then calling start in that subclass will not&#xA;invoke the subclass&apos;s initialize method." ilk="function" name="fork" signature="Thread.start([args]*) {|args| block }   =&gt; thread&#xA;Thread.fork([args]*) {|args| block }    =&gt; thread" />
        <scope attributes="__classmethod__" doc="Causes the given `thread&apos; to exit (see Thread::exit)." ilk="function" name="kill" signature="Thread.kill(thread)   =&gt; thread" />
        <scope attributes="__classmethod__" doc="Returns an array of Thread objects for all threads that are&#xA;either runnable or stopped." ilk="function" name="list" signature="Thread.list   =&gt; array" />
        <scope attributes="__classmethod__" doc="Returns the main thread for the process." ilk="function" name="main" signature="Thread.main   =&gt; thread" />
        <scope attributes="__classmethod__ __ctor__" doc="Creates and runs a new thread to execute the instructions&#xA;given in `block&apos;. Any arguments passed to Thread::new are&#xA;passed into the block." ilk="function" name="new" signature="Thread.new([arg]*) {|args| block }   =&gt; thread" />
        <scope attributes="__classmethod__" doc="Invokes the thread scheduler to pass execution to another&#xA;thread." ilk="function" name="pass" signature="Thread.pass   =&gt; nil" />
        <scope attributes="__classmethod__" doc="Basically the same as Thread::new. However, if class Thread&#xA;is subclassed, then calling start in that subclass will not&#xA;invoke the subclass&apos;s initialize method." ilk="function" name="start" signature="Thread.start([args]*) {|args| block }   =&gt; thread&#xA;Thread.fork([args]*) {|args| block }    =&gt; thread" />
        <scope attributes="__classmethod__" doc="Stops execution of the current thread, putting it into a&#xA;``sleep&apos;&apos; state, and schedules execution of another thread.&#xA;Resets the ``critical&apos;&apos; condition to false." ilk="function" name="stop" signature="Thread.stop   =&gt; nil" />
        <scope doc="Attribute Reference---Returns the value of a thread-local&#xA;variable, using either a symbol or a string name. If the&#xA;specified variable does not exist, returns nil." ilk="function" name="[]" signature="thr[sym]   =&gt; obj or nil" />
        <scope doc="Attribute Assignment---Sets or creates the value of a&#xA;thread-local variable, using either a symbol or a string.&#xA;See also Thread#[]." ilk="function" name="[]=" signature="thr[sym] = obj   =&gt; obj" />
        <scope doc="Returns the status of the thread-local ``abort on&#xA;exception&apos;&apos; condition for `thr&apos;. The default is false." ilk="function" name="abort_on_exception" signature="thr.abort_on_exception   =&gt; true or false" />
        <scope doc="When set to true, causes all threads (including the main&#xA;program) to abort if an exception is raised in `thr&apos;. The&#xA;process will effectively exit(0)." ilk="function" name="abort_on_exception=" signature="thr.abort_on_exception= boolean   =&gt; true or false" />
        <scope doc="Returns true if `thr&apos; is running or sleeping." ilk="function" name="alive?" signature="thr.alive?   =&gt; true or false" />
        <scope doc="Terminates `thr&apos; and schedules another thread to be run. If&#xA;this thread is already marked to be killed, exit returns the&#xA;Thread." ilk="function" name="exit" signature="thr.exit        =&gt; thr or nil&#xA;thr.kill        =&gt; thr or nil&#xA;thr.terminate   =&gt; thr or nil" />
        <scope doc="Returns the ThreadGroup which contains `thr&apos;, or nil if the&#xA;thread is not a member of any group." ilk="function" name="group" signature="thr.group   =&gt; thgrp or nil" />
        <scope doc="Dump the name, id, and status of `thr&apos; to a string." ilk="function" name="inspect" signature="thr.inspect   =&gt; string" />
        <scope doc="The calling thread will suspend execution and run `thr&apos;.&#xA;Does not return until `thr&apos; exits or until `limit&apos; seconds&#xA;have passed." ilk="function" name="join" signature="thr.join          =&gt; thr&#xA;thr.join(limit)   =&gt; thr" />
        <scope doc="Returns true if the given string (or symbol) exists as a&#xA;thread-local variable." ilk="function" name="key?" signature="thr.key?(sym)   =&gt; true or false" />
        <scope doc="Returns an an array of the names of the thread-local&#xA;variables (as Symbols)." ilk="function" name="keys" signature="thr.keys   =&gt; array" />
        <scope doc="Terminates `thr&apos; and schedules another thread to be run. If&#xA;this thread is already marked to be killed, exit returns the&#xA;Thread." ilk="function" name="kill" signature="thr.exit        =&gt; thr or nil&#xA;thr.kill        =&gt; thr or nil&#xA;thr.terminate   =&gt; thr or nil" />
        <scope doc="Returns the priority of `thr&apos;. Default is zero; higher-&#xA;priority threads will run before lower-priority threads." ilk="function" name="priority" signature="thr.priority   =&gt; integer" />
        <scope doc="Sets the priority of `thr&apos; to `integer&apos;. Higher-priority&#xA;threads will run before lower-priority threads." ilk="function" name="priority=" signature="thr.priority= integer   =&gt; thr" />
        <scope doc="Raises an exception (see Kernel::raise) from `thr&apos;. The&#xA;caller does not have to be `thr&apos;." ilk="function" name="raise" signature="thr.raise(exception)" />
        <scope doc="Wakes up `thr&apos;, making it eligible for scheduling. If not in&#xA;a critical section, then invokes the scheduler." ilk="function" name="run" signature="thr.run   =&gt; thr" />
        <scope doc="Returns the safe level in effect for `thr&apos;. Setting thread-&#xA;local safe levels can help when implementing sandboxes which&#xA;run insecure code." ilk="function" name="safe_level" signature="thr.safe_level   =&gt; integer" />
        <scope doc="Returns the status of `thr&apos;: ``sleep&apos;&apos; if `thr&apos; is sleeping&#xA;or waiting on I/O, ``run&apos;&apos; if `thr&apos; is executing,&#xA;``aborting&apos;&apos; if `thr&apos; is aborting, false if `thr&apos; terminated&#xA;normally, and nil if `thr&apos; terminated with an exception." ilk="function" name="status" signature="thr.status   =&gt; string, false or nil" />
        <scope doc="Returns true if `thr&apos; is dead or sleeping." ilk="function" name="stop?" signature="thr.stop?   =&gt; true or false" />
        <scope doc="Terminates `thr&apos; and schedules another thread to be run. If&#xA;this thread is already marked to be killed, exit returns the&#xA;Thread." ilk="function" name="terminate" signature="thr.exit        =&gt; thr or nil&#xA;thr.kill        =&gt; thr or nil&#xA;thr.terminate   =&gt; thr or nil" />
        <scope doc="Waits for `thr&apos; to complete (via Thread#join) and returns&#xA;its value." ilk="function" name="value" signature="thr.value   =&gt; obj" />
        <scope doc="Marks `thr&apos; as eligible for scheduling (it may still remain&#xA;blocked on I/O, however). Does not invoke the scheduler (see&#xA;Thread#run)." ilk="function" name="wakeup" signature="thr.wakeup   =&gt; thr" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="ThreadError" />
      <scope classrefs="Object" doc="ThreadGroup provides a means of keeping track of a number of&#xA;threads as a group. A Thread can belong to only one&#xA;ThreadGroup at a time; adding a thread to a new group will&#xA;remove it from any previous group." ilk="class" name="ThreadGroup">
        <scope doc="Adds the given `thread&apos; to this group, removing it from any&#xA;other group to which it may have previously belonged." ilk="function" name="add" signature="thgrp.add(thread)   =&gt; thgrp" />
        <scope doc="Prevents threads from being added to or removed from the&#xA;receiving ThreadGroup. New threads can still be started in&#xA;an enclosed ThreadGroup." ilk="function" name="enclose" signature="thgrp.enclose   =&gt; thgrp" />
        <scope doc="Returns true if `thgrp&apos; is enclosed. See also&#xA;ThreadGroup#enclose." ilk="function" name="enclosed?" signature="thgrp.enclosed?   =&gt; true or false" />
        <scope doc="Returns an array of all existing Thread objects that belong&#xA;to this group." ilk="function" name="list" signature="thgrp.list   =&gt; array" />
      </scope>
      <scope classrefs="Object" doc="Implements the extensions to the Time class that are&#xA;described in the documentation for the time.rb library." ilk="class" name="Time">
        <import symbol="Comparable" />
        <scope attributes="__classmethod__" doc="Unmarshal a dumped Time object." ilk="function" name="_load" signature="Time._load(string)   =&gt; time" />
        <scope attributes="__classmethod__ private" ilk="function" name="apply_offset" signature="(year, mon, day, hour, min, sec, off)" />
        <scope attributes="__classmethod__" doc="Creates a new time object with the value given by `aTime&apos;,&#xA;or the given number of `seconds&apos; (and optional&#xA;`microseconds&apos;) from epoch. A non-portable feature allows&#xA;the offset to be negative on some systems." ilk="function" name="at" signature="Time.at( aTime ) =&gt; time&#xA;Time.at( seconds [, microseconds] ) =&gt; time" />
        <scope attributes="__classmethod__" doc="Creates a time based on given values, interpreted as UTC&#xA;(GMT). The year must be specified." ilk="function" name="gm" signature="Time.utc( year [, month, day, hour, min, sec, usec] ) =&gt; time&#xA;Time.utc( sec, min, hour, day, month, year, wday, yday, isdst, tz&#xA;) =&gt; time&#xA;Time.gm( year [, month, day, hour, min, sec, usec] ) =&gt; time&#xA;Time.gm( sec, min, hour, day, month, year, wday, yday, isdst, tz&#xA;) =&gt; time" />
        <scope attributes="__classmethod__" doc="Parses date as HTTP-date defined by RFC 2616 and converts it&#xA;to a Time object." ilk="function" name="httpdate" signature="(date)" />
        <scope attributes="__classmethod__" doc="Same as Time::gm, but interprets the values in the local&#xA;time zone." ilk="function" name="local" signature="Time.local( year [, month, day, hour, min, sec, usec] ) =&gt; time&#xA;Time.local( sec, min, hour, day, month, year, wday, yday, isdst,&#xA;tz ) =&gt; time&#xA;Time.mktime( year, month, day, hour, min, sec, usec )   =&gt; time" />
        <scope attributes="__classmethod__ private" ilk="function" name="make_time" signature="(year, mon, day, hour, min, sec, sec_fraction, zone, now)" />
        <scope attributes="__classmethod__" doc="Same as Time::gm, but interprets the values in the local&#xA;time zone." ilk="function" name="mktime" signature="Time.local( year [, month, day, hour, min, sec, usec] ) =&gt; time&#xA;Time.local( sec, min, hour, day, month, year, wday, yday, isdst,&#xA;tz ) =&gt; time&#xA;Time.mktime( year, month, day, hour, min, sec, usec )   =&gt; time" />
        <scope attributes="__classmethod__ private" ilk="function" name="month_days" signature="(y, m)" />
        <scope attributes="__classmethod__ __ctor__" doc="Document-method: now" ilk="function" name="new" signature="Time.new -&gt; time" />
        <scope attributes="__classmethod__" doc="Synonym for Time.new. Returns a Time object initialized tot&#xA;he current system time." ilk="function" name="now" signature="Time.new -&gt; time" />
        <scope attributes="__classmethod__" doc="Parses date using Date._parse and converts it to a Time&#xA;object." ilk="function" name="parse" signature="(date, now=Time.now) {|year| ...}" />
        <scope attributes="__classmethod__" doc="Parses date as date-time defined by RFC 2822 and converts it&#xA;to a Time object. The format is identical to the date format&#xA;defined by RFC 822 and updated by RFC 1123." ilk="function" name="rfc2822" signature="(date)" />
        <scope attributes="__classmethod__" doc="Deprecated in favor of Process::times" ilk="function" name="times" signature="Time.times =&gt; struct_tms" />
        <scope attributes="__classmethod__" doc="Creates a time based on given values, interpreted as UTC&#xA;(GMT). The year must be specified." ilk="function" name="utc" signature="Time.utc( year [, month, day, hour, min, sec, usec] ) =&gt; time&#xA;Time.utc( sec, min, hour, day, month, year, wday, yday, isdst, tz&#xA;) =&gt; time&#xA;Time.gm( year [, month, day, hour, min, sec, usec] ) =&gt; time&#xA;Time.gm( sec, min, hour, day, month, year, wday, yday, isdst, tz&#xA;) =&gt; time" />
        <scope attributes="__classmethod__" doc="Parses date as dateTime defined by XML Schema and converts&#xA;it to a Time object. The format is restricted version of the&#xA;format defined by ISO 8601." ilk="function" name="xmlschema" signature="(date)" />
        <scope attributes="__classmethod__" ilk="function" name="zone_offset" signature="(zone, year=Time.now.year)" />
        <scope attributes="__classmethod__ private" ilk="function" name="zone_utc?" signature="(zone)" />
        <scope doc="Addition---Adds some number of seconds (possibly fractional)&#xA;to `time&apos; and returns that value as a new time." ilk="function" name="+" signature="time + numeric =&gt; time" />
        <scope doc="Comparison---Compares `time&apos; with `other_time&apos; or with&#xA;`numeric&apos;, which is the number of seconds (possibly&#xA;fractional) since epoch." ilk="function" name="&lt;=&gt;" signature="time &lt;=&gt; other_time =&gt; -1, 0, +1 &#xA;time &lt;=&gt; numeric    =&gt; -1, 0, +1" />
        <scope doc="Dump `time&apos; for marshaling." ilk="function" name="_dump" signature="time._dump   =&gt; string" />
        <scope doc="Returns a canonical string representation of `time&apos;." ilk="function" name="asctime" signature="time.asctime =&gt; string&#xA;time.ctime   =&gt; string" />
        <scope doc="Returns a canonical string representation of `time&apos;." ilk="function" name="ctime" signature="time.asctime =&gt; string&#xA;time.ctime   =&gt; string" />
        <scope doc="Returns the day of the month (1..n) for `time&apos;." ilk="function" name="day" signature="time.day  =&gt; fixnum&#xA;time.mday =&gt; fixnum" />
        <scope doc="Returns true if `time&apos; occurs during Daylight Saving Time in&#xA;its time zone." ilk="function" name="dst?" signature="time.isdst =&gt; true or false&#xA;time.dst?  =&gt; true or false" />
        <scope doc="Return true if `time&apos; and `other_time&apos; are both Time objects&#xA;with the same seconds and fractional seconds." ilk="function" name="eql?" signature="time.eql?(other_time)" />
        <scope doc="Returns a new new_time object representing `time&apos; in UTC." ilk="function" name="getgm" signature="time.getgm  =&gt; new_time&#xA;time.getutc =&gt; new_time" />
        <scope doc="Returns a new new_time object representing `time&apos; in local&#xA;time (using the local time zone in effect for this process)." ilk="function" name="getlocal" signature="time.getlocal =&gt; new_time" />
        <scope doc="Returns a new new_time object representing `time&apos; in UTC." ilk="function" name="getutc" signature="time.getgm  =&gt; new_time&#xA;time.getutc =&gt; new_time" />
        <scope doc="Returns true if `time&apos; represents a time in UTC (GMT)." ilk="function" name="gmt?" signature="time.utc? =&gt; true or false&#xA;time.gmt? =&gt; true or false" />
        <scope doc="Returns the offset in seconds between the timezone of `time&apos;&#xA;and UTC." ilk="function" name="gmt_offset" signature="time.gmt_offset =&gt; fixnum&#xA;time.gmtoff     =&gt; fixnum&#xA;time.utc_offset =&gt; fixnum" />
        <scope doc="Converts `time&apos; to UTC (GMT), modifying the receiver." ilk="function" name="gmtime" signature="time.gmtime    =&gt; time&#xA;time.utc       =&gt; time" />
        <scope doc="Returns the offset in seconds between the timezone of `time&apos;&#xA;and UTC." ilk="function" name="gmtoff" signature="time.gmt_offset =&gt; fixnum&#xA;time.gmtoff     =&gt; fixnum&#xA;time.utc_offset =&gt; fixnum" />
        <scope doc="Return a hash code for this time object." ilk="function" name="hash" signature="time.hash   =&gt; fixnum" />
        <scope doc="Returns the hour of the day (0..23) for `time&apos;." ilk="function" name="hour" signature="time.hour =&gt; fixnum" />
        <scope doc="Returns a string which represents the time as rfc1123-date&#xA;of HTTP-date defined by RFC 2616:" ilk="function" name="httpdate" signature="()" />
        <scope doc="Returns a string representing `time&apos;. Equivalent to calling&#xA;Time#strftime with a format string of ``%a %b %d %H:%M:%S %Z&#xA;%Y&apos;&apos;." ilk="function" name="inspect" signature="time.inspect =&gt; string&#xA;time.to_s    =&gt; string" />
        <scope doc="Returns true if `time&apos; occurs during Daylight Saving Time in&#xA;its time zone." ilk="function" name="isdst" signature="time.isdst =&gt; true or false&#xA;time.dst?  =&gt; true or false" />
        <scope doc="Alias for #xmlschema" ilk="function" name="iso8601" signature="(fraction_digits=0)" />
        <scope doc="Converts `time&apos; to local time (using the local time zone in&#xA;effect for this process) modifying the receiver." ilk="function" name="localtime" signature="time.localtime =&gt; time" />
        <scope doc="undocumented" ilk="function" name="marshal_dump" signature="()" />
        <scope doc="undocumented" ilk="function" name="marshal_load" signature="(p1)" />
        <scope doc="Returns the day of the month (1..n) for `time&apos;." ilk="function" name="mday" signature="time.day  =&gt; fixnum&#xA;time.mday =&gt; fixnum" />
        <scope doc="Returns the minute of the hour (0..59) for `time&apos;." ilk="function" name="min" signature="time.min =&gt; fixnum" />
        <scope doc="Returns the month of the year (1..12) for `time&apos;." ilk="function" name="mon" signature="time.mon   =&gt; fixnum&#xA;time.month =&gt; fixnum" />
        <scope doc="Returns the month of the year (1..12) for `time&apos;." ilk="function" name="month" signature="time.mon   =&gt; fixnum&#xA;time.month =&gt; fixnum" />
        <scope doc="Returns a string which represents the time as date-time&#xA;defined by RFC 2822:" ilk="function" name="rfc2822" signature="()" />
        <scope doc="Alias for #rfc2822" ilk="function" name="rfc822" signature="()" />
        <scope doc="Returns the second of the minute (0..60)`[Yes, seconds&#xA;really can range from zero to 60. This allows the system to&#xA;inject leap seconds every now and then to correct for the&#xA;fact that years are not really a convenient number of hours&#xA;long.]&apos; for `time&apos;." ilk="function" name="sec" signature="time.sec =&gt; fixnum" />
        <scope doc="Formats `time&apos; according to the directives in the given&#xA;format string. Any text not listed as a directive will be&#xA;passed through to the output string." ilk="function" name="strftime" signature="time.strftime( string ) =&gt; string" />
        <scope doc="Return a new time object, one second later than time." ilk="function" name="succ" signature="time.succ   =&gt; new_time" />
        <scope doc="Returns a ten-element `array&apos; of values for `time&apos;: {[ sec,&#xA;min, hour, day, month, year, wday, yday, isdst, zone ]}. See&#xA;the individual methods for an explanation of the valid&#xA;ranges of each value." ilk="function" name="to_a" signature="time.to_a =&gt; array" />
        <scope doc="Returns the value of `time&apos; as a floating point number of&#xA;seconds since epoch." ilk="function" name="to_f" signature="time.to_f =&gt; float" />
        <scope doc="Returns the value of `time&apos; as an integer number of seconds&#xA;since epoch." ilk="function" name="to_i" signature="time.to_i   =&gt; int&#xA;time.tv_sec =&gt; int" />
        <scope doc="Returns a string representing `time&apos;. Equivalent to calling&#xA;Time#strftime with a format string of ``%a %b %d %H:%M:%S %Z&#xA;%Y&apos;&apos;." ilk="function" name="to_s" signature="time.inspect =&gt; string&#xA;time.to_s    =&gt; string" />
        <scope doc="Returns the value of `time&apos; as an integer number of seconds&#xA;since epoch." ilk="function" name="tv_sec" signature="time.to_i   =&gt; int&#xA;time.tv_sec =&gt; int" />
        <scope doc="Returns just the number of microseconds for `time&apos;." ilk="function" name="tv_usec" signature="time.usec    =&gt; int&#xA;time.tv_usec =&gt; int" />
        <scope doc="Returns just the number of microseconds for `time&apos;." ilk="function" name="usec" signature="time.usec    =&gt; int&#xA;time.tv_usec =&gt; int" />
        <scope doc="Converts `time&apos; to UTC (GMT), modifying the receiver." ilk="function" name="utc" signature="time.gmtime    =&gt; time&#xA;time.utc       =&gt; time" />
        <scope doc="Returns true if `time&apos; represents a time in UTC (GMT)." ilk="function" name="utc?" signature="time.utc? =&gt; true or false&#xA;time.gmt? =&gt; true or false" />
        <scope doc="Returns the offset in seconds between the timezone of `time&apos;&#xA;and UTC." ilk="function" name="utc_offset" signature="time.gmt_offset =&gt; fixnum&#xA;time.gmtoff     =&gt; fixnum&#xA;time.utc_offset =&gt; fixnum" />
        <scope doc="Returns an integer representing the day of the week, 0..6,&#xA;with Sunday == 0." ilk="function" name="wday" signature="time.wday =&gt; fixnum" />
        <scope doc="Returns a string which represents the time as dateTime&#xA;defined by XML Schema:" ilk="function" name="xmlschema" signature="(fraction_digits=0)" />
        <scope doc="Returns an integer representing the day of the year, 1..366." ilk="function" name="yday" signature="time.yday =&gt; fixnum" />
        <scope doc="Returns the year for `time&apos; (including the century)." ilk="function" name="year" signature="time.year =&gt; fixnum" />
        <scope doc="Returns the name of the time zone used for `time&apos;. As of&#xA;Ruby 1.8, returns ``UTC&apos;&apos; rather than ``GMT&apos;&apos; for UTC times." ilk="function" name="zone" signature="time.zone =&gt; string" />
      </scope>
      <scope classrefs="Object" doc="The global value true is the only instance of class&#xA;TrueClass and represents a logically true value in boolean&#xA;expressions. The class provides operators allowing true to&#xA;be used in logical expressions." ilk="class" name="TrueClass">
        <scope doc="And---Returns false if `obj&apos; is nil or false, true&#xA;otherwise." ilk="function" name="&amp;" signature="true &amp; obj    =&gt; true or false" />
        <scope doc="Exclusive Or---Returns true if `obj&apos; is nil or false, false&#xA;otherwise." ilk="function" name="^" signature="true ^ obj   =&gt; !obj" />
        <scope doc="The string representation of true is &quot;true&quot;." ilk="function" name="to_s" signature="true.to_s   =&gt;  &quot;true&quot;" />
        <scope doc="Or---Returns true. As `anObject&apos; is an argument to a method&#xA;call, it is always evaluated; there is no short-circuit&#xA;evaluation in this case." ilk="function" name="|" signature="true | obj   =&gt; true" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="TypeError" />
      <scope classrefs="Object" doc="Ruby supports two forms of objectified methods. Class Method&#xA;is used to represent methods that are associated with a&#xA;particular object: these method objects are bound to that&#xA;object." ilk="class" name="UnboundMethod">
        <scope doc="Two method objects are equal if that are bound to the same&#xA;object and contain the same body." ilk="function" name="==" signature="meth == other_meth  =&gt; true or false" />
        <scope doc="Returns an indication of the number of arguments accepted by&#xA;a method. Returns a nonnegative integer for methods that&#xA;take a fixed number of arguments." ilk="function" name="arity" signature="meth.arity    =&gt; fixnum" />
        <scope doc="Bind `umeth&apos; to `obj&apos;. If Klass was the class from which&#xA;`umeth&apos; was obtained, obj.kind_of?(Klass) must be true." ilk="function" name="bind" signature="umeth.bind(obj) -&gt; method" />
        <scope doc="MISSING: documentation" ilk="function" name="clone" signature="()" />
        <scope doc="Show the name of the underlying method." ilk="function" name="inspect" signature="meth.to_s      =&gt;  string&#xA;meth.inspect   =&gt;  string" />
        <scope doc="Show the name of the underlying method." ilk="function" name="to_s" signature="meth.to_s      =&gt;  string&#xA;meth.inspect   =&gt;  string" />
      </scope>
      <scope classrefs="StandardError" ilk="class" name="ZeroDivisionError" />
    </scope>
    