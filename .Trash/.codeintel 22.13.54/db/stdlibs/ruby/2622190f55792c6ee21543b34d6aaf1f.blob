<scope ilk="blob" lang="Ruby" name="erb">
      <scope classrefs="Object" ilk="class" name="ERB">
        <scope doc="A utility module for conversion routines, often handy in&#xA;HTML generation." ilk="namespace" name="Util">
          <scope doc="Alias for #html_escape" ilk="function" name="h" signature="(s)" />
          <scope doc="A utility method for escaping HTML tag characters in `s&apos;." ilk="function" name="html_escape" signature="(s)" />
          <scope doc="Alias for #url_encode" ilk="function" name="u" signature="(s)" />
          <scope doc="A utility method for encoding the String `s&apos; as a URL." ilk="function" name="url_encode" signature="(s)" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Compiler">
          <scope classrefs="Scanner" ilk="class" name="TrimScanner" />
          <scope classrefs="Scanner" ilk="class" name="PercentScanner" />
          <scope classrefs="Scanner" ilk="class" name="SimpleScanner2" />
          <scope classrefs="Object" ilk="class" name="Scanner" />
          <scope classrefs="Object" ilk="class" name="PercentLine" />
          <scope classrefs="Scanner" ilk="class" name="SimpleScanner" />
          <scope classrefs="Object" ilk="class" name="Buffer" />
          <scope classrefs="Scanner" ilk="class" name="ExplicitScanner" />
        </scope>
        <scope ilk="namespace" name="DefMethod" />
        <scope attributes="__classmethod__ __ctor__" doc="Constructs a new ERB object with the template specified in&#xA;`str&apos;." ilk="function" name="new" signature="(str, safe_level=nil, trim_mode=nil, eoutvar=&apos;_erbout&apos;)" />
        <scope attributes="__classmethod__" doc="Returns revision information for the erb.rb module." ilk="function" name="version" signature="()" />
        <scope doc="The optional `filename&apos; argument passed to Kernel#eval when&#xA;the ERB code is run" ilk="function" name="filename" />
        <scope doc="The optional `filename&apos; argument passed to Kernel#eval when&#xA;the ERB code is run" ilk="function" name="filename=" />
        <scope doc="Executes the generated ERB code to produce a completed&#xA;template, returning the results of that code." ilk="function" name="result" signature="(b=TOPLEVEL_BINDING)" />
        <scope doc="Generate results and print them." ilk="function" name="run" signature="(b=TOPLEVEL_BINDING)" />
        <scope doc="Can be used to set `eoutvar&apos; as described in ERB#new. It&apos;s&#xA;probably easier to just use the constructor though, since&#xA;calling this method requires the setup of an ERB `compiler&apos;&#xA;object." ilk="function" name="set_eoutvar" signature="(compiler, eoutvar = &apos;_erbout&apos;)" />
        <scope doc="The Ruby code generated by ERB" ilk="function" name="src" />
      </scope>
    </scope>
    