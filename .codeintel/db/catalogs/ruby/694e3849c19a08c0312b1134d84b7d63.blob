<scope ilk="blob" lang="Ruby" name="rails">
      <scope ilk="namespace" name="ActionController">
        <scope classrefs="Object" ilk="class" name="AbstractRequest">
          <scope attributes="__classmethod__" doc="Returns the path minus the web server relative installation&#xA;directory. This can be set with the environment variable&#xA;RAILS_RELATIVE_URL_ROOT. It can be automatically extracted&#xA;for Apache setups. If the server is not Apache, this method&#xA;returns an empty string." ilk="function" name="relative_url_root" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="relative_url_root=" />
          <scope doc="Returns the accepted MIME type for the request" ilk="function" name="accepts" signature="()" />
          <scope doc="Determine whether the body of a HTTP call is&#xA;URL-encoded (default) or matches one of the registered&#xA;param_parsers.For backward compatibility, the post format is&#xA;extracted from the X-Post-Data-Format HTTP header if&#xA;present." ilk="function" name="content_type" signature="()" />
          <scope ilk="function" name="cookies" />
          <scope doc="Is this a DELETE request? Equivalent to&#xA;request.method == :delete" ilk="function" name="delete?" signature="()" />
          <scope doc="Returns the domain part of a host, such as rubyonrails.org&#xA;in &quot;www.rubyonrails.org&quot;. You can specify a&#xA;different tld_length, such as 2 to catch rubyonrails.co.uk&#xA;in &quot;www.rubyonrails.co.uk&quot;." ilk="function" name="domain" signature="(tld_length = 1)" />
          <scope ilk="function" name="env" />
          <scope doc="Is this a POST request formatted as XML or YAML?" ilk="function" name="formatted_post?" signature="()" />
          <scope doc="Is this a GET (or HEAD) request? Equivalent to&#xA;request.method == :get" ilk="function" name="get?" signature="()" />
          <scope doc="Is this a HEAD request? HEAD is mapped as :get for&#xA;request.method, so here we ask the REQUEST_METHOD header&#xA;directly. Thus, for head, both get? and head? will return&#xA;true." ilk="function" name="head?" signature="()" />
          <scope doc="Returns the host for this request, such as example.com." ilk="function" name="host" signature="()" />
          <scope doc="Returns a host:port string for this request, such as&#xA;example.com or example.com:8080." ilk="function" name="host_with_port" signature="()" />
          <scope doc="Returns both GET and POST parameters in a single hash." ilk="function" name="parameters" signature="()" />
          <scope doc="Returns the interpreted path to requested resource after all&#xA;the installation directory of this application was taken&#xA;into account" ilk="function" name="path" signature="()" />
          <scope doc="Returns a hash with the parameters used to form the path of&#xA;the requestExample:  {:action =&gt; &apos;my_action&apos;, :controller =&gt; &apos;my_controller&apos;}&#xA;" ilk="function" name="path_parameters" signature="()" />
          <scope ilk="function" name="path_parameters=" />
          <scope doc="Returns the port number of this request as an integer." ilk="function" name="port" signature="()" />
          <scope doc="Returns a port suffix like &quot;:8080&quot; if the port&#xA;number of this request is not the default HTTP port 80 or&#xA;HTTPS port 443." ilk="function" name="port_string" signature="()" />
          <scope doc="Is this a POST request? Equivalent to&#xA;request.method == :post" ilk="function" name="post?" signature="()" />
          <scope doc="Determine whether the body of a HTTP call is&#xA;URL-encoded (default) or matches one of the registered&#xA;param_parsers.For backward compatibility, the post format is&#xA;extracted from the X-Post-Data-Format HTTP header if&#xA;present." ilk="function" name="post_format" signature="()" />
          <scope doc="Return &apos;https://&apos; if this is an SSL request&#xA;and &apos;http://&apos; otherwise." ilk="function" name="protocol" signature="()" />
          <scope doc="Is this a PUT request? Equivalent to request.method == :put" ilk="function" name="put?" signature="()" />
          <scope ilk="function" name="query_parameters" />
          <scope doc="Receive the raw post data. This is useful for services such&#xA;as REST, XMLRPC and SOAP which communicate over HTTP POST&#xA;but don&apos;t use the traditional parameter format." ilk="function" name="raw_post" signature="()" />
          <scope doc="Returns the path minus the web server relative installation&#xA;directory. This can be set with the environment variable&#xA;RAILS_RELATIVE_URL_ROOT. It can be automatically extracted&#xA;for Apache setups. If the server is not Apache, this method&#xA;returns an empty string." ilk="function" name="relative_url_root" signature="()" />
          <scope ilk="function" name="relative_url_root=" />
          <scope doc="Determine originating IP address. REMOTE_ADDR is the&#xA;standard but will fail if the user is behind a proxy.&#xA;HTTP_CLIENT_IP and/or HTTP_X_FORWARDED_FOR are set by&#xA;proxies so check for these before falling back to&#xA;REMOTE_ADDR. HTTP_X_FORWARDED_FOR may be a comma- delimited&#xA;list in the case of multiple chained proxies; the first is&#xA;the originating IP." ilk="function" name="remote_ip" signature="()" />
          <scope ilk="function" name="request_parameters" />
          <scope doc="Return the request URI, accounting for server&#xA;idiosyncracies. WEBrick includes the full URL. IIS leaves&#xA;REQUEST_URI blank." ilk="function" name="request_uri" signature="()" />
          <scope ilk="function" name="reset_session" />
          <scope doc="Returns the lowercase name of the HTTP server software." ilk="function" name="server_software" signature="()" />
          <scope ilk="function" name="session" />
          <scope ilk="function" name="session=" />
          <scope doc="Is this an SSL request?" ilk="function" name="ssl?" signature="()" />
          <scope doc="Returns the standard port number for this request&apos;s protocol" ilk="function" name="standard_port" signature="()" />
          <scope doc="Returns all the subdomains as an&#xA;array, so [&quot;dev&quot;, &quot;www&quot;] would be&#xA;returned for &quot;dev.www.rubyonrails.org&quot;. You can&#xA;specify a different tld_length, such as 2 to&#xA;catch [&quot;www&quot;] instead&#xA;of [&quot;www&quot;, &quot;rubyonrails&quot;] in &quot;www.rubyonrails.co.uk&quot;.&#xA;" ilk="function" name="subdomains" signature="(tld_length = 1)" />
          <scope doc="The same as path_parameters with explicitly symbolized keys" ilk="function" name="symbolized_path_parameters" signature="()" />
          <scope doc="Alias for #xml_http_request?" ilk="function" name="xhr?" signature="()" />
          <scope doc="Returns true if the&#xA;request&apos;s &quot;X-Requested-With&quot; header&#xA;contains &quot;XMLHttpRequest&quot;. (The Prototype&#xA;Javascript library sends this header with every Ajax&#xA;request.)" ilk="function" name="xml_http_request?" signature="()" />
          <scope doc="Is this a POST request formatted as XML?" ilk="function" name="xml_post?" signature="()" />
          <scope doc="Is this a POST request formatted as YAML?" ilk="function" name="yaml_post?" signature="()" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="Object" ilk="class" name="AbstractResponse">
          <scope ilk="function" name="assigns" />
          <scope ilk="function" name="assigns=" />
          <scope ilk="function" name="body" />
          <scope ilk="function" name="body=" />
          <scope ilk="function" name="cookies" />
          <scope ilk="function" name="cookies=" />
          <scope ilk="function" name="headers" />
          <scope ilk="function" name="headers=" />
          <scope ilk="function" name="redirect" />
          <scope ilk="function" name="redirected_to" />
          <scope ilk="function" name="redirected_to=" />
          <scope ilk="function" name="redirected_to_method_params" />
          <scope ilk="function" name="redirected_to_method_params=" />
          <scope ilk="function" name="session" />
          <scope ilk="function" name="session=" />
          <scope ilk="function" name="template" />
          <scope ilk="function" name="template=" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_HEADERS" />
        </scope>
        <scope classrefs="StandardError" ilk="class" name="ActionControllerError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Base">
          <scope ilk="namespace" name="ActionController">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="inherited_with_action_controller" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
            </scope>
            <scope ilk="namespace" name="WsdlAction">
              <scope ilk="function" name="wsdl" />
              <variable attributes="__const__" citdl="String" name="SoapEncodingNs" />
              <variable attributes="__const__" citdl="String" name="SoapHttpTransport" />
              <variable attributes="__const__" citdl="String" name="SoapNs" />
              <variable attributes="__const__" citdl="String" name="WsdlNs" />
              <variable attributes="__const__" citdl="String" name="XsdNs" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="Actions">
            <scope classrefs="Object" ilk="class" name="ActionCacheFilter">
              <scope ilk="function" name="after" />
              <scope ilk="function" name="before" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="caches_action" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
            <scope ilk="function" name="expire_action" />
          </scope>
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="web_service_scaffold" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="ContainerError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="DispatcherError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope ilk="namespace" name="Fragments">
            <scope classrefs="ActionController::Caching::Fragments::MemoryStore" ilk="class" name="DRbStore">
              <scope ilk="function" name="address" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="ActionController::Caching::Fragments::UnthreadedFileStore" ilk="class" name="FileStore">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="ActionController::Caching::Fragments::MemoryStore" ilk="class" name="MemCacheStore">
              <scope ilk="function" name="addresses" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="ActionController::Caching::Fragments::UnthreadedMemoryStore" ilk="class" name="MemoryStore">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope ilk="namespace" name="ThreadSafety">
              <scope ilk="function" name="delete" />
              <scope ilk="function" name="delete_matched" />
              <scope ilk="function" name="read" />
              <scope ilk="function" name="write" />
            </scope>
            <scope classrefs="Object" ilk="class" name="UnthreadedFileStore">
              <scope ilk="function" name="cache_path" />
              <scope ilk="function" name="delete" />
              <scope ilk="function" name="delete_matched" />
              <scope ilk="function" name="read" />
              <scope ilk="function" name="write" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="Object" ilk="class" name="UnthreadedMemoryStore">
              <scope ilk="function" name="delete" />
              <scope ilk="function" name="delete_matched" />
              <scope ilk="function" name="read" />
              <scope ilk="function" name="write" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
            <scope ilk="function" name="cache_erb_fragment" />
            <scope ilk="function" name="expire_fragment" />
            <scope ilk="function" name="expire_matched_fragments" />
            <scope ilk="function" name="fragment_cache_key" />
            <scope ilk="function" name="read_fragment" />
            <scope ilk="function" name="write_fragment" />
          </scope>
          <scope ilk="namespace" name="Helpers">
            <scope ilk="function" name="method_parameter_input_fields" />
            <scope ilk="function" name="method_parameter_label" />
            <scope ilk="function" name="service_method_list" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Invocation">
            <scope ilk="function" name="api" />
            <scope ilk="function" name="api=" />
            <scope ilk="function" name="api_method" />
            <scope ilk="function" name="api_method=" />
            <scope ilk="function" name="method_named_params" />
            <scope ilk="function" name="method_named_params=" />
            <scope ilk="function" name="method_ordered_params" />
            <scope ilk="function" name="method_ordered_params=" />
            <scope ilk="function" name="protocol" />
            <scope ilk="function" name="protocol=" />
            <scope ilk="function" name="protocol_options" />
            <scope ilk="function" name="protocol_options=" />
            <scope ilk="function" name="service" />
            <scope ilk="function" name="service=" />
            <scope ilk="function" name="service_name" />
            <scope ilk="function" name="service_name=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="InvocationError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope ilk="namespace" name="Pages">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="cache_page" />
              <scope ilk="function" name="caches_page" />
              <scope ilk="function" name="expire_page" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="cache_page" />
            <scope ilk="function" name="expire_page" />
            <scope ilk="function" name="included" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Paginator">
            <scope classrefs="Object" ilk="class" name="Page">
              <scope ilk="function" name="first?" />
              <scope ilk="function" name="first_item" />
              <scope ilk="function" name="last?" />
              <scope ilk="function" name="last_item" />
              <scope ilk="function" name="next" />
              <scope ilk="function" name="number" />
              <scope ilk="function" name="offset" />
              <scope ilk="function" name="paginator" />
              <scope ilk="function" name="previous" />
              <scope ilk="function" name="to_i" />
              <scope ilk="function" name="to_param" />
              <scope ilk="function" name="to_sql" />
              <scope ilk="function" name="window" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Comparable" />
            </scope>
            <scope classrefs="Object" ilk="class" name="Window">
              <scope ilk="function" name="first" />
              <scope ilk="function" name="last" />
              <scope ilk="function" name="padding" />
              <scope ilk="function" name="padding=" />
              <scope ilk="function" name="page" />
              <scope ilk="function" name="pages" />
              <scope ilk="function" name="paginator" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope ilk="function" name="[]" />
            <scope ilk="function" name="controller" />
            <scope ilk="function" name="current" />
            <scope ilk="function" name="current_page" />
            <scope ilk="function" name="current_page=" />
            <scope ilk="function" name="each" />
            <scope ilk="function" name="first" />
            <scope ilk="function" name="first_page" />
            <scope ilk="function" name="has_page_number?" />
            <scope ilk="function" name="item_count" />
            <scope ilk="function" name="items_per_page" />
            <scope ilk="function" name="last" />
            <scope ilk="function" name="last_page" />
            <scope ilk="function" name="length" />
            <scope ilk="function" name="page_count" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope classrefs="SOAP::Mapping::Registry" ilk="class" name="Registry">
            <scope classrefs="Object" ilk="class" name="Map">
              <scope ilk="function" name="add" />
              <scope ilk="function" name="clear" />
              <scope ilk="function" name="find_mapped_obj_class" />
              <scope ilk="function" name="find_mapped_soap_class" />
              <scope ilk="function" name="init" />
              <scope ilk="function" name="obj2soap" />
              <scope ilk="function" name="soap2obj" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="SOAP::Mapping::ArrayFactory_" name="ArrayFactory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::Base64Factory_" name="Base64Factory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::BasetypeFactory_" name="BasetypeFactory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::DateTimeFactory_" name="DateTimeFactory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::HashFactory_" name="HashFactory" />
            <variable attributes="__const__" citdl="Array" name="RubyOriginalMap" />
            <variable attributes="__const__" citdl="Array" name="SOAPBaseMap" />
            <variable attributes="__const__" citdl="SOAP::Mapping::StringFactory_" name="StringFactory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::TypedArrayFactory_" name="TypedArrayFactory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::TypedStructFactory_" name="TypedStructFactory" />
            <variable attributes="__const__" citdl="SOAP::Mapping::URIFactory_" name="URIFactory" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="ScaffoldingError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope classrefs="SOAP::Mapping::Factory" ilk="class" name="SoapActiveRecordStructFactory">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="SOAP::Mapping::TraverseSupport" />
          </scope>
          <scope classrefs="SOAP::Mapping::Factory" ilk="class" name="SoapBase64Factory">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="SOAP::Mapping::TraverseSupport" />
          </scope>
          <scope classrefs="Object" ilk="class" name="SoapBinding">
            <scope ilk="function" name="element_binding" />
            <scope ilk="function" name="mapping" />
            <scope ilk="function" name="qname" />
            <scope ilk="function" name="qualified_type_name" />
            <scope ilk="function" name="type_name" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="SoapMarshaler">
            <scope ilk="function" name="annotate_arrays" />
            <scope ilk="function" name="lookup_type" />
            <scope ilk="function" name="namespace" />
            <scope ilk="function" name="register_type" />
            <scope ilk="function" name="registry" />
            <scope ilk="function" name="ruby_to_soap" />
            <scope ilk="function" name="soap_to_ruby" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class" name="SoapProtocol">
            <scope attributes="__classmethod__" ilk="function" name="create" />
            <scope ilk="function" name="marshaler" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="String" name="AWSEncoding" />
            <variable attributes="__const__" citdl="String" name="XSDEncoding" />
          </scope>
          <scope classrefs="SOAP::Mapping::Factory" ilk="class" name="SoapTypedArrayFactory">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="SOAP::Mapping::TraverseSupport" />
          </scope>
          <scope ilk="namespace" name="Subclasses">
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="included" />
          </scope>
          <scope classrefs="ActiveRecord::Observer" ilk="class" name="Sweeper">
            <scope attributes="__classmethod__" ilk="function" name="instance" />
            <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
            <scope ilk="function" name="after" />
            <scope ilk="function" name="before" />
            <scope ilk="function" name="controller" />
            <scope ilk="function" name="controller=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Reloadable" />
            <import symbol="Reloadable::Subclasses" />
            <import symbol="Singleton" />
          </scope>
          <scope ilk="namespace" name="Sweeping">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="cache_sweeper" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="WebServiceModel">
            <scope classrefs="Object" ilk="class" name="Container">
              <scope ilk="function" name="dispatching_mode" />
              <scope ilk="function" name="services" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="Object" ilk="class" name="Service">
              <scope ilk="function" name="api" />
              <scope ilk="function" name="api_methods" />
              <scope ilk="function" name="api_methods_full" />
              <scope ilk="function" name="object" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
          </scope>
          <scope classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class" name="XmlRpcProtocol">
            <scope attributes="__classmethod__" ilk="function" name="create" />
            <scope ilk="function" name="value_to_xmlrpc_wire_format" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="action_methods" />
          <scope attributes="__classmethod__" ilk="function" name="add_template_helper" />
          <scope attributes="__classmethod__" ilk="function" name="after_filter" />
          <scope attributes="__classmethod__" ilk="function" name="after_filters" />
          <scope attributes="__classmethod__" ilk="function" name="allow_concurrency" />
          <scope attributes="__classmethod__" ilk="function" name="allow_concurrency=" />
          <scope attributes="__classmethod__" ilk="function" name="append_after_filter" />
          <scope attributes="__classmethod__" ilk="function" name="append_around_filter" />
          <scope attributes="__classmethod__" ilk="function" name="append_before_filter" />
          <scope attributes="__classmethod__" ilk="function" name="around_filter" />
          <scope attributes="__classmethod__" ilk="function" name="asset_host" />
          <scope attributes="__classmethod__" ilk="function" name="asset_host=" />
          <scope attributes="__classmethod__" ilk="function" name="auto_complete_for" />
          <scope attributes="__classmethod__" ilk="function" name="before_filter" />
          <scope attributes="__classmethod__" ilk="function" name="before_filters" />
          <scope attributes="__classmethod__" ilk="function" name="benchmark" />
          <scope attributes="__classmethod__" ilk="function" name="cache_page" />
          <scope attributes="__classmethod__" ilk="function" name="cache_sweeper" />
          <scope attributes="__classmethod__" ilk="function" name="cached_session_options" />
          <scope attributes="__classmethod__" ilk="function" name="caches_action" />
          <scope attributes="__classmethod__" ilk="function" name="caches_page" />
          <scope attributes="__classmethod__" ilk="function" name="consider_all_requests_local" />
          <scope attributes="__classmethod__" ilk="function" name="consider_all_requests_local=" />
          <scope attributes="__classmethod__" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;NeatController&quot;.&#xA;" ilk="function" name="controller_class_name" signature="()" />
          <scope attributes="__classmethod__" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;neat&quot;.&#xA;" ilk="function" name="controller_name" signature="()" />
          <scope attributes="__classmethod__" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;one_module/two_module/neat&quot;.&#xA;" ilk="function" name="controller_path" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="debug_routes" />
          <scope attributes="__classmethod__" ilk="function" name="debug_routes=" />
          <scope attributes="__classmethod__" ilk="function" name="default_layout" />
          <scope attributes="__classmethod__" ilk="function" name="depend_on" />
          <scope attributes="__classmethod__" ilk="function" name="dependencies_on" />
          <scope attributes="__classmethod__" ilk="function" name="excluded_actions" />
          <scope attributes="__classmethod__" ilk="function" name="expire_page" />
          <scope attributes="__classmethod__" doc="Replace sensitive paramater data from the request log.&#xA;Filters paramaters that have any of the arguments as a&#xA;substring. Looks in all subhashes of the param hash for keys&#xA;to filter. If a block is given, each key and value of the&#xA;paramater hash and all subhashes is passed to it, the value&#xA;or key can be replaced using String#replace or similar&#xA;method." ilk="function" name="filter_parameter_logging" signature="(*filter_words, &amp;block) {|key, value| ...}" />
          <scope attributes="__classmethod__" ilk="function" name="fragment_cache_store" />
          <scope attributes="__classmethod__" ilk="function" name="fragment_cache_store=" />
          <scope attributes="__classmethod__" ilk="function" name="helper" />
          <scope attributes="__classmethod__" ilk="function" name="helper_attr" />
          <scope attributes="__classmethod__" ilk="function" name="helper_method" />
          <scope attributes="__classmethod__" doc="Return an array containing the names of public methods that&#xA;have been marked hidden from the action processor. By&#xA;default, all methods defined in ActionController::Base and&#xA;included modules are hidden. More methods can be hidden&#xA;using hide_actions." ilk="function" name="hidden_actions" signature="()" />
          <scope attributes="__classmethod__" doc="Hide each of the given methods from being callable as&#xA;actions." ilk="function" name="hide_action" signature="(*names)" />
          <scope attributes="__classmethod__" ilk="function" name="ignore_missing_templates" />
          <scope attributes="__classmethod__" ilk="function" name="ignore_missing_templates=" />
          <scope attributes="__classmethod__" ilk="function" name="in_place_edit_for" />
          <scope attributes="__classmethod__" ilk="function" name="included_actions" />
          <scope attributes="__classmethod__" ilk="function" name="inherited" signature="(child)" />
          <scope attributes="__classmethod__" ilk="function" name="inherited_with_action_controller" />
          <scope attributes="__classmethod__" ilk="function" name="layout" />
          <scope attributes="__classmethod__" ilk="function" name="layout_conditions" />
          <scope attributes="__classmethod__" ilk="function" name="logger" />
          <scope attributes="__classmethod__" ilk="function" name="logger=" />
          <scope attributes="__classmethod__" ilk="function" name="master_helper_module" />
          <scope attributes="__classmethod__" ilk="function" name="master_helper_module=" />
          <scope attributes="__classmethod__" ilk="function" name="model" />
          <scope attributes="__classmethod__" ilk="function" name="observer" />
          <scope attributes="__classmethod__" ilk="function" name="page_cache_directory" />
          <scope attributes="__classmethod__" ilk="function" name="page_cache_directory=" />
          <scope attributes="__classmethod__" ilk="function" name="page_cache_extension" />
          <scope attributes="__classmethod__" ilk="function" name="page_cache_extension=" />
          <scope attributes="__classmethod__" ilk="function" name="paginate" />
          <scope attributes="__classmethod__" ilk="function" name="param_parsers" />
          <scope attributes="__classmethod__" ilk="function" name="param_parsers=" />
          <scope attributes="__classmethod__" ilk="function" name="perform_caching" />
          <scope attributes="__classmethod__" ilk="function" name="perform_caching=" />
          <scope attributes="__classmethod__" ilk="function" name="prepend_after_filter" />
          <scope attributes="__classmethod__" ilk="function" name="prepend_around_filter" />
          <scope attributes="__classmethod__" ilk="function" name="prepend_before_filter" />
          <scope attributes="__classmethod__" ilk="function" name="process" />
          <scope attributes="__classmethod__" ilk="function" name="process_cgi" signature="(cgi = CGI.new, session_options = {})" />
          <scope attributes="__classmethod__" ilk="function" name="process_with_components" />
          <scope attributes="__classmethod__" ilk="function" name="process_with_exception" />
          <scope attributes="__classmethod__" ilk="function" name="protected_variables_cache" />
          <scope attributes="__classmethod__" ilk="function" name="protected_variables_cache=" />
          <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
          <scope attributes="__classmethod__" ilk="function" name="scaffold" />
          <scope attributes="__classmethod__" ilk="function" name="service" />
          <scope attributes="__classmethod__" ilk="function" name="session" />
          <scope attributes="__classmethod__" ilk="function" name="session_options" />
          <scope attributes="__classmethod__" ilk="function" name="session_options_for" />
          <scope attributes="__classmethod__" ilk="function" name="session_store" />
          <scope attributes="__classmethod__" ilk="function" name="session_store=" />
          <scope attributes="__classmethod__" ilk="function" name="silence" />
          <scope attributes="__classmethod__" ilk="function" name="skip_after_filter" />
          <scope attributes="__classmethod__" ilk="function" name="skip_before_filter" />
          <scope attributes="__classmethod__" ilk="function" name="template_class" />
          <scope attributes="__classmethod__" ilk="function" name="template_class=" />
          <scope attributes="__classmethod__" ilk="function" name="template_root" />
          <scope attributes="__classmethod__" ilk="function" name="template_root=" />
          <scope attributes="__classmethod__" ilk="function" name="uses_component_template_root" />
          <scope attributes="__classmethod__" ilk="function" name="verify" />
          <scope attributes="__classmethod__" ilk="function" name="view_class" />
          <scope attributes="__classmethod__" ilk="function" name="view_controller_internals" />
          <scope attributes="__classmethod__" ilk="function" name="view_controller_internals=" />
          <scope attributes="__classmethod__" ilk="function" name="view_root" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_api" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_api_without_require" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_dispatching_mode" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_dispatching_mode=" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_exception_reporting" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_exception_reporting=" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_scaffold" />
          <scope attributes="__classmethod__" ilk="function" name="wsdl_namespace" />
          <scope attributes="__classmethod__" ilk="function" name="wsdl_namespace=" />
          <scope attributes="__classmethod__" ilk="function" name="wsdl_service_name" />
          <scope attributes="__classmethod__" ilk="function" name="wsdl_service_name=" />
          <scope ilk="function" name="action_name" />
          <scope ilk="function" name="action_name=" />
          <scope ilk="function" name="after_action" />
          <scope ilk="function" name="allow_concurrency" />
          <scope ilk="function" name="allow_concurrency=" />
          <scope ilk="function" name="asset_host" />
          <scope ilk="function" name="asset_host=" />
          <scope ilk="function" name="assign_shortcuts" />
          <scope ilk="function" name="assign_shortcuts_with_flash" />
          <scope ilk="function" name="assigns" />
          <scope ilk="function" name="assigns=" />
          <scope ilk="function" name="before_action" />
          <scope ilk="function" name="component_request?" />
          <scope ilk="function" name="consider_all_requests_local" />
          <scope ilk="function" name="consider_all_requests_local=" />
          <scope doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;NeatController&quot;.&#xA;" ilk="function" name="controller_class_name" signature="()" />
          <scope doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;neat&quot;.&#xA;" ilk="function" name="controller_name" signature="()" />
          <scope ilk="function" name="debug_routes" />
          <scope ilk="function" name="debug_routes=" />
          <scope doc="Overwrite to implement a number of default options that all&#xA;url_for-based methods will use. The default options should&#xA;come in the form of a hash, just like the one you would use&#xA;for url_for directly. Example:  def&#xA;default_url_options(options)    { :project =&gt; @project.active? ? @project.url_name : &quot;unknown&quot; }&#xA;" ilk="function" name="default_url_options" signature="(options)" />
          <scope ilk="function" name="erase_redirect_results" />
          <scope ilk="function" name="erase_render_results" />
          <scope ilk="function" name="erase_results" />
          <scope doc="Sets a HTTP 1.1 Cache-Control header. Defaults to issuing&#xA;a &quot;private&quot; instruction, so that intermediate&#xA;caches shouldn&apos;t cache the response.Examples:  expires_in&#xA;20.minutes  expires_in 3.hours, :private =&gt; false&#xA;  expires in&#xA;3.hours, &apos;max-stale&apos; =&gt; 5.hours, :private =&gt; nil, :public =&gt; true&#xA;" ilk="function" name="expires_in" signature="(seconds, options = {})" />
          <scope doc="Sets a HTTP 1.1 Cache-Control header&#xA;of &quot;no-cache&quot; so no caching should occur by the&#xA;browser or intermediate caches (like caching proxy servers)." ilk="function" name="expires_now" signature="(" />
          <scope ilk="function" name="flash" />
          <scope ilk="function" name="flash_with_components" />
          <scope ilk="function" name="flash_without_components" />
          <scope ilk="function" name="fragment_cache_store" />
          <scope ilk="function" name="headers" />
          <scope ilk="function" name="headers=" />
          <scope ilk="function" name="ignore_missing_templates" />
          <scope ilk="function" name="ignore_missing_templates=" />
          <scope ilk="function" name="included" />
          <scope ilk="function" name="keep_flash" />
          <scope ilk="function" name="logger" />
          <scope ilk="function" name="logger=" />
          <scope ilk="function" name="master_helper_module" />
          <scope ilk="function" name="master_helper_module=" />
          <scope ilk="function" name="page_cache_directory" />
          <scope ilk="function" name="page_cache_directory=" />
          <scope ilk="function" name="page_cache_extension" />
          <scope ilk="function" name="page_cache_extension=" />
          <scope ilk="function" name="param_parsers" />
          <scope ilk="function" name="param_parsers=" />
          <scope ilk="function" name="params" />
          <scope ilk="function" name="params=" />
          <scope ilk="function" name="parent_controller" />
          <scope ilk="function" name="parent_controller=" />
          <scope ilk="function" name="perform_action_with_filters" />
          <scope ilk="function" name="perform_action_without_benchmark" />
          <scope ilk="function" name="perform_action_without_rescue" />
          <scope ilk="function" name="perform_caching" />
          <scope ilk="function" name="perform_caching=" />
          <scope ilk="function" name="perform_invocation" />
          <scope ilk="function" name="perform_invocation_without_interception" />
          <scope ilk="function" name="process" />
          <scope ilk="function" name="process_cgi" signature="(cgi = CGI.new, session_options = {})" />
          <scope ilk="function" name="process_cleanup_with_flash" />
          <scope ilk="function" name="process_cleanup_without_filters" />
          <scope ilk="function" name="process_with_components" />
          <scope ilk="function" name="process_with_filters" />
          <scope ilk="function" name="process_without_filters" />
          <scope ilk="function" name="process_without_session_management_support" />
          <scope ilk="function" name="protected_variables_cache" />
          <scope ilk="function" name="protected_variables_cache=" />
          <scope ilk="function" name="redirect_to" signature="(options = {}, *parameters_for_method_reference)" />
          <scope ilk="function" name="redirect_to_path" />
          <scope ilk="function" name="redirect_to_url" />
          <scope ilk="function" name="render" signature="(options = nil, deprecated_status = nil, &amp;block)" />
          <scope ilk="function" name="render_action" />
          <scope ilk="function" name="render_component" />
          <scope ilk="function" name="render_component_as_string" />
          <scope ilk="function" name="render_file" />
          <scope ilk="function" name="render_javascript" />
          <scope ilk="function" name="render_nothing" />
          <scope ilk="function" name="render_partial" />
          <scope ilk="function" name="render_partial_collection" />
          <scope ilk="function" name="render_template" />
          <scope ilk="function" name="render_text" />
          <scope doc="Renders according to the same rules as render, but returns&#xA;the result in a string instead of sending it as the response&#xA;body to the browser." ilk="function" name="render_to_string" signature="(options = nil, &amp;block)" />
          <scope ilk="function" name="render_with_layout" />
          <scope ilk="function" name="render_with_no_layout" />
          <scope ilk="function" name="render_without_benchmark" />
          <scope ilk="function" name="render_without_layout" />
          <scope ilk="function" name="render_xml" />
          <scope ilk="function" name="rendered_action_cache" />
          <scope ilk="function" name="rendered_action_cache=" />
          <scope ilk="function" name="request" />
          <scope ilk="function" name="request=" />
          <scope doc="Resets the session by clearing out all the objects stored&#xA;within and initializing a new session object." ilk="function" name="reset_session" signature="(" />
          <scope ilk="function" name="respond_to" />
          <scope ilk="function" name="response" />
          <scope ilk="function" name="response=" />
          <scope ilk="function" name="rewrite_options" />
          <scope ilk="function" name="session" />
          <scope ilk="function" name="session=" />
          <scope ilk="function" name="session_enabled?" />
          <scope ilk="function" name="template_class" />
          <scope ilk="function" name="template_class=" />
          <scope ilk="function" name="template_root" />
          <scope ilk="function" name="template_root=" />
          <scope ilk="function" name="url_for" signature="(options = {}, *parameters_for_method_reference)" />
          <scope ilk="function" name="view_controller_internals" />
          <scope ilk="function" name="view_controller_internals=" />
          <scope ilk="function" name="web_service_dispatching_mode" />
          <scope ilk="function" name="web_service_dispatching_mode=" />
          <scope ilk="function" name="web_service_exception_reporting" />
          <scope ilk="function" name="web_service_exception_reporting=" />
          <scope ilk="function" name="wsdl_namespace" />
          <scope ilk="function" name="wsdl_namespace=" />
          <scope ilk="function" name="wsdl_service_name" />
          <scope ilk="function" name="wsdl_service_name=" />
          <import symbol="ActionController::Benchmarking" />
          <import symbol="ActionController::Caching" />
          <import symbol="ActionController::Caching::Actions" />
          <import symbol="ActionController::Caching::Fragments" />
          <import symbol="ActionController::Caching::Pages" />
          <import symbol="ActionController::Caching::Sweeping" />
          <import symbol="ActionController::Components" />
          <import symbol="ActionController::Components::InstanceMethods" />
          <import symbol="ActionController::Cookies" />
          <import symbol="ActionController::Dependencies" />
          <import symbol="ActionController::Filters" />
          <import symbol="ActionController::Filters::InstanceMethods" />
          <import symbol="ActionController::Flash" />
          <import symbol="ActionController::Flash::InstanceMethods" />
          <import symbol="ActionController::Helpers" />
          <import symbol="ActionController::Layout" />
          <import symbol="ActionController::Macros::AutoComplete" />
          <import symbol="ActionController::Macros::InPlaceEditing" />
          <import symbol="ActionController::MimeResponds" />
          <import symbol="ActionController::MimeResponds::InstanceMethods" />
          <import symbol="ActionController::Pagination" />
          <import symbol="ActionController::Rescue" />
          <import symbol="ActionController::Scaffolding" />
          <import symbol="ActionController::SessionManagement" />
          <import symbol="ActionController::Streaming" />
          <import symbol="ActionController::Verification" />
          <import symbol="ActionWebService::Container::Delegated" />
          <import symbol="ActionWebService::Container::Delegated::InstanceMethods" />
          <import symbol="ActionWebService::Container::Direct" />
          <import symbol="ActionWebService::Dispatcher" />
          <import symbol="ActionWebService::Dispatcher::ActionController" />
          <import symbol="ActionWebService::Dispatcher::ActionController::InstanceMethods" />
          <import symbol="ActionWebService::Dispatcher::InstanceMethods" />
          <import symbol="ActionWebService::Invocation" />
          <import symbol="ActionWebService::Invocation::InstanceMethods" />
          <import symbol="ActionWebService::Protocol::Discovery" />
          <import symbol="ActionWebService::Protocol::Discovery::InstanceMethods" />
          <import symbol="ActionWebService::Protocol::Soap" />
          <import symbol="ActionWebService::Protocol::XmlRpc" />
          <import symbol="ActionWebService::Scaffolding" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_OPTIONS" />
          <variable attributes="__const__" citdl="String" name="DEFAULT_RENDER_STATUS_CODE" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_SEND_FILE_OPTIONS" />
          <variable attributes="__const__" citdl="Hash" name="OPTIONS" />
        </scope>
        <scope ilk="namespace" name="Benchmarking">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Log and benchmark the workings of a single block and silence&#xA;whatever logging that may have happened inside it (unless&#xA;use_silence is set to false).The benchmark is only recorded&#xA;if the current level of the logger matches the&#xA;log_level, which makes it easy to include benchmarking&#xA;statements in production software that will remain&#xA;inexpensive because the benchmark will only be conducted if&#xA;the log level is low enough." ilk="function" name="benchmark" signature="(title, log_level = Logger::DEBUG, use_silence = true) {|| ...}" />
            <scope doc="Silences the logger for the duration of the block." ilk="function" name="silence" signature="() {|| ...}" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
          <scope ilk="function" name="perform_action_with_benchmark" />
          <scope ilk="function" name="render_with_benchmark" />
        </scope>
        <scope ilk="namespace" name="Caching">
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
        </scope>
        <scope classrefs="ActionController::AbstractRequest" ilk="class" name="CgiRequest">
          <scope ilk="function" name="cgi" />
          <scope ilk="function" name="cgi=" />
          <scope ilk="function" name="method_missing" />
          <scope ilk="function" name="query_string" />
          <scope ilk="function" name="session_options" />
          <scope ilk="function" name="session_options=" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_SESSION_OPTIONS" />
        </scope>
        <scope classrefs="ActionController::AbstractResponse" ilk="class" name="CgiResponse">
          <scope ilk="function" name="out" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_HEADERS" />
        </scope>
        <scope ilk="namespace" name="CodeGeneration">
          <scope classrefs="Object" ilk="class" name="CodeGenerator">
            <scope ilk="function" name="&lt;&lt;" />
            <scope ilk="function" name="indent" />
            <scope ilk="function" name="line" />
            <scope ilk="function" name="locals" />
            <scope ilk="function" name="locals=" />
            <scope ilk="function" name="method_missing" />
            <scope ilk="function" name="share_locals_with" />
            <scope ilk="function" name="source" />
            <scope ilk="function" name="source=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Array" name="BeginKeywords" />
            <variable attributes="__const__" citdl="Array" name="FieldsToDuplicate" />
            <variable attributes="__const__" citdl="Array" name="Keywords" />
            <variable attributes="__const__" citdl="Array" name="ResumeKeywords" />
          </scope>
          <scope classrefs="StandardError" ilk="class" name="GenerationError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope classrefs="ActionController::CodeGeneration::CodeGenerator" ilk="class" name="GenerationGenerator">
            <scope ilk="function" name="add_segment" />
            <scope ilk="function" name="after" />
            <scope ilk="function" name="after=" />
            <scope ilk="function" name="before" />
            <scope ilk="function" name="before=" />
            <scope ilk="function" name="check_conditions" />
            <scope ilk="function" name="continue" />
            <scope ilk="function" name="current" />
            <scope ilk="function" name="current=" />
            <scope ilk="function" name="expire_for_keys" />
            <scope ilk="function" name="finish" />
            <scope ilk="function" name="go" />
            <scope ilk="function" name="hash_name" />
            <scope ilk="function" name="hash_value" />
            <scope ilk="function" name="local_name" />
            <scope ilk="function" name="segments" />
            <scope ilk="function" name="segments=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Array" name="Attributes" />
            <variable attributes="__const__" citdl="Array" name="BeginKeywords" />
            <variable attributes="__const__" citdl="Array" name="FieldsToDuplicate" />
            <variable attributes="__const__" citdl="Array" name="Keywords" />
            <variable attributes="__const__" citdl="Array" name="ResumeKeywords" />
          </scope>
          <scope classrefs="ActionController::CodeGeneration::CodeGenerator" ilk="class" name="RecognitionGenerator">
            <scope ilk="function" name="after" />
            <scope ilk="function" name="after=" />
            <scope ilk="function" name="before" />
            <scope ilk="function" name="before=" />
            <scope ilk="function" name="constant_result" />
            <scope ilk="function" name="constants=" />
            <scope ilk="function" name="continue" />
            <scope ilk="function" name="current" />
            <scope ilk="function" name="current=" />
            <scope ilk="function" name="depth" />
            <scope ilk="function" name="depth=" />
            <scope ilk="function" name="finish" />
            <scope ilk="function" name="finish_statement" />
            <scope ilk="function" name="finish_statement=" />
            <scope ilk="function" name="go" />
            <scope ilk="function" name="if_next_matches" />
            <scope ilk="function" name="index_name" />
            <scope ilk="function" name="move_ahead" />
            <scope ilk="function" name="move_ahead=" />
            <scope ilk="function" name="move_forward" />
            <scope ilk="function" name="next_segment" />
            <scope ilk="function" name="path_name" />
            <scope ilk="function" name="result" />
            <scope ilk="function" name="results" />
            <scope ilk="function" name="results=" />
            <scope ilk="function" name="segment_name" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Array" name="Attributes" />
            <variable attributes="__const__" citdl="Array" name="BeginKeywords" />
            <variable attributes="__const__" citdl="Array" name="FieldsToDuplicate" />
            <variable attributes="__const__" citdl="Array" name="Keywords" />
            <variable attributes="__const__" citdl="Array" name="ResumeKeywords" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Source">
            <scope ilk="function" name="&lt;&lt;" />
            <scope ilk="function" name="indent" />
            <scope ilk="function" name="indentation_level" />
            <scope ilk="function" name="line" />
            <scope ilk="function" name="lines" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="String" name="IndentationString" />
          </scope>
        </scope>
        <scope ilk="namespace" name="Components">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="process_with_components" />
            <scope doc="Set the template root to be one directory behind the root&#xA;dir of the controller. Examples:  /code/weblog/components/admin/users_controller.rb with Admin::UsersController&#xA;    will use /code/weblog/components as template root&#xA;    and find templates&#xA;in /code/weblog/components/admin/users/  /code/weblog/components/admin/parties/users_controller.rb with Admin::Parties::UsersController&#xA;" ilk="function" name="uses_component_template_root" signature="()" />
          </scope>
          <scope ilk="namespace" name="InstanceMethods">
            <scope ilk="function" name="flash_with_components" />
            <scope ilk="function" name="process_with_components" />
            <scope doc="Renders the component specified as the response for the&#xA;current method" ilk="function" name="render_component" signature="(options)" />
            <scope doc="Returns the component response as a string" ilk="function" name="render_component_as_string" signature="(options)" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
        </scope>
        <scope classrefs="Hash" ilk="class" name="CookieJar">
          <import symbol="ActiveSupport::CoreExtensions::Hash::Conversions" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::Diff" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::IndifferentAccess" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::Keys" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::ReverseMerge" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Enumerable" />
          <variable attributes="__const__" citdl="Hash" name="XML_FORMATTING" />
          <variable attributes="__const__" citdl="Hash" name="XML_TYPE_NAMES" />
        </scope>
        <scope ilk="namespace" name="Cookies">
          <scope doc="Deprecated cookie writer method" ilk="function" name="cookie" signature="(*options)" />
          <scope doc="Returns the cookie container, which operates as described&#xA;above." ilk="function" name="cookies" signature="()" />
        </scope>
        <scope ilk="namespace" name="Dependencies">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="depend_on" />
            <scope ilk="function" name="dependencies_on" />
            <scope ilk="function" name="model" />
            <scope ilk="function" name="observer" />
            <scope ilk="function" name="service" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="DoubleRenderError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="String" name="DEFAULT_MESSAGE" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Filters">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Alias for #append_after_filter" ilk="function" name="after_filter" signature="(*filters, &amp;block)" />
            <scope ilk="function" name="after_filters" />
            <scope doc="The passed filters will be appended to the array of filters&#xA;that run &lt;em&gt;after&lt;/em&gt; actions on this controller are&#xA;performed." ilk="function" name="append_after_filter" signature="(*filters, &amp;block)" />
            <scope doc="If you append_around_filter A.new, B.new, the filter chain&#xA;looks like  B#before    A#before      # run the action&#xA;    A#after  B#afterWith around filters which yield to the&#xA;action block, #before and #after are the code before and&#xA;after the yield." ilk="function" name="append_around_filter" signature="(*filters, &amp;block)" />
            <scope doc="The passed filters will be appended to the filter_chain and&#xA;will execute before the action on this controller is&#xA;performed." ilk="function" name="append_before_filter" signature="(*filters, &amp;block)" />
            <scope doc="Alias for #append_around_filter" ilk="function" name="around_filter" signature="(*filters, &amp;block)" />
            <scope doc="Alias for #append_before_filter" ilk="function" name="before_filter" signature="(*filters, &amp;block)" />
            <scope ilk="function" name="before_filters" />
            <scope ilk="function" name="excluded_actions" />
            <scope ilk="function" name="included_actions" />
            <scope doc="The passed filters will be prepended to the array of filters&#xA;that run &lt;em&gt;after&lt;/em&gt; actions on this controller are&#xA;performed." ilk="function" name="prepend_after_filter" signature="(*filters, &amp;block)" />
            <scope doc="If you prepend_around_filter A.new, B.new, the filter chain&#xA;looks like:  A#before    B#before      # run the action&#xA;    B#after  A#afterWith around filters which yield to the&#xA;action block, #before and #after are the code before and&#xA;after the yield." ilk="function" name="prepend_around_filter" signature="(*filters, &amp;block)" />
            <scope doc="The passed filters will be prepended to the filter_chain and&#xA;will execute before the action on this controller is&#xA;performed." ilk="function" name="prepend_before_filter" signature="(*filters, &amp;block)" />
            <scope doc="Removes the specified filters from the after filter chain.&#xA;Note that this only works for skipping method-reference&#xA;filters, not procs. This is especially useful for managing&#xA;the chain in inheritance hierarchies where only one out of&#xA;many sub-controllers need a different hierarchy.You can&#xA;control the actions to skip the filter for with&#xA;the :only&lt;/tt&gt; and &lt;tt&gt;:except options, just like when you&#xA;apply the filters." ilk="function" name="skip_after_filter" signature="(*filters)" />
            <scope doc="Removes the specified filters from the before filter chain.&#xA;Note that this only works for skipping method-reference&#xA;filters, not procs. This is especially useful for managing&#xA;the chain in inheritance hierarchies where only one out of&#xA;many sub-controllers need a different hierarchy.You can&#xA;control the actions to skip the filter for with&#xA;the :only&lt;/tt&gt; and &lt;tt&gt;:except options, just like when you&#xA;apply the filters." ilk="function" name="skip_before_filter" signature="(*filters)" />
          </scope>
          <scope ilk="namespace" name="InstanceMethods">
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="after_action" />
            <scope ilk="function" name="before_action" />
            <scope ilk="function" name="included" />
            <scope ilk="function" name="perform_action_with_filters" />
            <scope ilk="function" name="process_with_filters" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
        </scope>
        <scope ilk="namespace" name="Flash">
          <scope classrefs="Hash" ilk="class" name="FlashHash">
            <scope doc="Marks the entire flash or a single flash entry to be&#xA;discarded by the end of the current action    flash.keep                 # keep entire flash available for the next action&#xA;    flash.discard(:warning)    # discard&#xA;the &quot;warning&quot; entry (it&apos;ll still be available for&#xA;the current action)" ilk="function" name="discard" signature="(k = nil)" />
            <scope doc="Keeps either the entire current flash or a specific flash&#xA;entry available for the next action:   flash.keep            # keeps the entire flash&#xA;   flash.keep(:notice)   # keeps only&#xA;the &quot;notice&quot; entry, the rest of the flash is&#xA;discarded" ilk="function" name="keep" signature="(k = nil)" />
            <scope doc="Sets a flash that will not be available to the next&#xA;action, only to the current.    flash.now[:message] = &quot;Hello current action&quot;&#xA;This method enables you to use the flash as a central&#xA;messaging system in your app. When you need to pass an&#xA;object to the next action, you use the standard flash&#xA;assign ([]=&lt;/tt&gt;). When you need to pass an object to the&#xA;current action, you use &lt;tt&gt;now, and your object will vanish&#xA;when the current action is done." ilk="function" name="now" signature="()" />
            <scope ilk="function" name="sweep" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::Conversions" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::Diff" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::IndifferentAccess" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::Keys" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::ReverseMerge" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
            <variable attributes="__const__" citdl="Hash" name="XML_FORMATTING" />
            <variable attributes="__const__" citdl="Hash" name="XML_TYPE_NAMES" />
          </scope>
          <scope classrefs="Object" ilk="class" name="FlashNow">
            <scope ilk="function" name="[]" />
            <scope ilk="function" name="[]=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="InstanceMethods">
            <scope ilk="function" name="assign_shortcuts_with_flash" />
            <scope ilk="function" name="flash" />
            <scope ilk="function" name="keep_flash" />
            <scope ilk="function" name="process_cleanup_with_flash" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" signature="(base)" />
          <scope ilk="function" name="included" signature="(base)" />
        </scope>
        <scope ilk="namespace" name="Helpers">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="add_template_helper" />
            <scope doc="Declare a helper:  helper :foorequires &apos;foo_helper&apos; and&#xA;includes FooHelper in the template class.  helper FooHelper&#xA;includes FooHelper in the template class.  helper { def&#xA;foo() &quot;#{bar} is the very best&quot; end }evaluates the&#xA;block in the template class, adding method #foo.  helper(:three, BlindHelper) { def mice() &apos;mice&apos; end }&#xA;" ilk="function" name="helper" signature="(*args, &amp;block)" />
            <scope doc="Declare a controller attribute as a helper. For example,&#xA;  helper_attr :name  attr_accessor :namemakes the name and&#xA;name= controller methods available in the view. The is a&#xA;convenience wrapper for helper_method." ilk="function" name="helper_attr" signature="(*attrs)" />
            <scope doc="Declare a controller method as a helper. For example,&#xA;  helper_method :link_to  def link_to(name, options) ... end&#xA;makes the link_to controller method available in the view." ilk="function" name="helper_method" signature="(*methods)" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope ilk="namespace" name="Layout">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="default_layout" />
            <scope doc="If a layout is specified, all rendered actions will have&#xA;their result rendered when the layoutyield&apos;s. This layout&#xA;can itself depend on instance variables assigned during&#xA;action performance and have access to them as any normal&#xA;template would." ilk="function" name="layout" signature="(template_name, conditions = {})" />
            <scope ilk="function" name="layout_conditions" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="active_layout" />
          <scope ilk="function" name="included" />
          <scope ilk="function" name="render_with_a_layout" />
        </scope>
        <scope ilk="namespace" name="Macros">
          <scope ilk="namespace" name="AutoComplete">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="auto_complete_for" signature="(object, method, options = {})" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="InPlaceEditing">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="in_place_edit_for" signature="(object, attribute, options = {})" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
        </scope>
        <scope ilk="namespace" name="MimeResponds">
          <scope ilk="namespace" name="InstanceMethods">
            <scope doc="Without web-service support, an action which collects the&#xA;data for displaying a list of people might look something&#xA;like this:  def index    @people = Person.find(:all)&#xA;  endHere&apos;s the same action, with web-service support baked&#xA;in:  def index    @people = Person.find(:all)    respond_to&#xA;do |format|" ilk="function" name="respond_to" signature="(*types, &amp;block)" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Responder">
            <scope ilk="function" name="all" />
            <scope ilk="function" name="any" />
            <scope ilk="function" name="atom" />
            <scope ilk="function" name="custom" />
            <scope ilk="function" name="html" />
            <scope ilk="function" name="js" />
            <scope ilk="function" name="respond" />
            <scope ilk="function" name="rss" />
            <scope ilk="function" name="xml" />
            <scope ilk="function" name="yaml" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_BLOCKS" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="MissingFile">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="MissingTemplate">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Pagination">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="paginate" signature="(collection_id, options={})" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope attributes="__classmethod__" ilk="function" name="validate_options!" />
          <scope doc="Returns the total number of items in the collection to be&#xA;paginated for the model&lt;/tt&gt; and given &lt;tt&gt;conditions.&#xA;Override this method to implement a custom counter." ilk="function" name="count_collection_for_pagination" signature="(model, options)" />
          <scope ilk="function" name="create_paginators_and_retrieve_collections" />
          <scope doc="Returns a collection of items for the given&#xA;model&lt;/tt&gt; and +options[conditions]+, ordered&#xA;by +options[order]+, for the current page in the&#xA;given &lt;tt&gt;paginator. Override this method to implement a&#xA;custom finder." ilk="function" name="find_collection_for_pagination" signature="(model, options, paginator)" />
          <scope ilk="function" name="included" />
          <scope ilk="function" name="paginate" signature="(collection_id, options={})" />
          <scope ilk="function" name="validate_options!" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_OPTIONS" />
          <variable attributes="__const__" citdl="Hash" name="OPTIONS" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="RedirectBackError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="String" name="DEFAULT_MESSAGE" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Rescue">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="process_with_exception" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
          <scope doc="Overwrite to expand the meaning of a local request in order&#xA;to show local rescues on other occurrences than the remote&#xA;IP being 127.0.0.1. For example, this could include the IP&#xA;of the developer machine when debugging remotely." ilk="function" name="local_request?" signature="(" />
          <scope doc="Overwrite to implement custom logging of errors. By default&#xA;logs as fatal." ilk="function" name="log_error" signature="(exception)" />
          <scope doc="Exception handler called when the performance of an action&#xA;raises an exception." ilk="function" name="rescue_action" signature="(exception)" />
          <scope doc="Overwrite to implement public exception handling (for&#xA;requests answering false to local_request?)." ilk="function" name="rescue_action_in_public" signature="(exception)" />
          <scope doc="Renders a detailed diagnostics screen on action exceptions." ilk="function" name="rescue_action_locally" signature="(exception)" />
        </scope>
        <scope ilk="namespace" name="Routing">
          <scope classrefs="Object" ilk="class" name="Component">
            <scope attributes="__classmethod__ __ctor__" ilk="function" name="new" />
            <scope ilk="function" name="dynamic?" />
            <scope ilk="function" name="key" />
            <scope ilk="function" name="optional?" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionController::Routing::DynamicComponent" ilk="class" name="ControllerComponent">
            <scope attributes="__classmethod__" ilk="function" name="assign_controller" />
            <scope attributes="__classmethod__" ilk="function" name="attempt_load" />
            <scope attributes="__classmethod__" ilk="function" name="safe_load_paths" />
            <scope attributes="__classmethod__" ilk="function" name="traverse_to_controller" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionController::Routing::Component" ilk="class" name="DynamicComponent">
            <scope ilk="function" name="add_segments_to" />
            <scope ilk="function" name="assign_default" />
            <scope ilk="function" name="assign_result" />
            <scope ilk="function" name="condition" />
            <scope ilk="function" name="condition=" />
            <scope ilk="function" name="default" />
            <scope ilk="function" name="default=" />
            <scope ilk="function" name="default_check" />
            <scope ilk="function" name="recognition_check" />
            <scope ilk="function" name="write_continue_generation" />
            <scope ilk="function" name="write_dropout_generation" />
            <scope ilk="function" name="write_generation" />
            <scope ilk="function" name="write_recognition" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="NamedRoutes">
            <scope attributes="__classmethod__" ilk="function" name="clear" />
            <scope attributes="__classmethod__" ilk="function" name="define_hash_access_method" />
            <scope attributes="__classmethod__" ilk="function" name="hash_access_name" />
            <scope attributes="__classmethod__" ilk="function" name="install" />
            <scope attributes="__classmethod__" ilk="function" name="known_hash_for_route" />
            <scope attributes="__classmethod__" ilk="function" name="name_route" />
            <scope attributes="__classmethod__" ilk="function" name="url_helper_name" />
            <scope ilk="function" name="clear" />
            <scope ilk="function" name="define_hash_access_method" />
            <scope ilk="function" name="hash_access_name" />
            <scope ilk="function" name="install" />
            <scope ilk="function" name="known_hash_for_route" />
            <scope ilk="function" name="name_route" />
            <scope ilk="function" name="url_helper_name" />
            <variable attributes="__const__" citdl="Array" name="Helpers" />
          </scope>
          <scope classrefs="ActionController::Routing::DynamicComponent" ilk="class" name="PathComponent">
            <scope classrefs="Array" ilk="class" name="Result">
              <scope attributes="__classmethod__" ilk="function" name="new_escaped" />
              <import symbol="ActiveSupport::CoreExtensions::Array::Conversions" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Enumerable" />
            </scope>
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Route">
            <scope ilk="function" name="add_default_requirements" />
            <scope ilk="function" name="components" />
            <scope ilk="function" name="components=" />
            <scope ilk="function" name="configure_components" />
            <scope ilk="function" name="defaults" />
            <scope ilk="function" name="extra_keys" />
            <scope ilk="function" name="initialize_components" />
            <scope ilk="function" name="initialize_hashes" />
            <scope ilk="function" name="initialize_keys" />
            <scope ilk="function" name="keys" />
            <scope ilk="function" name="known" />
            <scope ilk="function" name="known=" />
            <scope ilk="function" name="matches_controller?" />
            <scope ilk="function" name="options" />
            <scope ilk="function" name="path" />
            <scope ilk="function" name="write_generation" />
            <scope ilk="function" name="write_recognition" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="RouteSet">
            <scope ilk="function" name="categories" />
            <scope ilk="function" name="categorize_routes" />
            <scope ilk="function" name="connect" />
            <scope ilk="function" name="controller_to_selector" />
            <scope ilk="function" name="draw" />
            <scope ilk="function" name="each" />
            <scope ilk="function" name="empty?" />
            <scope ilk="function" name="extra_keys" />
            <scope ilk="function" name="generate" />
            <scope ilk="function" name="generate_default_path" />
            <scope ilk="function" name="generate_path" />
            <scope ilk="function" name="generation_code_for" />
            <scope ilk="function" name="known_controllers" />
            <scope ilk="function" name="method_missing" />
            <scope ilk="function" name="named_route" />
            <scope ilk="function" name="recognition_failed" />
            <scope ilk="function" name="recognize" />
            <scope ilk="function" name="recognize!" />
            <scope ilk="function" name="reload" />
            <scope ilk="function" name="routes" />
            <scope ilk="function" name="write_generation" />
            <scope ilk="function" name="write_recognition" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionController::Routing::Component" ilk="class" name="StaticComponent">
            <scope ilk="function" name="value" />
            <scope ilk="function" name="write_generation" />
            <scope ilk="function" name="write_recognition" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="controller_relative_to" signature="(controller, previous)" />
          <scope attributes="__classmethod__" ilk="function" name="expiry_hash" />
          <scope attributes="__classmethod__" ilk="function" name="extract_parameter_value" />
          <scope attributes="__classmethod__" ilk="function" name="test_condition" />
          <scope attributes="__classmethod__" ilk="function" name="treat_hash" />
          <scope ilk="function" name="controller_relative_to" signature="(controller, previous)" />
          <scope ilk="function" name="expiry_hash" />
          <scope ilk="function" name="extract_parameter_value" />
          <scope ilk="function" name="test_condition" />
          <scope ilk="function" name="treat_hash" />
          <variable attributes="__const__" citdl="ActionController::Routing::RouteSet" name="Routes" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="RoutingError">
          <scope ilk="function" name="failures" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Scaffolding">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Adds a swath of generic CRUD actions to the controller. The&#xA;model_id&lt;/tt&gt; is automatically converted into a class name&#xA;unless one is specifically provide&#xA;through &lt;tt&gt;options[:class_name]&lt;/tt&gt;. So &lt;tt&gt;scaffold :post&#xA;would use Post as the class and @post/@posts for the&#xA;instance variables." ilk="function" name="scaffold" signature="(model_id, options = {})" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope ilk="namespace" name="SessionManagement">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="cached_session_options" />
            <scope doc="Specify how sessions ought to be managed for a subset of the&#xA;actions on the controller. Like filters, you can&#xA;specify :only&lt;/tt&gt; and &lt;tt&gt;:except clauses to restrict the&#xA;subset, otherwise options apply to all actions on this&#xA;controller.The session options are inheritable, as well, so&#xA;if you specify them in a parent controller, they apply to&#xA;controllers that extend the parent." ilk="function" name="session" signature="(*args)" />
            <scope doc="Returns the hash used to configure the session. Example use:&#xA;  ActionController::Base.session_options[:session_secure] = true # session only available over HTTPS&#xA;" ilk="function" name="session_options" signature="()" />
            <scope ilk="function" name="session_options_for" />
            <scope doc="Returns the session store class currently used." ilk="function" name="session_store" signature="()" />
            <scope doc="Set the session store to be used for keeping the session&#xA;data between requests. The default is using the file&#xA;system, but you can also specify one of the other included&#xA;stores (:active_record_store, :drb_store, :mem_cache_store, or :memory_store) or use your own class.&#xA;" ilk="function" name="session_store=" signature="(store)" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
          <scope ilk="function" name="process_with_session_management_support" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="SessionOverflowError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="String" name="DEFAULT_MESSAGE" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="SessionRestoreError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Streaming">
          <scope ilk="function" name="send_data" signature="(data, options = {})" />
          <scope ilk="function" name="send_file" signature="(path, options = {})" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_SEND_FILE_OPTIONS" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="UnknownAction">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActionController::ActionControllerError" ilk="class" name="UnknownController">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="UrlRewriter">
          <scope ilk="function" name="rewrite" />
          <scope ilk="function" name="to_str" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Array" name="RESERVED_OPTIONS" />
        </scope>
        <scope ilk="namespace" name="Verification">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="verify" signature="(options={})" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
      </scope>
      <scope ilk="namespace" name="ActionMailer">
        <scope ilk="namespace" name="AdvAttrAccessor">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="adv_attr_accessor" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Base">
          <scope ilk="namespace" name="Subclasses">
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="included" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="add_template_helper" />
          <scope attributes="__classmethod__" ilk="function" name="adv_attr_accessor" />
          <scope attributes="__classmethod__" ilk="function" name="default_charset" />
          <scope attributes="__classmethod__" ilk="function" name="default_charset=" />
          <scope attributes="__classmethod__" ilk="function" name="default_content_type" />
          <scope attributes="__classmethod__" ilk="function" name="default_content_type=" />
          <scope attributes="__classmethod__" ilk="function" name="default_implicit_parts_order" />
          <scope attributes="__classmethod__" ilk="function" name="default_implicit_parts_order=" />
          <scope attributes="__classmethod__" ilk="function" name="default_mime_version" />
          <scope attributes="__classmethod__" ilk="function" name="default_mime_version=" />
          <scope attributes="__classmethod__" doc="Deliver the given mail object directly. This can be used to&#xA;deliver a preconstructed mail object, like:  email = MyMailer.create_some_mail(parameters)&#xA;  email.set_some_obscure_header &quot;frobnicate&quot;&#xA;  MyMailer.deliver(email)" ilk="function" name="deliver" signature="(mail)" />
          <scope attributes="__classmethod__" ilk="function" name="deliveries" />
          <scope attributes="__classmethod__" ilk="function" name="deliveries=" />
          <scope attributes="__classmethod__" ilk="function" name="delivery_method" />
          <scope attributes="__classmethod__" ilk="function" name="delivery_method=" />
          <scope attributes="__classmethod__" ilk="function" name="helper" />
          <scope attributes="__classmethod__" ilk="function" name="helper_attr" />
          <scope attributes="__classmethod__" ilk="function" name="helper_method" />
          <scope attributes="__classmethod__" ilk="function" name="logger" />
          <scope attributes="__classmethod__" ilk="function" name="logger=" />
          <scope attributes="__classmethod__" ilk="function" name="master_helper_module" />
          <scope attributes="__classmethod__" ilk="function" name="master_helper_module=" />
          <scope attributes="__classmethod__" ilk="function" name="method_missing" />
          <scope attributes="__classmethod__" ilk="function" name="perform_deliveries" />
          <scope attributes="__classmethod__" ilk="function" name="perform_deliveries=" />
          <scope attributes="__classmethod__" ilk="function" name="raise_delivery_errors" />
          <scope attributes="__classmethod__" ilk="function" name="raise_delivery_errors=" />
          <scope attributes="__classmethod__" doc="Receives a raw email, parses it into an email&#xA;object, decodes it, instantiates a new mailer, and passes&#xA;the email object to the mailer object&apos;s #receive method. If&#xA;you want your mailer to be able to process incoming&#xA;messages, you&apos;ll need to implement a #receive method that&#xA;accepts the email object as a parameter:" ilk="function" name="receive" signature="(raw_email)" />
          <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
          <scope attributes="__classmethod__" ilk="function" name="server_settings" />
          <scope attributes="__classmethod__" ilk="function" name="server_settings=" />
          <scope attributes="__classmethod__" ilk="function" name="template_root" />
          <scope attributes="__classmethod__" ilk="function" name="template_root=" />
          <scope ilk="function" name="bcc" />
          <scope ilk="function" name="bcc=" />
          <scope ilk="function" name="body" />
          <scope ilk="function" name="body=" />
          <scope ilk="function" name="cc" />
          <scope ilk="function" name="cc=" />
          <scope ilk="function" name="charset" />
          <scope ilk="function" name="charset=" />
          <scope ilk="function" name="content_type" />
          <scope ilk="function" name="content_type=" />
          <scope ilk="function" name="create!" />
          <scope ilk="function" name="default_charset" />
          <scope ilk="function" name="default_charset=" />
          <scope ilk="function" name="default_content_type" />
          <scope ilk="function" name="default_content_type=" />
          <scope ilk="function" name="default_implicit_parts_order" />
          <scope ilk="function" name="default_implicit_parts_order=" />
          <scope ilk="function" name="default_mime_version" />
          <scope ilk="function" name="default_mime_version=" />
          <scope doc="Delivers a TMail::Mail object. By default, it delivers the&#xA;cached mail object (from the #create! method). If no cached&#xA;mail object exists, and no alternate has been given as the&#xA;parameter, this will fail." ilk="function" name="deliver!" signature="(mail = @mail)" />
          <scope ilk="function" name="deliveries" />
          <scope ilk="function" name="deliveries=" />
          <scope ilk="function" name="delivery_method" />
          <scope ilk="function" name="delivery_method=" />
          <scope ilk="function" name="from" />
          <scope ilk="function" name="from=" />
          <scope ilk="function" name="headers" />
          <scope ilk="function" name="headers=" />
          <scope ilk="function" name="implicit_parts_order" />
          <scope ilk="function" name="implicit_parts_order=" />
          <scope ilk="function" name="logger" />
          <scope ilk="function" name="logger=" />
          <scope ilk="function" name="mail" />
          <scope ilk="function" name="mailer_name" />
          <scope ilk="function" name="mailer_name=" />
          <scope ilk="function" name="master_helper_module" />
          <scope ilk="function" name="master_helper_module=" />
          <scope ilk="function" name="mime_version" />
          <scope ilk="function" name="mime_version=" />
          <scope ilk="function" name="perform_deliveries" />
          <scope ilk="function" name="perform_deliveries=" />
          <scope ilk="function" name="raise_delivery_errors" />
          <scope ilk="function" name="raise_delivery_errors=" />
          <scope ilk="function" name="recipients" />
          <scope ilk="function" name="recipients=" />
          <scope ilk="function" name="sent_on" />
          <scope ilk="function" name="sent_on=" />
          <scope ilk="function" name="server_settings" />
          <scope ilk="function" name="server_settings=" />
          <scope ilk="function" name="subject" />
          <scope ilk="function" name="subject=" />
          <scope ilk="function" name="template" />
          <scope ilk="function" name="template=" />
          <scope ilk="function" name="template_root" />
          <scope ilk="function" name="template_root=" />
          <import symbol="ActionMailer::AdvAttrAccessor" />
          <import symbol="ActionMailer::Helpers" />
          <import symbol="ActionMailer::PartContainer" />
          <import symbol="ActionMailer::Quoting" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <variable attributes="__const__" citdl="Regexp" name="CHARS_NEEDING_QUOTING" />
        </scope>
        <scope ilk="namespace" name="Helpers">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="add_template_helper" />
            <scope doc="Declare a helper:  helper :foorequires &apos;foo_helper&apos; and&#xA;includes FooHelper in the template class.  helper FooHelper&#xA;includes FooHelper in the template class.  helper { def&#xA;foo() &quot;#{bar} is the very best&quot; end }evaluates the&#xA;block in the template class, adding method #foo.  helper(:three, BlindHelper) { def mice() &apos;mice&apos; end }&#xA;" ilk="function" name="helper" signature="(*args, &amp;block)" />
            <scope doc="Declare a controller attribute as a helper. For example,&#xA;  helper_attr :name  attr_accessor :namemakes the name and&#xA;name= controller methods available in the view. The is a&#xA;convenience wrapper for helper_method." ilk="function" name="helper_attr" signature="(*attrs)" />
            <scope doc="Declare a controller method as a helper. For example,&#xA;  helper_method :link_to  def link_to(name, options) ... end&#xA;makes the link_to controller method available in the view." ilk="function" name="helper_method" signature="(*methods)" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Part">
          <scope ilk="function" name="body" />
          <scope ilk="function" name="body=" />
          <scope ilk="function" name="charset" />
          <scope ilk="function" name="charset=" />
          <scope ilk="function" name="content_disposition" />
          <scope ilk="function" name="content_disposition=" />
          <scope ilk="function" name="content_type" />
          <scope ilk="function" name="content_type=" />
          <scope ilk="function" name="filename" />
          <scope ilk="function" name="filename=" />
          <scope ilk="function" name="headers" />
          <scope ilk="function" name="headers=" />
          <scope doc="Convert the part to a mail object which can be included in&#xA;the parts list of another mail object." ilk="function" name="to_mail" signature="(defaults)" />
          <scope ilk="function" name="transfer_encoding" />
          <scope ilk="function" name="transfer_encoding=" />
          <import symbol="ActionMailer::AdvAttrAccessor" />
          <import symbol="ActionMailer::PartContainer" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope ilk="namespace" name="PartContainer">
          <scope doc="Add an attachment to a multipart message. This is simply a&#xA;part with the content-disposition set&#xA;to &quot;attachment&quot;." ilk="function" name="attachment" signature="(params, &amp;block)" />
          <scope doc="Add a part to a multipart message, with the given&#xA;content-type. The part itself is yielded to the block so&#xA;that other properties (charset, body, headers, etc.) can be&#xA;set on it." ilk="function" name="part" signature="(params) {|part if block_given?| ...}" />
          <scope ilk="function" name="parts" />
        </scope>
        <scope ilk="namespace" name="Quoting">
          <scope ilk="function" name="quote_address_if_necessary" />
          <scope ilk="function" name="quote_any_address_if_necessary" />
          <scope ilk="function" name="quote_any_if_necessary" />
          <scope ilk="function" name="quote_if_necessary" />
          <scope ilk="function" name="quoted_printable" />
          <scope ilk="function" name="quoted_printable_encode" />
          <variable attributes="__const__" citdl="Regexp" name="CHARS_NEEDING_QUOTING" />
        </scope>
        <scope ilk="namespace" name="Utils">
          <scope attributes="__classmethod__" ilk="function" name="normalize_new_lines" />
          <scope ilk="function" name="normalize_new_lines" />
        </scope>
      </scope>
      <scope ilk="namespace" name="ActionView">
        <scope classrefs="StandardError" ilk="class" name="ActionViewError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Base">
          <scope ilk="namespace" name="CompiledTemplates">
          </scope>
          <scope classrefs="" ilk="class" name="ObjectWrapper">
            <scope classrefs="Struct" ilk="class" name="Passwd">
              <scope classrefs="Struct" ilk="class" name="Tms">
                <scope attributes="__classmethod__" ilk="function" name="[]" />
                <scope attributes="__classmethod__" ilk="function" name="members" />
                <scope attributes="__classmethod__ __ctor__" ilk="function" name="new" />
                <scope ilk="function" name="cstime" />
                <scope ilk="function" name="cstime=" />
                <scope ilk="function" name="cutime" />
                <scope ilk="function" name="cutime=" />
                <scope ilk="function" name="stime" />
                <scope ilk="function" name="stime=" />
                <scope ilk="function" name="utime" />
                <scope ilk="function" name="utime=" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
                <import symbol="Enumerable" />
              </scope>
              <scope attributes="__classmethod__" ilk="function" name="[]" />
              <scope attributes="__classmethod__" ilk="function" name="members" />
              <scope attributes="__classmethod__ __ctor__" ilk="function" name="new" />
              <scope ilk="function" name="dir" />
              <scope ilk="function" name="dir=" />
              <scope ilk="function" name="gid" />
              <scope ilk="function" name="gid=" />
              <scope ilk="function" name="name=" />
              <scope ilk="function" name="passwd" />
              <scope ilk="function" name="passwd=" />
              <scope ilk="function" name="shell" />
              <scope ilk="function" name="shell=" />
              <scope ilk="function" name="uid" />
              <scope ilk="function" name="uid=" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Enumerable" />
            </scope>
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="cache_template_extensions" />
          <scope attributes="__classmethod__" ilk="function" name="cache_template_extensions=" />
          <scope attributes="__classmethod__" ilk="function" name="cache_template_loading" />
          <scope attributes="__classmethod__" ilk="function" name="cache_template_loading=" />
          <scope attributes="__classmethod__" ilk="function" name="debug_rjs" />
          <scope attributes="__classmethod__" ilk="function" name="debug_rjs=" />
          <scope attributes="__classmethod__" ilk="function" name="erb_trim_mode" />
          <scope attributes="__classmethod__" ilk="function" name="erb_trim_mode=" />
          <scope attributes="__classmethod__" ilk="function" name="field_error_proc" />
          <scope attributes="__classmethod__" ilk="function" name="field_error_proc=" />
          <scope attributes="__classmethod__" ilk="function" name="load_helpers" />
          <scope attributes="__classmethod__" ilk="function" name="local_assigns_support_string_keys" />
          <scope attributes="__classmethod__" ilk="function" name="local_assigns_support_string_keys=" />
          <scope attributes="__classmethod__" doc="Register a class that knows how to handle template files&#xA;with the given extension. This can be used to implement new&#xA;template types. The constructor for the class must take the&#xA;ActiveView::Base instance as a parameter, and the class must&#xA;implement a #render method that takes the contents of the&#xA;template to render as well as the Hash of local assigns&#xA;available to the template. The #render method ought to&#xA;return the rendered template as a string." ilk="function" name="register_template_handler" signature="(extension, klass)" />
          <scope ilk="function" name="assigns" />
          <scope ilk="function" name="assigns=" />
          <scope ilk="function" name="base_path" />
          <scope ilk="function" name="base_path=" />
          <scope ilk="function" name="builder_template_exists?" />
          <scope ilk="function" name="cache_template_extensions" />
          <scope ilk="function" name="cache_template_extensions=" />
          <scope ilk="function" name="cache_template_loading" />
          <scope ilk="function" name="cache_template_loading=" />
          <scope ilk="function" name="compile_and_render_template" />
          <scope ilk="function" name="controller" />
          <scope ilk="function" name="controller=" />
          <scope ilk="function" name="debug_rjs" />
          <scope ilk="function" name="debug_rjs=" />
          <scope ilk="function" name="delegate_template_exists?" />
          <scope ilk="function" name="erb_template_exists?" />
          <scope ilk="function" name="erb_trim_mode" />
          <scope ilk="function" name="erb_trim_mode=" />
          <scope ilk="function" name="field_error_proc" />
          <scope ilk="function" name="field_error_proc=" />
          <scope ilk="function" name="file_exists?" />
          <scope ilk="function" name="file_public?" />
          <scope ilk="function" name="first_render" />
          <scope ilk="function" name="flash" />
          <scope ilk="function" name="headers" />
          <scope ilk="function" name="javascript_template_exists?" />
          <scope ilk="function" name="local_assigns_support_string_keys" />
          <scope ilk="function" name="local_assigns_support_string_keys=" />
          <scope ilk="function" name="logger" />
          <scope ilk="function" name="params" />
          <scope ilk="function" name="pick_template_extension" />
          <scope ilk="function" name="render" />
          <scope ilk="function" name="render_file" />
          <scope ilk="function" name="render_template" />
          <scope ilk="function" name="request" />
          <scope ilk="function" name="response" />
          <scope ilk="function" name="session" />
          <scope ilk="function" name="template_extension" />
          <scope ilk="function" name="template_extension=" />
          <import symbol="ActionView::Base::CompiledTemplates" />
          <import symbol="ActionView::Helpers::ActiveRecordHelper" />
          <import symbol="ActionView::Helpers::AssetTagHelper" />
          <import symbol="ActionView::Helpers::BenchmarkHelper" />
          <import symbol="ActionView::Helpers::CacheHelper" />
          <import symbol="ActionView::Helpers::CaptureHelper" />
          <import symbol="ActionView::Helpers::DateHelper" />
          <import symbol="ActionView::Helpers::DebugHelper" />
          <import symbol="ActionView::Helpers::FormHelper" />
          <import symbol="ActionView::Helpers::FormOptionsHelper" />
          <import symbol="ActionView::Helpers::FormTagHelper" />
          <import symbol="ActionView::Helpers::JavaScriptHelper" />
          <import symbol="ActionView::Helpers::JavaScriptMacrosHelper" />
          <import symbol="ActionView::Helpers::NumberHelper" />
          <import symbol="ActionView::Helpers::PaginationHelper" />
          <import symbol="ActionView::Helpers::PrototypeHelper" />
          <import symbol="ActionView::Helpers::ScriptaculousHelper" />
          <import symbol="ActionView::Helpers::TagHelper" />
          <import symbol="ActionView::Helpers::TextHelper" />
          <import symbol="ActionView::Helpers::UrlHelper" />
          <import symbol="ActionView::Partials" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="ERB::Util" />
          <variable attributes="__const__" citdl="Set" name="AJAX_OPTIONS" />
          <variable attributes="__const__" citdl="Regexp" name="AUTO_LINK_RE" />
          <variable attributes="__const__" citdl="Set" name="CALLBACKS" />
          <variable attributes="__const__" citdl="Array" name="COUNTRIES" />
          <variable attributes="__const__" citdl="Hash" name="DEFAULT_OPTIONS" />
          <variable attributes="__const__" citdl="String" name="DEFAULT_PREFIX" />
          <variable attributes="__const__" citdl="Array" name="JAVASCRIPT_DEFAULT_SOURCES" />
          <variable attributes="__const__" citdl="String" name="JAVASCRIPT_PATH" />
          <variable attributes="__const__" citdl="Array" name="TOGGLE_EFFECTS" />
          <variable attributes="__const__" citdl="Regexp" name="VERBOTEN_ATTRS" />
          <variable attributes="__const__" citdl="Array" name="VERBOTEN_TAGS" />
        </scope>
        <scope ilk="namespace" name="Helpers">
          <scope ilk="namespace" name="ActiveRecordHelper">
            <scope doc="Returns a string containing the error message attached to&#xA;the method&lt;/tt&gt; on the &lt;tt&gt;object&lt;/tt&gt;, if one exists. This&#xA;error message is wrapped in a DIV tag, which can be&#xA;specialized to include both&#xA;a &lt;tt&gt;prepend_text&lt;/tt&gt; and &lt;tt&gt;append_text&lt;/tt&gt; to properly&#xA;introduce the error and a &lt;tt&gt;css_class to style it&#xA;accordingly. Examples (post has an error message &quot;can&apos;t&#xA;be empty&quot; on the title attribute):" ilk="function" name="error_message_on" signature="(object, method, prepend_text = &quot;&quot;, append_text = &quot;&quot;, css_class = &quot;formError&quot;)" />
            <scope ilk="function" name="error_messages_for" signature="(*params)" />
            <scope doc="Returns an entire form with input tags and everything for a&#xA;specified Active Record object. Example (post is a new&#xA;record that has a title using VARCHAR and a body using&#xA;TEXT):  form(&quot;post&quot;) =&gt;    &lt;form&#xA;action=&apos;/post/create&apos; method=&apos;post&apos;&gt;      &lt;p&gt;&#xA;        &lt;label&#xA;for=&quot;post_title&quot;&gt;Title&lt;/label&gt;&lt;br /&gt;&#xA;" ilk="function" name="form" signature="(record_name, options = {}) {|contents if block_given?| ...}" />
            <scope doc="Returns a default input tag for the type of object returned&#xA;by the method. Example (title is a VARCHAR column and&#xA;holds &quot;Hello World&quot;):  input(&quot;post&quot;, &quot;title&quot;) =&gt;&#xA;    &lt;input&#xA;id=&quot;post_title&quot; name=&quot;post[title]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;Hello World&quot; /&gt;&#xA;" ilk="function" name="input" signature="(record_name, method, options = {})" />
          </scope>
          <scope ilk="namespace" name="AssetTagHelper">
            <scope attributes="__classmethod__" doc="Register one or more additional JavaScript files to be&#xA;included when javascript_include_tag :defaults&lt;/tt&gt; is&#xA;called. This method is only intended to be called from&#xA;plugin initialization to register additional .js files that&#xA;the plugin installed in &lt;tt&gt;public/javascripts." ilk="function" name="register_javascript_include_default" signature="(*sources)" />
            <scope attributes="__classmethod__" ilk="function" name="reset_javascript_include_default" />
            <scope ilk="function" name="auto_discovery_link_tag" signature="(type = :rss, url_options = {}, tag_options = {})" />
            <scope doc="Computes the path to an image asset in the public images&#xA;directory. Full paths from the document root will be passed&#xA;through. Used internally by image_tag to build the image&#xA;path. Passing a filename without an extension is deprecated.&#xA;  image_path(&quot;edit.png&quot;)  # =&gt; /images/edit.png&#xA;  image_path(&quot;icons/edit.png&quot;)  # =&gt; /images/icons/edit.png&#xA;" ilk="function" name="image_path" signature="(source)" />
            <scope ilk="function" name="image_tag" signature="(source, options = {})" />
            <scope doc="Returns an html script tag for each of the&#xA;sources&lt;/tt&gt; provided. You can pass in the filename (.js&#xA;extension is optional) of javascript files that exist in&#xA;your public/javascripts directory for inclusion into the&#xA;current page or you can pass the full path relative to your&#xA;document root. To include the Prototype and Scriptaculous&#xA;javascript libraries in your&#xA;application, pass &lt;tt&gt;:defaults&lt;/tt&gt; as the source. When&#xA;using :defaults, if an &lt;tt&gt;application.js file exists in&#xA;your public javascripts directory, it will be included as&#xA;well. You can modify the html attributes of the script tag&#xA;by passing a hash as the last argument." ilk="function" name="javascript_include_tag" signature="(*sources)" />
            <scope doc="Computes the path to a javascript asset in the public&#xA;javascripts directory. If the source filename has no&#xA;extension, .js will be appended. Full paths from the&#xA;document root will be passed through. Used internally by&#xA;javascript_include_tag to build the script path.  javascript_path &quot;xmlhr&quot; # =&gt; /javascripts/xmlhr.js&#xA;" ilk="function" name="javascript_path" signature="(source)" />
            <scope doc="Register one or more additional JavaScript files to be&#xA;included when javascript_include_tag :defaults&lt;/tt&gt; is&#xA;called. This method is only intended to be called from&#xA;plugin initialization to register additional .js files that&#xA;the plugin installed in &lt;tt&gt;public/javascripts." ilk="function" name="register_javascript_include_default" signature="(*sources)" />
            <scope ilk="function" name="reset_javascript_include_default" />
            <scope doc="Returns a stylesheet link tag for the sources specified as&#xA;arguments. If you don&apos;t specify an extension, .css will be&#xA;appended automatically. You can modify the link attributes&#xA;by passing a hash as the last argument.  stylesheet_link_tag &quot;style&quot; # =&gt;&#xA;    &lt;link&#xA;href=&quot;/stylesheets/style.css&quot; media=&quot;screen&quot; rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; /&gt;&#xA;" ilk="function" name="stylesheet_link_tag" signature="(*sources)" />
            <scope doc="Computes the path to a stylesheet asset in the public&#xA;stylesheets directory. If the source filename has no&#xA;extension, .css will be appended. Full paths from the&#xA;document root will be passed through. Used internally by&#xA;stylesheet_link_tag to build the stylesheet path.  stylesheet_path &quot;style&quot; # =&gt; /stylesheets/style.css&#xA;" ilk="function" name="stylesheet_path" signature="(source)" />
            <variable attributes="__const__" citdl="Array" name="JAVASCRIPT_DEFAULT_SOURCES" />
          </scope>
          <scope ilk="namespace" name="BenchmarkHelper">
            <scope doc="Measures the execution time of a block in a template and&#xA;reports the result to the log. Example: &lt;% benchmark &quot;Notes section&quot; do %&gt;&#xA;   &lt;%= expensive_notes_operation %&gt; &lt;% end %&gt;&#xA;Will add something like &quot;Notes&#xA;section (0.34523)&quot; to the log.You may give an optional&#xA;logger level as the second&#xA;argument (:debug, :info, :warn, :error). The default&#xA;is :info." ilk="function" name="benchmark" signature="(message = &quot;Benchmarking&quot;, level = :info) {|| ...}" />
          </scope>
          <scope ilk="namespace" name="CacheHelper">
            <scope ilk="function" name="cache" signature="(name = {}, &amp;block)" />
          </scope>
          <scope ilk="namespace" name="CaptureHelper">
            <scope doc="Capture allows you to extract a part of the template into an&#xA;instance variable. You can use this instance variable&#xA;anywhere in your templates and even in your layout.&#xA;Example of capture being used in a .rhtml page:  &lt;% @greeting = capture do %&gt;&#xA;    Welcome To my shiny new web page!  &lt;% end %&gt;&#xA;Example of capture being used in a .rxml page:" ilk="function" name="capture" signature="(*args, &amp;block)" />
            <scope doc="Calling content_for stores the block of markup for later&#xA;use. Subsequently, you can make calls to it by name with&#xA;yield in another template or in the layout.Example:&#xA;  &lt;% content_for(&quot;header&quot;) do %&gt;    alert(&apos;hello world&apos;)&#xA;  &lt;% end %&gt;You can use yield :header anywhere in your&#xA;templates." ilk="function" name="content_for" signature="(name, content = nil, &amp;block)" />
          </scope>
          <scope ilk="namespace" name="DateHelper">
            <scope doc="Returns a set of select tags (one for year, month, and&#xA;day) pre-selected for accessing a specified date-based&#xA;attribute (identified by method&lt;/tt&gt;) on an object assigned&#xA;to the template (identified by &lt;tt&gt;object&lt;/tt&gt;). It&apos;s&#xA;possible to tailor the selects through&#xA;the &lt;tt&gt;options&lt;/tt&gt; hash, which accepts all the keys that&#xA;each of the individual select builders&#xA;do (like :use_month_numbers for select_month) as well as a&#xA;range of discard options. The discard options&#xA;are &lt;tt&gt;:discard_year&lt;/tt&gt;, &lt;tt&gt;:discard_month&lt;/tt&gt; and &lt;tt&gt;:discard_day&lt;/tt&gt;. Set to true, they&apos;ll drop the respective select. Discarding the month select will also automatically discard the day select. It&apos;s also possible to explicitly set the order of the tags using the &lt;tt&gt;:order&lt;/tt&gt; option with an array of symbols &lt;tt&gt;:year&lt;/tt&gt;, &lt;tt&gt;:month&lt;/tt&gt; and &lt;tt&gt;:day in the desired order. Symbols may be omitted and the respective select is not included.&#xA;" ilk="function" name="date_select" signature="(object_name, method, options = {})" />
            <scope doc="Returns a set of select tags (one for&#xA;year, month, day, hour, and minute) pre-selected for&#xA;accessing a specified datetime-based attribute (identified&#xA;by method&lt;/tt&gt;) on an object assigned to the&#xA;template (identified by &lt;tt&gt;object). Examples:  datetime_select(&quot;post&quot;, &quot;written_on&quot;)&#xA;" ilk="function" name="datetime_select" signature="(object_name, method, options = {})" />
            <scope doc="Reports the approximate distance in time between two Time or&#xA;Date objects or integers as seconds. Set include_seconds to&#xA;true if you want more detailed approximations when&#xA;distance &lt; 1 min, 29 secs Distances are reported base on&#xA;the following table:0 &lt;-&gt; 29 secs # =&gt; less than a&#xA;minute 30 secs &lt;-&gt; 1 min, 29 secs # =&gt; 1 minute 1&#xA;min, 30 secs &lt;-&gt; 44 mins, 29&#xA;secs # =&gt; [2..44] minutes 44 mins, 30 secs &lt;-&gt; 89&#xA;mins, 29 secs # =&gt; about 1 hour 89 mins, 29&#xA;secs &lt;-&gt; 23 hrs, 59 mins, 29&#xA;secs # =&gt; about [2..24] hours 23 hrs, 59 mins, 29&#xA;secs &lt;-&gt; 47 hrs, 59 mins, 29 secs # =&gt; 1 day 47&#xA;hrs, 59 mins, 29 secs &lt;-&gt; 29 days, 23 hrs, 59 mins, 29&#xA;secs # =&gt; [2..29] days 29 days, 23 hrs, 59 mins, 30&#xA;secs &lt;-&gt; 59 days, 23 hrs, 59 mins, 29&#xA;secs # =&gt; about 1 month 59 days, 23 hrs, 59 mins, 30&#xA;secs &lt;-&gt; 1 yr minus 31 secs # =&gt; [2..12] months 1&#xA;yr minus 30 secs &lt;-&gt; 2 yrs minus 31 secs # =&gt; about&#xA;1 year 2 yrs minus 30 secs &lt;-&gt; max time or&#xA;date # =&gt; over [2..X] years" ilk="function" name="distance_of_time_in_words" signature="(from_time, to_time = 0, include_seconds = false)" />
            <scope doc="Alias for #time_ago_in_words" ilk="function" name="distance_of_time_in_words_to_now" signature="(from_time, include_seconds = false)" />
            <scope doc="Returns a set of html select-tags (one for year, month, and&#xA;day) pre-selected with the date&lt;/tt&gt;. It&apos;s possible to&#xA;explicitly set the order of the tags using&#xA;the &lt;tt&gt;:order&lt;/tt&gt; option with an array of&#xA;symbols &lt;tt&gt;:year&lt;/tt&gt;, &lt;tt&gt;:month&lt;/tt&gt; and &lt;tt&gt;:day&lt;/tt&gt; in&#xA;the desired order. If you do not supply a Symbol, it will be&#xA;appened onto the &lt;tt&gt;:order passed in." ilk="function" name="select_date" signature="(date = Date.today, options = {})" />
            <scope doc="Returns a set of html select-tags (one for&#xA;year, month, day, hour, and minute) pre-selected with the&#xA;datetime&lt;/tt&gt;. It&apos;s also possible to explicitly set the&#xA;order of the tags using the &lt;tt&gt;:order&lt;/tt&gt; option with an&#xA;array of&#xA;symbols &lt;tt&gt;:year&lt;/tt&gt;, &lt;tt&gt;:month&lt;/tt&gt; and &lt;tt&gt;:day&lt;/tt&gt; in&#xA;the desired order. If you do not supply a Symbol, it will be&#xA;appened onto the &lt;tt&gt;:order&lt;/tt&gt; passed in. You can also&#xA;add &lt;tt&gt;:date_separator&lt;/tt&gt; and &lt;tt&gt;:time_separator&lt;/tt&gt; keys to the &lt;tt&gt;options to control visual display of the elements.&#xA;" ilk="function" name="select_datetime" signature="(datetime = Time.now, options = {})" />
            <scope doc="Returns a select tag with options for each of the days 1&#xA;through 31 with the current day selected. The date&lt;/tt&gt; can&#xA;also be substituted for a hour number. Override the field&#xA;name using the &lt;tt&gt;:field_name option, &apos;day&apos; by default." ilk="function" name="select_day" signature="(date, options = {})" />
            <scope doc="Returns a select tag with options for each of the hours 0&#xA;through 23 with the current hour selected. The hour&lt;/tt&gt; can&#xA;also be substituted for a hour number. Override the field&#xA;name using the &lt;tt&gt;:field_name option, &apos;hour&apos; by default." ilk="function" name="select_hour" signature="(datetime, options = {})" />
            <scope doc="Returns a select tag with options for each of the minutes 0&#xA;through 59 with the current minute selected. Also can return&#xA;a select tag with options by minute_step&lt;/tt&gt; from 0 through&#xA;59 with the 00 minute selected The &lt;tt&gt;minute&lt;/tt&gt; can also&#xA;be substituted for a minute number. Override the field name&#xA;using the &lt;tt&gt;:field_name option, &apos;minute&apos; by default." ilk="function" name="select_minute" signature="(datetime, options = {})" />
            <scope doc="Returns a select tag with options for each of the months&#xA;January through December with the current month selected.&#xA;The month names are presented as keys (what&apos;s shown to the&#xA;user) and the month numbers (1-12) are used as&#xA;values (what&apos;s submitted to the server). It&apos;s also possible&#xA;to use month numbers for the presentation instead of&#xA;names -- set the :use_month_numbers&lt;/tt&gt; key&#xA;in &lt;tt&gt;options&lt;/tt&gt; to true for this to happen. If you want&#xA;both numbers and names, set&#xA;the &lt;tt&gt;:add_month_numbers&lt;/tt&gt; key in &lt;tt&gt;options&lt;/tt&gt; to&#xA;true. If you would prefer to show month names as&#xA;abbreviations, set the &lt;tt&gt;:use_short_month&lt;/tt&gt; key&#xA;in &lt;tt&gt;options&lt;/tt&gt; to true. If you want to use your own&#xA;month names, set the &lt;tt&gt;:use_month_names&lt;/tt&gt; key&#xA;in &lt;tt&gt;options to an array of 12 month names." ilk="function" name="select_month" signature="(date, options = {})" />
            <scope doc="Returns a select tag with options for each of the seconds 0&#xA;through 59 with the current second selected. The&#xA;second&lt;/tt&gt; can also be substituted for a second number.&#xA;Override the field name using the &lt;tt&gt;:field_name&#xA;option, &apos;second&apos; by default." ilk="function" name="select_second" signature="(datetime, options = {})" />
            <scope doc="Returns a set of html select-tags (one for hour and&#xA;minute) You can set :add_separator key to format the output." ilk="function" name="select_time" signature="(datetime = Time.now, options = {})" />
            <scope doc="Returns a select tag with options for each of the five years&#xA;on each side of the current, which is selected. The five&#xA;year radius can be changed using&#xA;the :start_year&lt;/tt&gt; and &lt;tt&gt;:end_year&lt;/tt&gt; keys in&#xA;the &lt;tt&gt;options&lt;/tt&gt;. Both ascending and descending year&#xA;lists are supported by making &lt;tt&gt;:start_year&lt;/tt&gt; less than&#xA;or greater than &lt;tt&gt;:end_year&lt;/tt&gt;. The &lt;tt&gt;date can also be&#xA;substituted for a year given as a number. Example:" ilk="function" name="select_year" signature="(date, options = {})" />
            <scope doc="Like distance_of_time_in_words, but where to_time&lt;/tt&gt; is&#xA;fixed to &lt;tt&gt;Time.now." ilk="function" name="time_ago_in_words" signature="(from_time, include_seconds = false)" />
            <variable attributes="__const__" citdl="String" name="DEFAULT_PREFIX" />
          </scope>
          <scope ilk="namespace" name="DebugHelper">
            <scope doc="Returns a &lt;pre&gt;-tag set with the object dumped by&#xA;YAML. Very readable way to inspect an object." ilk="function" name="debug" signature="(object)" />
          </scope>
          <scope classrefs="Object" ilk="class" name="FormBuilder">
            <scope attributes="__classmethod__" ilk="function" name="field_helpers" />
            <scope attributes="__classmethod__" ilk="function" name="field_helpers=" />
            <scope ilk="function" name="check_box" />
            <scope ilk="function" name="collection_select" />
            <scope ilk="function" name="country_select" />
            <scope ilk="function" name="date_select" />
            <scope ilk="function" name="datetime_select" />
            <scope ilk="function" name="field_helpers" />
            <scope ilk="function" name="field_helpers=" />
            <scope ilk="function" name="fields_for" />
            <scope ilk="function" name="file_field" />
            <scope ilk="function" name="hidden_field" />
            <scope ilk="function" name="object" />
            <scope ilk="function" name="object=" />
            <scope ilk="function" name="object_name" />
            <scope ilk="function" name="object_name=" />
            <scope ilk="function" name="password_field" />
            <scope ilk="function" name="radio_button" />
            <scope ilk="function" name="select" />
            <scope ilk="function" name="text_area" />
            <scope ilk="function" name="text_field" />
            <scope ilk="function" name="time_zone_select" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="FormHelper">
            <scope doc="Returns a checkbox tag tailored for accessing a specified&#xA;attribute (identified by method&lt;/tt&gt;) on an object assigned&#xA;to the template (identified by &lt;tt&gt;object&lt;/tt&gt;). It&apos;s&#xA;intended that &lt;tt&gt;method&lt;/tt&gt; returns an integer and if that&#xA;integer is above zero, then the checkbox is checked.&#xA;Additional options on the input tag can be passed as a hash&#xA;with &lt;tt&gt;options&lt;/tt&gt;. The &lt;tt&gt;checked_value&lt;/tt&gt; defaults&#xA;to 1 while the default &lt;tt&gt;unchecked_value is set to 0 which&#xA;is convenient for boolean values. Usually unchecked&#xA;checkboxes don&apos;t post anything. We work around this problem&#xA;by adding a hidden value with the same name as the checkbox." ilk="function" name="check_box" signature="(object_name, method, options = {}, checked_value = &quot;1&quot;, unchecked_value = &quot;0&quot;)" />
            <scope doc="Creates a scope around a specific model object like&#xA;form_for, but doesn&apos;t create the form tags themselves. This&#xA;makes fields_for suitable for specifying additional model&#xA;objects in the same form. Example:  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; } do |person_form| %&gt;&#xA;    First&#xA;name: &lt;%= person_form.text_field :first_name %&gt;" ilk="function" name="fields_for" signature="(object_name, *args, &amp;block) {|builder.new(object_name, object, self, options, block)| ...}" />
            <scope doc="Works just like text_field, but returns an input tag of&#xA;the &quot;file&quot; type instead, which won&apos;t have a&#xA;default value." ilk="function" name="file_field" signature="(object_name, method, options = {})" />
            <scope doc="Creates a form and a scope around a specific model&#xA;object, which is then used as a base for questioning about&#xA;values for the fields. Examples:  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; } do |f| %&gt;&#xA;    First name: &lt;%= f.text_field :first_name %&gt;&#xA;    Last name : &lt;%= f.text_field :last_name %&gt;&#xA;    Biography : &lt;%= f.text_area :biography %&gt;" ilk="function" name="form_for" signature="(object_name, *args, &amp;proc)" />
            <scope doc="Works just like text_field, but returns an input tag of&#xA;the &quot;hidden&quot; type instead." ilk="function" name="hidden_field" signature="(object_name, method, options = {})" />
            <scope doc="Works just like text_field, but returns an input tag of&#xA;the &quot;password&quot; type instead." ilk="function" name="password_field" signature="(object_name, method, options = {})" />
            <scope doc="Returns a radio button tag for accessing a specified&#xA;attribute (identified by method&lt;/tt&gt;) on an object assigned&#xA;to the template (identified by &lt;tt&gt;object&lt;/tt&gt;). If the&#xA;current value of &lt;tt&gt;method&lt;/tt&gt; is &lt;tt&gt;tag_value&lt;/tt&gt; the&#xA;radio button will be checked. Additional options on the&#xA;input tag can be passed as a hash with &lt;tt&gt;options.&#xA;Example (call, result). Imagine that @post.category&#xA;returns &quot;rails&quot;:" ilk="function" name="radio_button" signature="(object_name, method, tag_value, options = {})" />
            <scope doc="Returns a textarea opening and closing tag set tailored for&#xA;accessing a specified attribute (identified by&#xA;method&lt;/tt&gt;) on an object assigned to the&#xA;template (identified by &lt;tt&gt;object&lt;/tt&gt;). Additional options&#xA;on the input tag can be passed as a hash with &lt;tt&gt;options.&#xA;Example (call, result):" ilk="function" name="text_area" signature="(object_name, method, options = {})" />
            <scope doc="Returns an input tag of the &quot;text&quot; type tailored&#xA;for accessing a specified attribute (identified by&#xA;method&lt;/tt&gt;) on an object assigned to the&#xA;template (identified by &lt;tt&gt;object&lt;/tt&gt;). Additional options&#xA;on the input tag can be passed as a hash with &lt;tt&gt;options.&#xA;Examples (call, result):" ilk="function" name="text_field" signature="(object_name, method, options = {})" />
          </scope>
          <scope ilk="namespace" name="FormOptionsHelper">
            <scope doc="Return select and option tags for the given object and&#xA;method using options_from_collection_for_select to generate&#xA;the list of option tags." ilk="function" name="collection_select" signature="(object, method, collection, value_method, text_method, options = {}, html_options = {})" />
            <scope doc="Returns a string of option tags for pretty much any country&#xA;in the world. Supply a country name as selected&lt;/tt&gt; to have&#xA;it marked as the selected option tag. You can also supply an&#xA;array of countries as &lt;tt&gt;priority_countries, so that they&#xA;will be listed above the rest of the (long) list.NOTE: Only&#xA;the option tags are returned, you have to wrap this call in&#xA;a regular HTML select tag." ilk="function" name="country_options_for_select" signature="(selected = nil, priority_countries = nil)" />
            <scope doc="Return select and option tags for the given object and&#xA;method, using country_options_for_select to generate the&#xA;list of option tags." ilk="function" name="country_select" signature="(object, method, priority_countries = nil, options = {}, html_options = {})" />
            <scope doc="Returns a string of option tags, like&#xA;options_from_collection_for_select, but surrounds them&#xA;with &lt;optgroup&gt; tags.An array of group objects are&#xA;passed. Each group should return an array of options when&#xA;calling group_method Each group should return its name when&#xA;calling group_label_method." ilk="function" name="option_groups_from_collection_for_select" signature="(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)" />
            <scope doc="Accepts a container (hash, array, enumerable, your type) and&#xA;returns a string of option tags. Given a container where the&#xA;elements respond to first and last (such as a two-element&#xA;array), the &quot;lasts&quot; serve as option values and&#xA;the &quot;firsts&quot; as option text. Hashes are turned&#xA;into this form automatically, so the keys&#xA;become &quot;firsts&quot; and values become lasts. If&#xA;selected&lt;/tt&gt; is specified, the matching &quot;last&quot; or&#xA;element will get the selected option-tag. &lt;tt&gt;Selected may&#xA;also be an array of values to be selected when using a&#xA;multiple select." ilk="function" name="options_for_select" signature="(container, selected = nil)" />
            <scope doc="Returns a string of option tags that have been compiled by&#xA;iterating over the collection&lt;/tt&gt; and assigning the the&#xA;result of a call to the &lt;tt&gt;value_method&lt;/tt&gt; as the option&#xA;value and the &lt;tt&gt;text_method&lt;/tt&gt; as the option text.&#xA;If &lt;tt&gt;selected_value&lt;/tt&gt; is specified, the element&#xA;returning a match on &lt;tt&gt;value_method will get the selected&#xA;option tag." ilk="function" name="options_from_collection_for_select" signature="(collection, value_method, text_method, selected_value = nil)" />
            <scope doc="Create a select tag and a series of contained option tags&#xA;for the provided object and method. The option currently&#xA;held by the object will be selected, provided that the&#xA;object is available. See options_for_select for the required&#xA;format of the choices parameter.Example&#xA;with @post.person_id =&gt; 1:" ilk="function" name="select" signature="(object, method, choices, options = {}, html_options = {})" />
            <scope doc="Returns a string of option tags for pretty much any time&#xA;zone in the world. Supply a TimeZone name as&#xA;selected&lt;/tt&gt; to have it marked as the selected option tag.&#xA;You can also supply an array of TimeZone objects&#xA;as &lt;tt&gt;priority_zones, so that they will be listed above the&#xA;rest of the (long) list. (You can use TimeZone.us_zones as a&#xA;convenience for obtaining a list of the US time zones.)" ilk="function" name="time_zone_options_for_select" signature="(selected = nil, priority_zones = nil, model = TimeZone)" />
            <scope doc="Return select and option tags for the given object and&#xA;method, using #time_zone_options_for_select to generate the&#xA;list of option tags.In addition to&#xA;the :include_blank&lt;/tt&gt; option documented above, this method&#xA;also supports a &lt;tt&gt;:model option, which defaults to&#xA;TimeZone. This may be used by users to specify a different&#xA;time zone model object. (See #time_zone_options_for_select&#xA;for more information.)" ilk="function" name="time_zone_select" signature="(object, method, priority_zones = nil, options = {}, html_options = {})" />
            <import symbol="ERB::Util" />
            <variable attributes="__const__" citdl="Array" name="COUNTRIES" />
          </scope>
          <scope ilk="namespace" name="FormTagHelper">
            <scope doc="Creates a check box." ilk="function" name="check_box_tag" signature="(name, value = &quot;1&quot;, checked = false, options = {})" />
            <scope doc="Outputs &quot;&lt;/form&gt;&quot;" ilk="function" name="end_form_tag" signature="()" />
            <scope doc="Creates a file upload field.If you are using file uploads&#xA;then you will also need to set the multipart option for the&#xA;form:  &lt;%= form_tag { :action =&gt; &quot;post&quot; }, { :multipart =&gt; true } %&gt;&#xA;    &lt;label for=&quot;file&quot;&gt;File to&#xA;Upload&lt;/label&gt; &lt;%= file_field_tag &quot;file&quot; %&gt;&#xA;" ilk="function" name="file_field_tag" signature="(name, options = {})" />
            <scope ilk="function" name="form_tag" signature="(url_for_options = {}, options = {}, *parameters_for_url, &amp;block)" />
            <scope doc="Creates a hidden field.Takes the same options as&#xA;text_field_tag" ilk="function" name="hidden_field_tag" signature="(name, value = nil, options = {})" />
            <scope doc="Displays an image which when clicked will submit the form.&#xA;source is passed to AssetTagHelper#image_path" ilk="function" name="image_submit_tag" signature="(source, options = {})" />
            <scope doc="Creates a password field.Takes the same options as&#xA;text_field_tag" ilk="function" name="password_field_tag" signature="(name = &quot;password&quot;, value = nil, options = {})" />
            <scope doc="Creates a radio button." ilk="function" name="radio_button_tag" signature="(name, value, checked = false, options = {})" />
            <scope ilk="function" name="select_tag" signature="(name, option_tags = nil, options = {})" />
            <scope doc="Alias for #form_tag" ilk="function" name="start_form_tag" signature="(url_for_options = {}, options = {}, *parameters_for_url, &amp;block)" />
            <scope doc="Creates a submit button with the text value as the caption.&#xA;If options contains a pair with the key&#xA;of &quot;disable_with&quot;, then the value will be used to&#xA;rename a disabled version of the submit button." ilk="function" name="submit_tag" signature="(value = &quot;Save changes&quot;, options = {})" />
            <scope ilk="function" name="text_area_tag" signature="(name, content = nil, options = {})" />
            <scope ilk="function" name="text_field_tag" signature="(name, value = nil, options = {})" />
          </scope>
          <scope classrefs="Object" ilk="class" name="InstanceTag">
            <scope ilk="function" name="column_type" />
            <scope ilk="function" name="content_tag" />
            <scope ilk="function" name="content_tag_without_error_wrapping" />
            <scope ilk="function" name="error_message" />
            <scope ilk="function" name="error_wrapping" />
            <scope ilk="function" name="method_name" />
            <scope ilk="function" name="object" />
            <scope ilk="function" name="object_name" />
            <scope ilk="function" name="tag" />
            <scope ilk="function" name="tag_without_error_wrapping" />
            <scope ilk="function" name="to_boolean_select_tag" />
            <scope ilk="function" name="to_check_box_tag" />
            <scope ilk="function" name="to_collection_select_tag" />
            <scope ilk="function" name="to_content_tag" />
            <scope ilk="function" name="to_country_select_tag" />
            <scope ilk="function" name="to_date_select_tag" />
            <scope ilk="function" name="to_date_select_tag_without_error_wrapping" />
            <scope ilk="function" name="to_date_tag" />
            <scope ilk="function" name="to_datetime_select_tag" />
            <scope ilk="function" name="to_datetime_select_tag_without_error_wrapping" />
            <scope ilk="function" name="to_input_field_tag" />
            <scope ilk="function" name="to_radio_button_tag" />
            <scope ilk="function" name="to_select_tag" />
            <scope ilk="function" name="to_tag" />
            <scope ilk="function" name="to_text_area_tag" />
            <scope ilk="function" name="to_time_zone_select_tag" />
            <scope ilk="function" name="value" />
            <scope ilk="function" name="value_before_type_cast" />
            <import symbol="ActionView::Helpers::DateHelper" />
            <import symbol="ActionView::Helpers::FormOptionsHelper" />
            <import symbol="ActionView::Helpers::TagHelper" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="ERB::Util" />
            <variable attributes="__const__" citdl="Array" name="COUNTRIES" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_DATE_OPTIONS" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_FIELD_OPTIONS" />
            <variable attributes="__const__" citdl="String" name="DEFAULT_PREFIX" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_RADIO_OPTIONS" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_TEXT_AREA_OPTIONS" />
          </scope>
          <scope classrefs="ActionView::Helpers::JavaScriptProxy" ilk="class" name="JavaScriptCollectionProxy">
            <scope ilk="function" name="arguments_for_call" />
            <scope ilk="function" name="generator" />
            <scope ilk="function" name="grep" />
            <scope ilk="function" name="inject" />
            <scope ilk="function" name="pluck" />
            <scope ilk="function" name="zip" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Array" name="ENUMERABLE_METHODS" />
            <variable attributes="__const__" citdl="Array" name="ENUMERABLE_METHODS_WITH_RETURN" />
          </scope>
          <scope classrefs="ActionView::Helpers::JavaScriptCollectionProxy" ilk="class" name="JavaScriptElementCollectionProxy">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Array" name="ENUMERABLE_METHODS" />
            <variable attributes="__const__" citdl="Array" name="ENUMERABLE_METHODS_WITH_RETURN" />
          </scope>
          <scope classrefs="ActionView::Helpers::JavaScriptProxy" ilk="class" name="JavaScriptElementProxy">
            <scope ilk="function" name="reload" />
            <scope ilk="function" name="replace" />
            <scope ilk="function" name="replace_html" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="JavaScriptHelper">
            <scope ilk="function" name="array_or_string_for_javascript" signature="(option)" />
            <scope doc="Returns a button that&apos;ll trigger a JavaScript function using&#xA;the onclick handler.The function&lt;/tt&gt; argument can be&#xA;omitted in favor of an &lt;tt&gt;update_page block, which&#xA;evaluates to a string when the template is rendered (instead&#xA;of making an Ajax request first).Examples:  button_to_function &quot;Greeting&quot;, &quot;alert(&apos;Hello world!&apos;)&quot;&#xA;" ilk="function" name="button_to_function" signature="(name, *args, &amp;block)" />
            <scope doc="Includes the Action Pack JavaScript libraries inside a&#xA;single &lt;script&gt; tag. The function first includes&#xA;prototype.js and then its core extensions, (determined by&#xA;filenames starting with &quot;prototype&quot;).&#xA;Afterwards, any additional scripts will be included in&#xA;undefined order." ilk="function" name="define_javascript_functions" signature="()" />
            <scope doc="Escape carrier returns and single and double quotes for&#xA;JavaScript segments." ilk="function" name="escape_javascript" signature="(javascript)" />
            <scope ilk="function" name="javascript_cdata_section" />
            <scope doc="Returns a JavaScript tag with the content inside. Example:&#xA;  javascript_tag &quot;alert(&apos;All is good&apos;)&quot;Returns:&#xA;  &lt;script type=&quot;text/javascript&quot;&gt;  //&lt;![CDATA[&#xA;  alert(&apos;All is good&apos;)  //]]&gt;  &lt;/script&gt;html_options may be a hash of attributes for the &lt;script&gt; tag. Example:&#xA;  javascript_tag &quot;alert(&apos;All is&#xA;good&apos;)&quot;, :defer =&gt; &apos;true&apos; # =&gt; &lt;script&#xA;defer=&quot;true&quot; type=&quot;text/javascript&quot;&gt;alert(&apos;All is good&apos;)&lt;/script&gt;&#xA;" ilk="function" name="javascript_tag" signature="(content, html_options = {})" />
            <scope doc="Returns a link that will trigger a JavaScript function using&#xA;the onclick handler and return false after the fact.&#xA;The function&lt;/tt&gt; argument can be omitted in favor of&#xA;an &lt;tt&gt;update_page block, which evaluates to a string when&#xA;the template is rendered (instead of making an Ajax request&#xA;first)." ilk="function" name="link_to_function" signature="(name, *args, &amp;block)" />
            <scope ilk="function" name="options_for_javascript" signature="(options)" />
            <variable attributes="__const__" citdl="String" name="JAVASCRIPT_PATH" />
          </scope>
          <scope ilk="namespace" name="JavaScriptMacrosHelper">
            <scope ilk="function" name="auto_complete_field" signature="(field_id, options = {})" />
            <scope doc="DEPRECATION WARNING: This method will become a separate&#xA;plugin when Rails 2.0 ships.Use this method in your view to&#xA;generate a return for the AJAX autocomplete requests.&#xA;Example action:  def auto_complete_for_item_title    @items = Item.find(:all,&#xA;      :conditions =&gt; [ &apos;LOWER(description) LIKE ?&apos;,&#xA;      &apos;%&apos; + request.raw_post.downcase + &apos;%&apos; ])" ilk="function" name="auto_complete_result" signature="(entries, field, phrase = nil)" />
            <scope ilk="function" name="in_place_editor" signature="(field_id, options = {})" />
            <scope doc="DEPRECATION WARNING: This method will become a separate&#xA;plugin when Rails 2.0 ships.Renders the value of the&#xA;specified object and method with in-place editing&#xA;capabilities.See the RDoc on&#xA;ActionController::InPlaceEditing to learn more about this." ilk="function" name="in_place_editor_field" signature="(object, method, tag_options = {}, in_place_editor_options = {})" />
            <scope doc="DEPRECATION WARNING: This method will become a separate&#xA;plugin when Rails 2.0 ships.Wrapper for text_field with&#xA;added AJAX autocompletion functionality.In your&#xA;controller, you&apos;ll need to define an action called&#xA;auto_complete_for to respond the AJAX calls,See the RDoc on&#xA;ActionController::Macros::AutoComplete to learn more about&#xA;this." ilk="function" name="text_field_with_auto_complete" signature="(object, method, tag_options = {}, completion_options = {})" />
          </scope>
          <scope classrefs="Builder::BlankSlate" ilk="class" name="JavaScriptProxy">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionView::Helpers::JavaScriptProxy" ilk="class" name="JavaScriptVariableProxy">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="NumberHelper">
            <scope doc="Alias for #number_to_human_size" ilk="function" name="human_size" signature="(size, precision=1)" />
            <scope ilk="function" name="number_to_currency" signature="(number, options = {})" />
            <scope doc="Formats the bytes in size&lt;/tt&gt; into a more understandable&#xA;representation. Useful for reporting file sizes to users.&#xA;This method returns nil if &lt;tt&gt;size&lt;/tt&gt; cannot be converted&#xA;into a number. You can change the default precision of 1&#xA;in &lt;tt&gt;precision. number_to_human_size(123)           =&gt; 123 Bytes&#xA;" ilk="function" name="number_to_human_size" signature="(size, precision=1)" />
            <scope ilk="function" name="number_to_percentage" signature="(number, options = {})" />
            <scope ilk="function" name="number_to_phone" signature="(number, options = {})" />
            <scope ilk="function" name="number_with_delimiter" signature="(number, delimiter=&quot;,&quot;, separator=&quot;.&quot;)" />
            <scope doc="Formats a number&lt;/tt&gt; with the specified level&#xA;of &lt;tt&gt;precision. The default level of precision is 3.&#xA; number_with_precision(111.2345)    =&gt; 111.235 number_with_precision(111.2345, 2) =&gt; 111.24&#xA;" ilk="function" name="number_with_precision" signature="(number, precision=3)" />
          </scope>
          <scope ilk="namespace" name="PaginationHelper">
            <scope ilk="function" name="pagination_links" signature="(paginator, options={}, html_options={})" />
            <scope doc="Iterate through the pages of a given paginator, invoking a&#xA;block for each page number that needs to be rendered as a&#xA;link." ilk="function" name="pagination_links_each" signature="(paginator, options) {|first.number| ...}" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_OPTIONS" />
          </scope>
          <scope ilk="namespace" name="PrototypeHelper">
            <scope classrefs="Object" ilk="class" name="JavaScriptGenerator">
              <scope ilk="namespace" name="GeneratorMethods">
                <scope doc="Writes raw JavaScript to the page." ilk="function" name="&lt;&lt;" signature="(javascript)" />
                <scope doc="Returns a element reference by finding it through id in the&#xA;DOM. This element can then be used for further method calls.&#xA;Examples:  page[&apos;blank_slate&apos;]                  # =&gt; $(&apos;blank_slate&apos;);&#xA;  page[&apos;blank_slate&apos;].show             # =&gt; $(&apos;blank_slate&apos;).show();&#xA;  page[&apos;blank_slate&apos;].show(&apos;first&apos;).up # =&gt; $(&apos;blank_slate&apos;).show(&apos;first&apos;).up();&#xA;" ilk="function" name="[]" signature="(id)" />
                <scope doc="Displays an alert dialog with the given message." ilk="function" name="alert" signature="(message)" />
                <scope doc="Assigns the JavaScript variable&lt;/tt&gt; the given &lt;tt&gt;value." ilk="function" name="assign" signature="(variable, value)" />
                <scope doc="Calls the JavaScript function&lt;/tt&gt;, optionally with the&#xA;given &lt;tt&gt;arguments.If a block is given, the block will be&#xA;passed to a new JavaScriptGenerator; the resulting&#xA;JavaScript code will then be wrapped inside&#xA;function() { ... } and passed as the called function&apos;s final&#xA;argument." ilk="function" name="call" signature="(function, *arguments, &amp;block)" />
                <scope doc="Executes the content of the block after a delay of seconds.&#xA;Example:  page.delay(20) do    page.visual_effect :fade, &apos;notice&apos;&#xA;  end" ilk="function" name="delay" signature="(seconds = 1) {|| ...}" />
                <scope doc="Creates a script.aculo.us draggable element. See&#xA;ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" name="draggable" signature="(id, options = {})" />
                <scope doc="Creates a script.aculo.us drop receiving element. See&#xA;ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" name="drop_receiving" signature="(id, options = {})" />
                <scope doc="Hides the visible DOM elements with the given ids." ilk="function" name="hide" signature="(*ids)" />
                <scope ilk="function" name="insert_html" signature="(position, id, *options_for_render)" />
                <scope doc="Redirects the browser to the given location&lt;/tt&gt;, in the&#xA;same form as &lt;tt&gt;url_for." ilk="function" name="redirect_to" signature="(location)" />
                <scope doc="Removes the DOM elements with the given ids from the page." ilk="function" name="remove" signature="(*ids)" />
                <scope doc="Replaces the &quot;outer HTML&quot; (i.e., the entire&#xA;element, not just its contents) of the DOM element with the&#xA;given id.options_for_render may be either a string of HTML&#xA;to insert, or a hash of options to be passed to&#xA;ActionView::Base#render. For example:  # Replace the DOM&#xA;element having ID &apos;person-45&apos; with the" ilk="function" name="replace" signature="(id, *options_for_render)" />
                <scope doc="Replaces the inner HTML of the DOM element with the given&#xA;id.options_for_render may be either a string of HTML to&#xA;insert, or a hash of options to be passed to&#xA;ActionView::Base#render. For example:  # Replace the HTML of&#xA;the DOM element having ID &apos;person-45&apos; with the  # &apos;person&apos; partial for the appropriate object.&#xA;" ilk="function" name="replace_html" signature="(id, *options_for_render)" />
                <scope doc="Returns a collection reference by finding it through a CSS&#xA;pattern in the DOM. This collection can then be used for&#xA;further method calls. Examples:  page.select(&apos;p&apos;)                      # =&gt; $$(&apos;p&apos;);&#xA;  page.select(&apos;p.welcome&#xA;b&apos;).first      # =&gt; $$(&apos;p.welcome b&apos;).first();  page.select(&apos;p.welcome b&apos;).first.hide # =&gt; $$(&apos;p.welcome b&apos;).first().hide();&#xA;" ilk="function" name="select" signature="(pattern)" />
                <scope doc="Shows hidden DOM elements with the given ids." ilk="function" name="show" signature="(*ids)" />
                <scope doc="Creates a script.aculo.us sortable element. Useful to&#xA;recreate sortable elements after items get added or deleted.&#xA;See ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" name="sortable" signature="(id, options = {})" />
                <scope doc="Toggles the visibility of the DOM elements with the given&#xA;ids." ilk="function" name="toggle" signature="(*ids)" />
                <scope doc="Starts a script.aculo.us visual effect. See&#xA;ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" name="visual_effect" signature="(name, id = nil, options = {})" />
              </scope>
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope ilk="function" name="build_callbacks" signature="(options)" />
            <scope ilk="function" name="build_observer" signature="(klass, name, options = {})" />
            <scope doc="Returns &apos;eval(request.responseText)&apos; which is the JavaScript&#xA;function that form_remote_tag can call in :complete to&#xA;evaluate a multiple update return document using&#xA;update_element_function calls." ilk="function" name="evaluate_remote_response" signature="()" />
            <scope doc="Alias for #remote_form_for" ilk="function" name="form_remote_for" signature="(object_name, *args, &amp;proc)" />
            <scope doc="Returns a form tag that will submit using XMLHttpRequest in&#xA;the background instead of the regular reloading POST&#xA;arrangement. Even though it&apos;s using JavaScript to serialize&#xA;the form elements, the form submission will work just like a&#xA;regular submission as viewed by the receiving side (all&#xA;elements available in params). The options for specifying&#xA;the target with :url and defining callbacks is the same as&#xA;link_to_remote." ilk="function" name="form_remote_tag" signature="(options = {}, &amp;block)" />
            <scope ilk="function" name="link_to_remote" signature="(name, options = {}, html_options = {})" />
            <scope ilk="function" name="method_option_to_s" signature="(method)" />
            <scope ilk="function" name="observe_field" signature="(field_id, options = {})" />
            <scope doc="Like observe_field&lt;/tt&gt;, but operates on an entire form&#xA;identified by the DOM&#xA;ID &lt;tt&gt;form_id&lt;/tt&gt;. &lt;tt&gt;options&lt;/tt&gt; are the same&#xA;as &lt;tt&gt;observe_field&lt;/tt&gt;, except the default value of&#xA;the &lt;tt&gt;:with option evaluates to the serialized (request&#xA;string) value of the form." ilk="function" name="observe_form" signature="(form_id, options = {})" />
            <scope ilk="function" name="options_for_ajax" signature="(options)" />
            <scope doc="Periodically calls the specified&#xA;url (options[:url]&lt;/tt&gt;) every &lt;tt&gt;options[:frequency]&lt;/tt&gt; seconds (default is 10). Usually used to update a specified div (&lt;tt&gt;options[:update]) with the results of the remote call. The options for specifying the target with :url and defining callbacks is the same as link_to_remote.&#xA;" ilk="function" name="periodically_call_remote" signature="(options = {})" />
            <scope doc="Works like form_remote_tag, but uses form_for semantics." ilk="function" name="remote_form_for" signature="(object_name, *args, &amp;proc)" />
            <scope doc="Returns the JavaScript needed for a remote function. Takes&#xA;the same arguments as link_to_remote.Example:  &lt;select&#xA;id=&quot;options&quot; onchange=&quot;&lt;%= remote_function(:update =&gt; &quot;options&quot;,&#xA;      :url =&gt; { :action =&gt; :update_options }) %&gt;&quot;&gt;&#xA;    &lt;option value=&quot;0&quot;&gt;Hello&lt;/option&gt;&#xA;    &lt;option value=&quot;1&quot;&gt;World&lt;/option&gt;" ilk="function" name="remote_function" signature="(options)" />
            <scope doc="Returns a button input tag that will submit form using&#xA;XMLHttpRequest in the background instead of regular&#xA;reloading POST arrangement. options&lt;/tt&gt; argument is the&#xA;same as in &lt;tt&gt;form_remote_tag." ilk="function" name="submit_to_remote" signature="(name, value, options = {})" />
            <scope ilk="function" name="update_element_function" signature="(element_id, options = {}, &amp;block)" />
            <scope doc="Yields a JavaScriptGenerator and returns the generated&#xA;JavaScript code. Use this to update multiple elements on a&#xA;page in an Ajax response. See JavaScriptGenerator for more&#xA;information." ilk="function" name="update_page" signature="(&amp;block)" />
            <scope doc="Works like update_page but wraps the generated JavaScript in&#xA;a &lt;script&gt; tag. Use this to include generated&#xA;JavaScript in an ERb template. See JavaScriptGenerator for&#xA;more information.html_options may be a hash&#xA;of &lt;script&gt; attributes to be passed to&#xA;ActionView::Helpers::JavaScriptHelper#javascript_tag." ilk="function" name="update_page_tag" signature="(html_options = {}, &amp;block)" />
            <variable attributes="__const__" citdl="Set" name="AJAX_OPTIONS" />
            <variable attributes="__const__" citdl="Set" name="CALLBACKS" />
          </scope>
          <scope ilk="namespace" name="ScriptaculousHelper">
            <scope doc="Makes the element with the DOM ID specified by element_id&#xA;draggable.Example:  &lt;%= draggable_element(&quot;my_image&quot;, :revert =&gt; true)&#xA;You can change the behaviour with various options, see&#xA;http://script.aculo.us for more documentation." ilk="function" name="draggable_element" signature="(element_id, options = {})" />
            <scope ilk="function" name="draggable_element_js" />
            <scope doc="Makes the element with the DOM ID specified by element_id&#xA;receive dropped draggable elements (created by&#xA;draggable_element). and make an AJAX call By default, the&#xA;action called gets the DOM ID of the element as parameter.&#xA;Example:  &lt;%= drop_receiving_element(&quot;my_cart&quot;, :url =&gt;&#xA;" ilk="function" name="drop_receiving_element" signature="(element_id, options = {})" />
            <scope ilk="function" name="drop_receiving_element_js" />
            <scope doc="Makes the element with the DOM ID specified by element_id&#xA;sortable by drag-and-drop and make an Ajax call whenever the&#xA;sort order has changed. By default, the action called gets&#xA;the serialized sortable element as parameters.Example:&#xA;  &lt;%= sortable_element(&quot;my_list&quot;, :url =&gt; { :action =&gt; &quot;order&quot; }) %&gt;&#xA;" ilk="function" name="sortable_element" signature="(element_id, options = {})" />
            <scope ilk="function" name="sortable_element_js" />
            <scope doc="Returns a JavaScript snippet to be used on the Ajax&#xA;callbacks for starting visual effects.Example:  &lt;%= link_to_remote &quot;Reload&quot;, :update =&gt; &quot;posts&quot;,&#xA;        :url =&gt; { :action =&gt; &quot;reload&quot; },&#xA;        :complete =&gt; visual_effect(:highlight, &quot;posts&quot;, :duration =&gt; 0.5)&#xA;If no element_id is given, it&#xA;assumes &quot;element&quot; which should be a local variable&#xA;in the generated JavaScript execution context. This can be&#xA;used for example with drop_receiving_element:" ilk="function" name="visual_effect" signature="(name, element_id = false, js_options = {})" />
            <variable attributes="__const__" citdl="Array" name="TOGGLE_EFFECTS" />
          </scope>
          <scope ilk="namespace" name="TagHelper">
            <scope doc="Returns a CDATA section with the given content&lt;/tt&gt;. CDATA&#xA;sections are used to escape blocks of text containing&#xA;characters which would otherwise be recognized as markup.&#xA;CDATA sections begin with the&#xA;string &lt;tt&gt;&lt;![CDATA[&lt;/tt&gt; and end with (and may not&#xA;contain) the string &lt;tt&gt;]]&gt;." ilk="function" name="cdata_section" signature="(content)" />
            <scope doc="Returns an HTML block tag of type name&lt;/tt&gt; surrounding&#xA;the &lt;tt&gt;content&lt;/tt&gt;. Add HTML attributes by passing an&#xA;attributes hash to &lt;tt&gt;options&lt;/tt&gt;. For attributes with no&#xA;value like (disabled and readonly), give it a value of true&#xA;in the &lt;tt&gt;options hash. You can use symbols or strings for&#xA;the attribute names." ilk="function" name="content_tag" signature="(name, content_or_options_with_block = nil, options = nil, &amp;block)" />
            <scope doc="Returns an empty HTML tag of type name&lt;/tt&gt; which by default&#xA;is XHTML compliant. Setting &lt;tt&gt;open&lt;/tt&gt; to true will&#xA;create an open tag compatible with HTML 4.0 and below. Add&#xA;HTML attributes by passing an attributes hash&#xA;to &lt;tt&gt;options&lt;/tt&gt;. For attributes with no value&#xA;like (disabled and readonly), give it a value of true in&#xA;the &lt;tt&gt;options hash. You can use symbols or strings for the&#xA;attribute names." ilk="function" name="tag" signature="(name, options = nil, open = false)" />
            <import symbol="ERB::Util" />
          </scope>
          <scope ilk="namespace" name="TextHelper">
            <scope classrefs="Object" ilk="class" name="Cycle">
              <scope ilk="function" name="reset" />
              <scope ilk="function" name="values" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope doc="Turns all urls and email addresses into clickable links. The&#xA;link&lt;/tt&gt; parameter will limit what should be linked. You&#xA;can add html attributes to the links&#xA;using &lt;tt&gt;href_options&lt;/tt&gt;. Options&#xA;for &lt;tt&gt;link&lt;/tt&gt; are &lt;tt&gt;:all&lt;/tt&gt; (default), &lt;tt&gt;:email_addresses&lt;/tt&gt;, and &lt;tt&gt;:urls.&#xA;" ilk="function" name="auto_link" signature="(text, link = :all, href_options = {}, &amp;block)" />
            <scope doc="The preferred method of outputting text in your views is to&#xA;use the &lt;%= &quot;text&quot; %&gt; eRuby syntax. The&#xA;regular &lt;em&gt;puts&lt;/em&gt; and &lt;em&gt;print&lt;/em&gt; methods do not&#xA;operate as expected in an eRuby code block. If you&#xA;absolutely must output text within a code block, you can use&#xA;the concat method." ilk="function" name="concat" signature="(string, binding)" />
            <scope doc="Creates a Cycle object whose &lt;em&gt;to_s&lt;/em&gt; method cycles&#xA;through elements of an array every time it is called. This&#xA;can be used for example, to alternate classes for table&#xA;rows:  &lt;% @items.each do |item| %&gt;    &lt;tr&#xA;class=&quot;&lt;%= cycle(&quot;even&quot;, &quot;odd&quot;) -%&gt;&quot;&gt;&#xA;" ilk="function" name="cycle" signature="(first_value, *values)" />
            <scope doc="Extracts an excerpt from text&lt;/tt&gt; that matches the first&#xA;instance of &lt;tt&gt;phrase&lt;/tt&gt;. The &lt;tt&gt;radius&lt;/tt&gt; expands the&#xA;excerpt on each side of &lt;tt&gt;phrase&lt;/tt&gt; by the number of&#xA;characters defined in &lt;tt&gt;radius&lt;/tt&gt;. If the excerpt radius&#xA;overflows the beginning or end of the &lt;tt&gt;text&lt;/tt&gt;, then&#xA;the &lt;tt&gt;excerpt_string&lt;/tt&gt; will be prepended/appended&#xA;accordingly. If the &lt;tt&gt;phrase isn&apos;t found, nil is returned." ilk="function" name="excerpt" signature="(text, phrase, radius = 100, excerpt_string = &quot;...&quot;)" />
            <scope doc="Highlights phrase&lt;/tt&gt; everywhere it is found&#xA;in &lt;tt&gt;text&lt;/tt&gt; by inserting it into&#xA;a &lt;tt&gt;highlighter&lt;/tt&gt; string. The highlighter can be&#xA;specialized by passing &lt;tt&gt;highlighter as a single-quoted&#xA;string with \1 where the phrase is to be inserted.&#xA;  highlight(&apos;You searched for: rails&apos;, &apos;rails&apos;)" ilk="function" name="highlight" signature="(text, phrase, highlighter = &apos;&lt;strong class=&quot;highlight&quot;&gt;\1&lt;/strong&gt;&apos;)" />
            <scope doc="Attempts to pluralize the singular&lt;/tt&gt; word&#xA;unless &lt;tt&gt;count&lt;/tt&gt; is 1. If &lt;tt&gt;plural&lt;/tt&gt; is&#xA;supplied, it will use that when count is &gt; 1, if the&#xA;ActiveSupport Inflector is loaded, it will use the Inflector&#xA;to determine the plural form, otherwise it will just add&#xA;an &apos;s&apos; to the &lt;tt&gt;singular word." ilk="function" name="pluralize" signature="(count, singular, plural = nil)" />
            <scope doc="Resets a cycle so that it starts from the first element the&#xA;next time it is called. Pass in name to reset a named cycle." ilk="function" name="reset_cycle" signature="(name = &quot;default&quot;)" />
            <scope doc="Sanitizes the html by&#xA;converting &lt;form&gt; and &lt;script&gt; tags into regular&#xA;text, and removing all &quot;onxxx&quot; attributes (so that&#xA;arbitrary Javascript cannot be executed). It also removes&#xA;href= and src= attributes that start&#xA;with &quot;javascript:&quot;. You can modify what gets&#xA;sanitized by defining VERBOTEN_TAGS and VERBOTEN_ATTRS&#xA;before this Module is loaded." ilk="function" name="sanitize" signature="(html)" />
            <scope doc="Returns text&lt;/tt&gt; transformed into HTML using simple&#xA;formatting rules. Two or more consecutive&#xA;newlines(&lt;tt&gt;&#xA;&#xA;&lt;/tt&gt;) are considered as a paragraph and&#xA;wrapped in &lt;tt&gt;&lt;p&gt;&lt;/tt&gt; tags. One&#xA;newline (&lt;tt&gt;&#xA;&lt;/tt&gt;) is considered as a linebreak and&#xA;a &lt;tt&gt;&lt;br /&gt;&lt;/tt&gt; tag is appended. This method does&#xA;not remove the newlines from the &lt;tt&gt;text." ilk="function" name="simple_format" signature="(text)" />
            <scope doc="Strips link tags from text leaving just the link label.&#xA;  strip_links(&apos;&lt;a&#xA;href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby on&#xA;Rails&lt;/a&gt;&apos;)   =&gt; Ruby on Rails" ilk="function" name="strip_links" signature="(text)" />
            <scope doc="Strips all HTML tags from the html, including comments. This&#xA;uses the html-scanner tokenizer and so its HTML parsing&#xA;ability is limited by that of html-scanner." ilk="function" name="strip_tags" signature="(html)" />
            <scope doc="If text&lt;/tt&gt; is longer&#xA;than &lt;tt&gt;length&lt;/tt&gt;, &lt;tt&gt;text&lt;/tt&gt; will be truncated to the&#xA;length of &lt;tt&gt;length&lt;/tt&gt; and the last three characters will&#xA;be replaced with the &lt;tt&gt;truncate_string.  truncate(&quot;Once upon a time in a world far far away&quot;, 14)&#xA;   =&gt; Once upon a..." ilk="function" name="truncate" signature="(text, length = 30, truncate_string = &quot;...&quot;)" />
            <scope doc="Wraps the text&lt;/tt&gt; into lines no longer&#xA;than &lt;tt&gt;line_width&lt;/tt&gt; width. This method breaks on the&#xA;first whitespace character that does not&#xA;exceed &lt;tt&gt;line_width.  word_wrap(&apos;Once upon a time&apos;, 4)&#xA;   =&gt; Once&#xA;upon&#xA;a&#xA;time" ilk="function" name="word_wrap" signature="(text, line_width = 80)" />
            <variable attributes="__const__" citdl="Regexp" name="AUTO_LINK_RE" />
            <variable attributes="__const__" citdl="Regexp" name="VERBOTEN_ATTRS" />
            <variable attributes="__const__" citdl="Array" name="VERBOTEN_TAGS" />
          </scope>
          <scope ilk="namespace" name="UrlHelper">
            <scope doc="Generates a form containing a single button that submits to&#xA;the URL created by the set of options&lt;/tt&gt;. This is the&#xA;safest method to ensure links that cause changes to your&#xA;data are not triggered by search bots or accelerators. If&#xA;the HTML button does not work with your layout, you can also&#xA;consider using the link_to method with the &lt;tt&gt;:method&#xA;modifier as described in the link_to documentation." ilk="function" name="button_to" signature="(name, options = {}, html_options = {})" />
            <scope doc="True if the current request uri was generated by the given&#xA;options." ilk="function" name="current_page?" signature="(options)" />
            <scope doc="DEPRECATED. It is reccommended to use the&#xA;AssetTagHelper::image_tag within a link_to method to&#xA;generate a linked image.  link_to(image_tag(&quot;rss&quot;, :size =&gt; &quot;30x45&quot;, :border =&gt; 0), &quot;http://www.example.com&quot;)&#xA;" ilk="function" name="link_image_to" signature="(src, options = {}, html_options = {}, *parameters_for_method_reference)" />
            <scope ilk="function" name="link_to" signature="(name, options = {}, html_options = nil, *parameters_for_method_reference)" />
            <scope doc="Creates a link tag of the given name&lt;/tt&gt; using a URL&#xA;created by the set of &lt;tt&gt;options&lt;/tt&gt; if &lt;tt&gt;condition is&#xA;true, in which case only the name is returned. To specialize&#xA;the default behavior, you can pass a block that accepts the&#xA;name or the full argument list for link_to_unless (see the&#xA;examples in link_to_unless)." ilk="function" name="link_to_if" signature="(condition, name, options = {}, html_options = {}, *parameters_for_method_reference, &amp;block)" />
            <scope doc="Alias for #link_image_to" ilk="function" name="link_to_image" signature="(src, options = {}, html_options = {}, *parameters_for_method_reference)" />
            <scope doc="Creates a link tag of the given name&lt;/tt&gt; using a URL&#xA;created by the set of &lt;tt&gt;options&lt;/tt&gt; unless &lt;tt&gt;condition&#xA;is true, in which case only the name is returned. To&#xA;specialize the default behavior, you can pass a block that&#xA;accepts the name or the full argument list for&#xA;link_to_unless (see the example)." ilk="function" name="link_to_unless" signature="(condition, name, options = {}, html_options = {}, *parameters_for_method_reference, &amp;block) {|name| ...}" />
            <scope doc="Creates a link tag of the given name&lt;/tt&gt; using a URL&#xA;created by the set of &lt;tt&gt;options unless the current request&#xA;uri is the same as the links, in which case only the name is&#xA;returned (or the given block is yielded, if one exists).&#xA;Refer to the documentation for link_to_unless for block&#xA;usage." ilk="function" name="link_to_unless_current" signature="(name, options = {}, html_options = {}, *parameters_for_method_reference, &amp;block)" />
            <scope ilk="function" name="mail_to" signature="(email_address, name = nil, html_options = {})" />
            <scope doc="Returns the URL for the set of options provided. This takes&#xA;the same options as url_for in action controller. For a&#xA;list, see the documentation for&#xA;ActionController::Base#url_for. Note that it&apos;ll&#xA;set :only_path =&gt; true so you&apos;ll get the&#xA;relative /controller/action instead of the fully qualified&#xA;http://example.com/controller/action." ilk="function" name="url_for" signature="(options = {}, *parameters_for_method_reference)" />
            <import symbol="ActionView::Helpers::JavaScriptHelper" />
            <variable attributes="__const__" citdl="String" name="JAVASCRIPT_PATH" />
          </scope>
        </scope>
        <scope ilk="namespace" name="Partials">
          <scope ilk="function" name="render_collection_of_partials" />
          <scope ilk="function" name="render_partial" />
          <scope ilk="function" name="render_partial_collection" />
        </scope>
        <scope classrefs="ActionView::ActionViewError" ilk="class" name="TemplateError">
          <scope ilk="function" name="file_name" />
          <scope ilk="function" name="line_number" />
          <scope ilk="function" name="original_exception" />
          <scope ilk="function" name="source_extract" />
          <scope ilk="function" name="sub_template_message" />
          <scope ilk="function" name="sub_template_of" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Fixnum" name="SOURCE_CODE_RADIUS" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
      </scope>
      <scope ilk="namespace" name="ActionWebService">
        <scope classrefs="StandardError" ilk="class" name="ActionWebServiceError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="API">
          <scope classrefs="Object" ilk="class" name="Base">
            <scope ilk="namespace" name="Subclasses">
              <scope attributes="__classmethod__" ilk="function" name="included" />
              <scope ilk="function" name="included" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="allow_active_record_expects" />
            <scope attributes="__classmethod__" ilk="function" name="allow_active_record_expects=" />
            <scope attributes="__classmethod__" ilk="function" name="api_method" />
            <scope attributes="__classmethod__" ilk="function" name="api_method_instance" />
            <scope attributes="__classmethod__" ilk="function" name="api_method_name" />
            <scope attributes="__classmethod__" ilk="function" name="api_methods" />
            <scope attributes="__classmethod__" ilk="function" name="default_api_method" />
            <scope attributes="__classmethod__" ilk="function" name="default_api_method=" />
            <scope attributes="__classmethod__" ilk="function" name="default_api_method_instance" />
            <scope attributes="__classmethod__" ilk="function" name="has_api_method?" />
            <scope attributes="__classmethod__" ilk="function" name="has_public_api_method?" />
            <scope attributes="__classmethod__" ilk="function" name="inflect_names" />
            <scope attributes="__classmethod__" ilk="function" name="inflect_names=" />
            <scope attributes="__classmethod__" ilk="function" name="public_api_method_instance" />
            <scope attributes="__classmethod__" ilk="function" name="public_api_method_name" />
            <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
            <scope attributes="__classmethod__" ilk="function" name="soap_client" />
            <scope attributes="__classmethod__" ilk="function" name="xmlrpc_client" />
            <scope ilk="function" name="allow_active_record_expects" />
            <scope ilk="function" name="allow_active_record_expects=" />
            <scope ilk="function" name="default_api_method" />
            <scope ilk="function" name="default_api_method=" />
            <scope ilk="function" name="inflect_names" />
            <scope ilk="function" name="inflect_names=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Reloadable" />
            <import symbol="Reloadable::Subclasses" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Method">
            <scope doc="Backwards compatibility with previous API" ilk="function" name="[]" signature="(sig_type)" />
            <scope doc="Casts a set of Ruby values into the expected Ruby values" ilk="function" name="cast_expects" signature="(params)" />
            <scope doc="Cast a Ruby return value into the expected Ruby value" ilk="function" name="cast_returns" signature="(return_value)" />
            <scope ilk="function" name="expects" />
            <scope doc="Returns the index of the first expected parameter with the&#xA;given name" ilk="function" name="expects_index_of" signature="(param_name)" />
            <scope doc="Returns a hash keyed by parameter name for the given&#xA;parameter list" ilk="function" name="expects_to_hash" signature="(params)" />
            <scope doc="The list of parameter names for this method" ilk="function" name="param_names" signature="()" />
            <scope ilk="function" name="public_name" />
            <scope ilk="function" name="returns" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
        </scope>
        <scope classrefs="ActionWebService::BaseType" ilk="class" name="ArrayType">
          <scope ilk="function" name="element_type" />
          <import symbol="ActionWebService::SignatureTypes" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Base">
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="ContainerError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="add_web_service_api_callback" />
          <scope attributes="__classmethod__" ilk="function" name="add_web_service_definition_callback" />
          <scope attributes="__classmethod__" ilk="function" name="after_invocation" />
          <scope attributes="__classmethod__" ilk="function" name="after_invocation_interceptors" />
          <scope attributes="__classmethod__" ilk="function" name="append_after_invocation" />
          <scope attributes="__classmethod__" ilk="function" name="append_before_invocation" />
          <scope attributes="__classmethod__" ilk="function" name="before_invocation" />
          <scope attributes="__classmethod__" ilk="function" name="before_invocation_interceptors" />
          <scope attributes="__classmethod__" ilk="function" name="excluded_intercepted_methods" />
          <scope attributes="__classmethod__" ilk="function" name="has_web_service?" />
          <scope attributes="__classmethod__" ilk="function" name="included_intercepted_methods" />
          <scope attributes="__classmethod__" ilk="function" name="inherited_with_action_controller" />
          <scope attributes="__classmethod__" ilk="function" name="prepend_after_invocation" />
          <scope attributes="__classmethod__" ilk="function" name="prepend_before_invocation" />
          <scope attributes="__classmethod__" ilk="function" name="register_protocol" />
          <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
          <scope attributes="__classmethod__" ilk="function" name="require_web_service_api" />
          <scope attributes="__classmethod__" ilk="function" name="web_client_api" />
          <scope attributes="__classmethod__" ilk="function" name="web_service" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_api" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_api_with_require" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_exception_reporting" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_exception_reporting=" />
          <scope attributes="__classmethod__" ilk="function" name="web_service_scaffold" />
          <scope attributes="__classmethod__" ilk="function" name="web_services" />
          <scope ilk="function" name="after_invocation" />
          <scope ilk="function" name="append_features" />
          <scope ilk="function" name="before_invocation" />
          <scope ilk="function" name="perform_invocation" />
          <scope ilk="function" name="perform_invocation_with_interception" />
          <scope ilk="function" name="perform_invocation_without_interception" />
          <scope ilk="function" name="web_service_exception_reporting" />
          <scope ilk="function" name="web_service_exception_reporting=" />
          <scope ilk="function" name="web_service_object" />
          <import symbol="ActionWebService::Container::Direct" />
          <import symbol="ActionWebService::Invocation" />
          <import symbol="ActionWebService::Invocation::InstanceMethods" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
        </scope>
        <scope classrefs="String" ilk="class" name="Base64">
          <import symbol="ActiveSupport::CoreExtensions::String::Access" />
          <import symbol="ActiveSupport::CoreExtensions::String::Conversions" />
          <import symbol="ActiveSupport::CoreExtensions::String::Inflections" />
          <import symbol="ActiveSupport::CoreExtensions::String::Iterators" />
          <import symbol="ActiveSupport::CoreExtensions::String::StartsEndsWith" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Comparable" />
          <import symbol="Enumerable" />
        </scope>
        <scope classrefs="Object" ilk="class" name="BaseType">
          <scope ilk="function" name="array?" />
          <scope ilk="function" name="custom?" />
          <scope ilk="function" name="human_name" />
          <scope ilk="function" name="spec" />
          <scope ilk="function" name="structured?" />
          <scope ilk="function" name="type_class" />
          <import symbol="ActionWebService::SignatureTypes" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope ilk="namespace" name="Casting">
          <scope classrefs="Object" ilk="class" name="BaseCaster">
            <scope attributes="__classmethod__" ilk="function" name="cast" />
            <scope attributes="__classmethod__" ilk="function" name="cast_base_type" />
            <scope attributes="__classmethod__" ilk="function" name="cast_expects" />
            <scope attributes="__classmethod__" ilk="function" name="cast_returns" />
            <scope attributes="__classmethod__" ilk="function" name="cast_to_structured_type" />
            <scope ilk="function" name="cast_expects" />
            <scope ilk="function" name="cast_returns" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="CastingError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
        </scope>
        <scope ilk="namespace" name="Client">
          <scope classrefs="Object" ilk="class" name="Base">
            <scope ilk="function" name="method_missing" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="StandardError" ilk="class" name="ClientError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope classrefs="ActionWebService::Client::Base" ilk="class" name="Soap">
            <scope classrefs="SOAP::RPC::Driver" ilk="class" name="SoapDriver">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope ilk="function" name="perform_invocation" signature="(method_name, args)" />
            <scope ilk="function" name="soap_action" signature="(method_name)" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionWebService::Client::Base" ilk="class" name="XmlRpc">
            <scope ilk="function" name="perform_invocation" signature="(method_name, args)" />
            <scope ilk="function" name="public_name" signature="(method_name)" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
        </scope>
        <scope ilk="namespace" name="Container">
          <scope ilk="namespace" name="ActionController">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="require_web_service_api" />
              <scope ilk="function" name="web_client_api" signature="(name, protocol, endpoint_uri, options={})" />
              <scope ilk="function" name="web_service_api_with_require" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="Delegated">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="add_web_service_definition_callback" />
              <scope doc="Whether this service contains a service with the given name" ilk="function" name="has_web_service?" signature="(name)" />
              <scope ilk="function" name="web_service" signature="(name, object=nil, &amp;block)" />
              <scope ilk="function" name="web_services" />
            </scope>
            <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="ContainerError">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
              <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
              <scope ilk="function" name="web_service_object" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="Direct">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="add_web_service_api_callback" />
              <scope ilk="function" name="web_service_api" signature="(definition=nil)" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
        </scope>
        <scope ilk="namespace" name="Dispatcher">
          <scope ilk="namespace" name="ActionController">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="inherited_with_action_controller" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
            </scope>
            <scope ilk="namespace" name="WsdlAction">
              <scope ilk="function" name="wsdl" />
              <variable attributes="__const__" citdl="String" name="SoapEncodingNs" />
              <variable attributes="__const__" citdl="String" name="SoapHttpTransport" />
              <variable attributes="__const__" citdl="String" name="SoapNs" />
              <variable attributes="__const__" citdl="String" name="WsdlNs" />
              <variable attributes="__const__" citdl="String" name="XsdNs" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="DispatcherError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope ilk="namespace" name="InstanceMethods">
            <scope classrefs="Object" ilk="class" name="Invocation">
              <scope ilk="function" name="api" />
              <scope ilk="function" name="api=" />
              <scope ilk="function" name="api_method" />
              <scope ilk="function" name="api_method=" />
              <scope ilk="function" name="method_named_params" />
              <scope ilk="function" name="method_named_params=" />
              <scope ilk="function" name="method_ordered_params" />
              <scope ilk="function" name="method_ordered_params=" />
              <scope ilk="function" name="protocol" />
              <scope ilk="function" name="protocol=" />
              <scope ilk="function" name="protocol_options" />
              <scope ilk="function" name="protocol_options=" />
              <scope ilk="function" name="service" />
              <scope ilk="function" name="service=" />
              <scope ilk="function" name="service_name" />
              <scope ilk="function" name="service_name=" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope ilk="namespace" name="Invocation">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Alias for #append_after_invocation" ilk="function" name="after_invocation" signature="(*interceptors, &amp;block)" />
            <scope ilk="function" name="after_invocation_interceptors" />
            <scope doc="Appends the given interceptors to be&#xA;called &lt;em&gt;after&lt;/em&gt; method invocation." ilk="function" name="append_after_invocation" signature="(*interceptors, &amp;block)" />
            <scope doc="Appends the given interceptors to be&#xA;called &lt;em&gt;before&lt;/em&gt; method invocation." ilk="function" name="append_before_invocation" signature="(*interceptors, &amp;block)" />
            <scope doc="Alias for #append_before_invocation" ilk="function" name="before_invocation" signature="(*interceptors, &amp;block)" />
            <scope ilk="function" name="before_invocation_interceptors" />
            <scope ilk="function" name="excluded_intercepted_methods" />
            <scope ilk="function" name="included_intercepted_methods" />
            <scope doc="Prepends the given interceptors to be&#xA;called &lt;em&gt;after&lt;/em&gt; method invocation." ilk="function" name="prepend_after_invocation" signature="(*interceptors, &amp;block)" />
            <scope doc="Prepends the given interceptors to be&#xA;called &lt;em&gt;before&lt;/em&gt; method invocation." ilk="function" name="prepend_before_invocation" signature="(*interceptors, &amp;block)" />
          </scope>
          <scope ilk="namespace" name="InstanceMethods">
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="after_invocation" />
            <scope ilk="function" name="append_features" />
            <scope ilk="function" name="before_invocation" />
            <scope ilk="function" name="perform_invocation" />
            <scope ilk="function" name="perform_invocation_with_interception" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="InvocationError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope ilk="namespace" name="Protocol">
          <scope classrefs="Object" ilk="class" name="AbstractProtocol">
            <scope ilk="function" name="decode_action_pack_request" />
            <scope ilk="function" name="decode_request" />
            <scope ilk="function" name="decode_response" />
            <scope ilk="function" name="encode_action_pack_request" />
            <scope ilk="function" name="encode_request" />
            <scope ilk="function" name="encode_response" />
            <scope ilk="function" name="protocol_client" />
            <scope ilk="function" name="register_api" />
            <scope ilk="function" name="setup" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="Discovery">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="register_protocol" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="included" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="ProtocolError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Request">
            <scope ilk="function" name="api" />
            <scope ilk="function" name="api=" />
            <scope ilk="function" name="api_method" />
            <scope ilk="function" name="api_method=" />
            <scope ilk="function" name="method_name" />
            <scope ilk="function" name="method_name=" />
            <scope ilk="function" name="method_params" />
            <scope ilk="function" name="method_params=" />
            <scope ilk="function" name="protocol" />
            <scope ilk="function" name="protocol_options" />
            <scope ilk="function" name="service_name" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Response">
            <scope ilk="function" name="body" />
            <scope ilk="function" name="content_type" />
            <scope ilk="function" name="return_value" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActionController::AbstractRequest" ilk="class" name="SimpleActionPackRequest">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="Soap">
            <scope classrefs="SOAP::Mapping::Registry" ilk="class" name="Registry">
              <scope classrefs="Object" ilk="class" name="Map">
                <scope ilk="function" name="add" />
                <scope ilk="function" name="clear" />
                <scope ilk="function" name="find_mapped_obj_class" />
                <scope ilk="function" name="find_mapped_soap_class" />
                <scope ilk="function" name="init" />
                <scope ilk="function" name="obj2soap" />
                <scope ilk="function" name="soap2obj" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
              </scope>
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <variable attributes="__const__" citdl="SOAP::Mapping::ArrayFactory_" name="ArrayFactory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::Base64Factory_" name="Base64Factory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::BasetypeFactory_" name="BasetypeFactory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::DateTimeFactory_" name="DateTimeFactory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::HashFactory_" name="HashFactory" />
              <variable attributes="__const__" citdl="Array" name="RubyOriginalMap" />
              <variable attributes="__const__" citdl="Array" name="SOAPBaseMap" />
              <variable attributes="__const__" citdl="SOAP::Mapping::StringFactory_" name="StringFactory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::TypedArrayFactory_" name="TypedArrayFactory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::TypedStructFactory_" name="TypedStructFactory" />
              <variable attributes="__const__" citdl="SOAP::Mapping::URIFactory_" name="URIFactory" />
            </scope>
            <scope classrefs="SOAP::Mapping::Factory" ilk="class" name="SoapActiveRecordStructFactory">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="SOAP::Mapping::TraverseSupport" />
            </scope>
            <scope classrefs="SOAP::Mapping::Factory" ilk="class" name="SoapBase64Factory">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="SOAP::Mapping::TraverseSupport" />
            </scope>
            <scope classrefs="Object" ilk="class" name="SoapBinding">
              <scope ilk="function" name="element_binding" />
              <scope ilk="function" name="mapping" />
              <scope ilk="function" name="qname" />
              <scope ilk="function" name="qualified_type_name" signature="(ns=nil)" />
              <scope ilk="function" name="type_name" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="Object" ilk="class" name="SoapMarshaler">
              <scope ilk="function" name="annotate_arrays" signature="(binding, value)" />
              <scope doc="Alias for #register_type" ilk="function" name="lookup_type" signature="(type)" />
              <scope ilk="function" name="namespace" />
              <scope ilk="function" name="register_type" signature="(type)" />
              <scope ilk="function" name="registry" />
              <scope ilk="function" name="ruby_to_soap" signature="(obj)" />
              <scope ilk="function" name="soap_to_ruby" signature="(obj)" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class" name="SoapProtocol">
              <scope attributes="__classmethod__" ilk="function" name="create" />
              <scope ilk="function" name="marshaler" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <variable attributes="__const__" citdl="String" name="AWSEncoding" />
              <variable attributes="__const__" citdl="String" name="XSDEncoding" />
            </scope>
            <scope classrefs="SOAP::Mapping::Factory" ilk="class" name="SoapTypedArrayFactory">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="SOAP::Mapping::TraverseSupport" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="included" />
          </scope>
          <scope ilk="namespace" name="XmlRpc">
            <scope classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class" name="XmlRpcProtocol">
              <scope attributes="__classmethod__" ilk="function" name="create" />
              <scope ilk="function" name="value_to_xmlrpc_wire_format" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="included" />
          </scope>
        </scope>
        <scope ilk="namespace" name="Scaffolding">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Generates web service invocation scaffolding for the current&#xA;controller. The given action name can then be used as the&#xA;entry point for invoking API methods from a web browser." ilk="function" name="web_service_scaffold" signature="(action_name)" />
          </scope>
          <scope ilk="namespace" name="Helpers">
            <scope ilk="function" name="method_parameter_input_fields" />
            <scope ilk="function" name="method_parameter_label" />
            <scope ilk="function" name="service_method_list" />
          </scope>
          <scope classrefs="ActionWebService::ActionWebServiceError" ilk="class" name="ScaffoldingError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope ilk="namespace" name="WebServiceModel">
            <scope classrefs="Object" ilk="class" name="Container">
              <scope ilk="function" name="dispatching_mode" />
              <scope ilk="function" name="services" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope classrefs="Object" ilk="class" name="Service">
              <scope ilk="function" name="api" />
              <scope ilk="function" name="api_methods" />
              <scope ilk="function" name="api_methods_full" />
              <scope ilk="function" name="object" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope ilk="namespace" name="SignatureTypes">
          <scope attributes="__classmethod__" ilk="function" name="canonical_signature" />
          <scope attributes="__classmethod__" ilk="function" name="canonical_signature_entry" />
          <scope attributes="__classmethod__" ilk="function" name="canonical_type" />
          <scope attributes="__classmethod__" ilk="function" name="canonical_type_class" />
          <scope attributes="__classmethod__" ilk="function" name="canonical_type_name" />
          <scope attributes="__classmethod__" ilk="function" name="class_to_type_name" />
          <scope attributes="__classmethod__" ilk="function" name="derived_from?" />
          <scope attributes="__classmethod__" ilk="function" name="symbol_name" />
          <scope attributes="__classmethod__" ilk="function" name="type_name_to_class" />
          <scope ilk="function" name="canonical_signature" />
          <scope ilk="function" name="canonical_signature_entry" />
          <scope ilk="function" name="canonical_type" />
          <scope ilk="function" name="canonical_type_class" />
          <scope ilk="function" name="canonical_type_name" />
          <scope ilk="function" name="class_to_type_name" />
          <scope ilk="function" name="derived_from?" />
          <scope ilk="function" name="symbol_name" />
          <scope ilk="function" name="type_name_to_class" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Struct">
          <scope attributes="__classmethod__" doc="Creates a structure member with the specified&#xA;name&lt;/tt&gt; and &lt;tt&gt;type. Generates accessor methods for&#xA;reading and writing the member value." ilk="function" name="member" signature="(name, type)" />
          <scope attributes="__classmethod__" ilk="function" name="member_type" />
          <scope attributes="__classmethod__" ilk="function" name="members" />
          <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
          <scope doc="The member with the given name" ilk="function" name="[]" signature="(name)" />
          <scope doc="Iterates through each member" ilk="function" name="each_pair" signature="(&amp;block) {|name, self.__send__(name)| ...}" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
        </scope>
        <scope classrefs="ActionWebService::BaseType" ilk="class" name="StructuredType">
          <scope ilk="function" name="each_member" />
          <import symbol="ActionWebService::SignatureTypes" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
      </scope>
      <scope ilk="namespace" name="ActiveRecord">
        <scope classrefs="Object" ilk="class" name="AbstractAdapter">
          <scope ilk="function" name="clear_query_cache" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="StandardError" ilk="class" name="ActiveRecordError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Acts">
          <scope ilk="namespace" name="List">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="acts_as_list" signature="(options = {})" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
              <scope doc="Decrease the position of this item without adjusting the&#xA;rest of the list." ilk="function" name="decrement_position" signature="()" />
              <scope doc="Return true if this object is the first in the list." ilk="function" name="first?" signature="()" />
              <scope doc="Return the next higher item in the list." ilk="function" name="higher_item" signature="()" />
              <scope ilk="function" name="in_list?" />
              <scope doc="Increase the position of this item without adjusting the&#xA;rest of the list." ilk="function" name="increment_position" signature="()" />
              <scope ilk="function" name="insert_at" signature="(position = 1)" />
              <scope doc="Return true if this object is the last in the list." ilk="function" name="last?" signature="()" />
              <scope doc="Return the next lower item in the list." ilk="function" name="lower_item" signature="()" />
              <scope doc="Swap positions with the next higher item, if one exists." ilk="function" name="move_higher" signature="()" />
              <scope doc="Swap positions with the next lower item, if one exists." ilk="function" name="move_lower" signature="()" />
              <scope doc="Move to the bottom of the list. If the item is already in&#xA;the list, the items below it have their position adjusted&#xA;accordingly." ilk="function" name="move_to_bottom" signature="()" />
              <scope doc="Move to the top of the list. If the item is already in the&#xA;list, the items above it have their position adjusted&#xA;accordingly." ilk="function" name="move_to_top" signature="()" />
              <scope ilk="function" name="remove_from_list" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="NestedSet">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="acts_as_nested_set" signature="(options = {})" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
              <scope doc="Adds a child to this object in the tree. If this object&#xA;hasn&apos;t been initialized, it gets set up as a root node.&#xA;Otherwise, this method will update all of the other elements&#xA;in the tree and shift them to the right, keeping everything&#xA;balanced." ilk="function" name="add_child" signature="( child )" />
              <scope doc="Returns a set of all of its children and nested children" ilk="function" name="all_children" signature="()" />
              <scope doc="Prunes a branch off of the tree, shifting all of the&#xA;elements on the right back to the left so the counts still&#xA;work." ilk="function" name="before_destroy" signature="()" />
              <scope doc="Returns true is this is a child node" ilk="function" name="child?" signature="()" />
              <scope doc="Returns the number of nested children of this object." ilk="function" name="children_count" signature="()" />
              <scope doc="Returns a set of only this entry&apos;s immediate children" ilk="function" name="direct_children" signature="()" />
              <scope doc="Returns a set of itself and all of its nested children" ilk="function" name="full_set" signature="()" />
              <scope doc="Returns true is this is a root node." ilk="function" name="root?" signature="()" />
              <scope doc="Returns true if we have no idea what this is" ilk="function" name="unknown?" signature="()" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
          <scope ilk="namespace" name="Tree">
            <scope ilk="namespace" name="ClassMethods">
              <scope ilk="function" name="acts_as_tree" signature="(options = {})" />
            </scope>
            <scope ilk="namespace" name="InstanceMethods">
              <scope ilk="function" name="root" />
              <scope ilk="function" name="self_and_siblings" />
              <scope ilk="function" name="siblings" />
            </scope>
            <scope attributes="__classmethod__" ilk="function" name="append_features" />
            <scope ilk="function" name="append_features" />
          </scope>
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="AdapterNotFound">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="AdapterNotSpecified">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Aggregations">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="composed_of" signature="(part_id, options = {})" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="clear_aggregation_cache" />
          <scope ilk="function" name="included" />
        </scope>
        <scope ilk="namespace" name="Associations">
          <scope classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class" name="AssociationCollection">
            <scope ilk="function" name="&lt;&lt;" />
            <scope ilk="function" name="clear" />
            <scope ilk="function" name="concat" />
            <scope ilk="function" name="create" />
            <scope ilk="function" name="delete" />
            <scope ilk="function" name="delete_all" />
            <scope ilk="function" name="destroy_all" />
            <scope ilk="function" name="empty?" />
            <scope ilk="function" name="length" />
            <scope ilk="function" name="push" />
            <scope ilk="function" name="replace" />
            <scope ilk="function" name="size" />
            <scope ilk="function" name="to_ary" />
            <scope ilk="function" name="uniq" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="AssociationProxy">
            <scope ilk="function" name="aliased_table_name" />
            <scope ilk="function" name="conditions" />
            <scope ilk="function" name="dependent?" />
            <scope ilk="function" name="extract_options_from_args!" />
            <scope ilk="function" name="interpolate_sql" />
            <scope ilk="function" name="interpolate_sql_options!" />
            <scope ilk="function" name="loaded" />
            <scope ilk="function" name="loaded?" />
            <scope ilk="function" name="merge_options_from_reflection!" />
            <scope ilk="function" name="proxy_extend" />
            <scope ilk="function" name="proxy_respond_to?" />
            <scope ilk="function" name="quoted_record_ids" />
            <scope ilk="function" name="reload" />
            <scope ilk="function" name="reset" />
            <scope ilk="function" name="sanitize_sql" />
            <scope ilk="function" name="set_belongs_to_association_for" />
            <scope ilk="function" name="sql_conditions" />
            <scope ilk="function" name="target" />
            <scope ilk="function" name="target=" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class" name="BelongsToAssociation">
            <scope ilk="function" name="build" />
            <scope ilk="function" name="create" />
            <scope ilk="function" name="replace" />
            <scope ilk="function" name="updated?" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class" name="BelongsToPolymorphicAssociation">
            <scope ilk="function" name="replace" />
            <scope ilk="function" name="updated?" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="ClassMethods">
            <scope classrefs="Object" ilk="class" name="JoinDependency">
              <scope classrefs="ActiveRecord::Associations::ClassMethods::JoinDependency::JoinBase" ilk="class" name="JoinAssociation">
                <scope ilk="function" name="aliased_join_table_name" />
                <scope ilk="function" name="association_join" />
                <scope ilk="function" name="interpolate_sql" />
                <scope ilk="function" name="klass" />
                <scope ilk="function" name="options" />
                <scope ilk="function" name="parent_table_name" />
                <scope ilk="function" name="pluralize" />
                <scope ilk="function" name="reflection" />
                <scope ilk="function" name="source_reflection" />
                <scope ilk="function" name="table_alias_for" />
                <scope ilk="function" name="table_name_and_alias" />
                <scope ilk="function" name="through_reflection" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
              </scope>
              <scope classrefs="Object" ilk="class" name="JoinBase">
                <scope ilk="function" name="active_record" />
                <scope ilk="function" name="aliased_prefix" />
                <scope ilk="function" name="aliased_primary_key" />
                <scope ilk="function" name="aliased_table_name" />
                <scope ilk="function" name="column_names" />
                <scope ilk="function" name="column_names_with_alias" />
                <scope ilk="function" name="extract_record" />
                <scope ilk="function" name="instantiate" />
                <scope ilk="function" name="primary_key" />
                <scope ilk="function" name="record_id" />
                <scope ilk="function" name="reflections" />
                <scope ilk="function" name="sanitize_sql" />
                <scope ilk="function" name="table_joins" />
                <scope ilk="function" name="table_name" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
              </scope>
              <scope ilk="function" name="aliased_table_names_for" />
              <scope ilk="function" name="build" />
              <scope ilk="function" name="construct" />
              <scope ilk="function" name="construct_association" />
              <scope ilk="function" name="instantiate" />
              <scope ilk="function" name="join_associations" />
              <scope ilk="function" name="join_base" />
              <scope ilk="function" name="joins" />
              <scope ilk="function" name="reflections" />
              <scope ilk="function" name="table_aliases" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope ilk="function" name="belongs_to" signature="(association_id, options = {})" />
            <scope ilk="function" name="deprecated_add_association_relation" />
            <scope ilk="function" name="deprecated_association_comparison_method" />
            <scope ilk="function" name="deprecated_collection_build_method" />
            <scope ilk="function" name="deprecated_collection_count_method" />
            <scope ilk="function" name="deprecated_collection_create_method" />
            <scope ilk="function" name="deprecated_find_all_in_collection_method" />
            <scope ilk="function" name="deprecated_find_in_collection_method" />
            <scope ilk="function" name="deprecated_has_association_method" />
            <scope ilk="function" name="deprecated_has_collection_method" />
            <scope ilk="function" name="deprecated_remove_association_relation" />
            <scope ilk="function" name="has_and_belongs_to_many" signature="(association_id, options = {}, &amp;extension)" />
            <scope ilk="function" name="has_many" signature="(association_id, options = {}, &amp;extension)" />
            <scope ilk="function" name="has_one" signature="(association_id, options = {})" />
          </scope>
          <scope classrefs="ActiveRecord::Associations::AssociationCollection" ilk="class" name="HasAndBelongsToManyAssociation">
            <scope ilk="function" name="build" />
            <scope ilk="function" name="concat_with_attributes" />
            <scope ilk="function" name="construct_sql" />
            <scope ilk="function" name="count_records" />
            <scope ilk="function" name="delete_records" />
            <scope ilk="function" name="find" />
            <scope ilk="function" name="find_first" />
            <scope ilk="function" name="find_target" />
            <scope ilk="function" name="finding_with_ambigious_select?" />
            <scope ilk="function" name="insert_record" />
            <scope ilk="function" name="method_missing" />
            <scope ilk="function" name="push_with_attributes" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::Associations::AssociationCollection" ilk="class" name="HasManyAssociation">
            <scope ilk="function" name="build" />
            <scope ilk="function" name="cached_counter_attribute_name" />
            <scope ilk="function" name="construct_sql" />
            <scope ilk="function" name="count" />
            <scope ilk="function" name="count_records" />
            <scope ilk="function" name="delete_records" />
            <scope ilk="function" name="find" />
            <scope ilk="function" name="find_all" />
            <scope ilk="function" name="find_first" />
            <scope ilk="function" name="find_target" />
            <scope ilk="function" name="has_cached_counter?" />
            <scope ilk="function" name="insert_record" />
            <scope ilk="function" name="method_missing" />
            <scope ilk="function" name="target_obsolete?" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class" name="HasManyThroughAssociation">
            <scope ilk="function" name="construct_conditions" />
            <scope ilk="function" name="construct_from" />
            <scope ilk="function" name="construct_joins" />
            <scope ilk="function" name="construct_scope" />
            <scope ilk="function" name="construct_select" />
            <scope ilk="function" name="construct_sql" />
            <scope ilk="function" name="find" />
            <scope ilk="function" name="find_target" />
            <scope ilk="function" name="method_missing" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::Associations::BelongsToAssociation" ilk="class" name="HasOneAssociation">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
          <scope ilk="function" name="clear_association_cache" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="AssociationTypeMismatch">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="AttributeAssignmentError">
          <scope ilk="function" name="attribute" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Base">
          <scope classrefs="Object" ilk="class" name="ConnectionSpecification">
            <scope ilk="function" name="adapter_method" />
            <scope ilk="function" name="config" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="Subclasses">
            <scope attributes="__classmethod__" ilk="function" name="included" />
            <scope ilk="function" name="included" />
          </scope>
          <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="TransactionError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope attributes="__classmethod__" doc="Overwrite the default class equality method to provide&#xA;support for association proxies." ilk="function" name="===" signature="(object)" />
          <scope attributes="__classmethod__" ilk="function" name="abstract_class" />
          <scope attributes="__classmethod__" ilk="function" name="abstract_class=" />
          <scope attributes="__classmethod__" doc="Returns whether this class is a base AR class. If A is a&#xA;base class and B descends from A, then B.base_class will&#xA;return B." ilk="function" name="abstract_class?" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="accessible_attributes" />
          <scope attributes="__classmethod__" ilk="function" name="active_connection_name" />
          <scope attributes="__classmethod__" ilk="function" name="active_connections" />
          <scope attributes="__classmethod__" ilk="function" name="acts_as_list" />
          <scope attributes="__classmethod__" ilk="function" name="acts_as_nested_set" />
          <scope attributes="__classmethod__" ilk="function" name="acts_as_tree" />
          <scope attributes="__classmethod__" ilk="function" name="after_create" />
          <scope attributes="__classmethod__" ilk="function" name="after_destroy" />
          <scope attributes="__classmethod__" ilk="function" name="after_find" />
          <scope attributes="__classmethod__" ilk="function" name="after_initialize" />
          <scope attributes="__classmethod__" ilk="function" name="after_save" />
          <scope attributes="__classmethod__" ilk="function" name="after_update" />
          <scope attributes="__classmethod__" ilk="function" name="after_validation" />
          <scope attributes="__classmethod__" ilk="function" name="after_validation_on_create" />
          <scope attributes="__classmethod__" ilk="function" name="after_validation_on_update" />
          <scope attributes="__classmethod__" ilk="function" name="allow_concurrency" />
          <scope attributes="__classmethod__" ilk="function" name="allow_concurrency=" />
          <scope attributes="__classmethod__" doc="If this macro is used, only those attributes named in it&#xA;will be accessible for mass-assignment, such as&#xA;new(attributes)&lt;/tt&gt; and &lt;tt&gt;attributes=(attributes). This&#xA;is the more conservative choice for mass-assignment&#xA;protection. If you&apos;d rather start from an all-open default&#xA;and restrict attributes as needed, have a look at&#xA;attr_protected." ilk="function" name="attr_accessible" signature="(*attributes)" />
          <scope attributes="__classmethod__" doc="Attributes named in this macro are protected from&#xA;mass-assignment, such as&#xA;new(attributes)&lt;/tt&gt; and &lt;tt&gt;attributes=(attributes). Their&#xA;assignment will simply be ignored. Instead, you can use the&#xA;direct writer methods to do assignment. This is meant to&#xA;protect sensitive attributes from being overwritten by&#xA;URL/form hackers. Example:" ilk="function" name="attr_protected" signature="(*attributes)" />
          <scope attributes="__classmethod__" ilk="function" name="average" />
          <scope attributes="__classmethod__" doc="Returns the base AR subclass that this class descends from.&#xA;If A extends AR::Base, A.base_class will return A. If B&#xA;descends from A through some arbitrarily deep&#xA;hierarchy, B.base_class will return A." ilk="function" name="base_class" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="before_create" />
          <scope attributes="__classmethod__" ilk="function" name="before_destroy" />
          <scope attributes="__classmethod__" ilk="function" name="before_save" />
          <scope attributes="__classmethod__" ilk="function" name="before_update" />
          <scope attributes="__classmethod__" ilk="function" name="before_validation" />
          <scope attributes="__classmethod__" ilk="function" name="before_validation_on_create" />
          <scope attributes="__classmethod__" ilk="function" name="before_validation_on_update" />
          <scope attributes="__classmethod__" ilk="function" name="belongs_to" />
          <scope attributes="__classmethod__" doc="Log and benchmark multiple statements in a single block.&#xA;Example:  Project.benchmark(&quot;Creating project&quot;) do&#xA;    project = Project.create(&quot;name&quot; =&gt; &quot;stuff&quot;)&#xA;    project.create_manager(&quot;name&quot; =&gt; &quot;David&quot;)&#xA;    project.milestones &lt;&lt; Milestone.find(:all)&#xA;  end" ilk="function" name="benchmark" signature="(title, log_level = Logger::DEBUG, use_silence = true) {|| ...}" />
          <scope attributes="__classmethod__" ilk="function" name="calculate" />
          <scope attributes="__classmethod__" ilk="function" name="class_name" />
          <scope attributes="__classmethod__" ilk="function" name="class_name_of_active_record_descendant" />
          <scope attributes="__classmethod__" doc="Returns the class descending directly from ActiveRecord in&#xA;the inheritance hierarchy." ilk="function" name="class_of_active_record_descendant" signature="(klass)" />
          <scope attributes="__classmethod__" ilk="function" name="clear_active_connection_name" />
          <scope attributes="__classmethod__" doc="Clears the cache which maps classes to connections." ilk="function" name="clear_active_connections!" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="colorize_logging" />
          <scope attributes="__classmethod__" ilk="function" name="colorize_logging=" />
          <scope attributes="__classmethod__" ilk="function" name="column_methods_hash" />
          <scope attributes="__classmethod__" doc="Returns an array of column names as strings." ilk="function" name="column_names" signature="()" />
          <scope attributes="__classmethod__" doc="Returns an array of column objects for the table associated&#xA;with this class." ilk="function" name="columns" signature="()" />
          <scope attributes="__classmethod__" doc="Returns a hash of column objects for the table associated&#xA;with this class." ilk="function" name="columns_hash" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="composed_of" />
          <scope attributes="__classmethod__" doc="Returns the class type of the record using the current&#xA;module as a prefix. So descendents of&#xA;MyApp::Business::Account would appear as&#xA;MyApp::Business::AccountSubclass." ilk="function" name="compute_type" signature="(type_name)" />
          <scope attributes="__classmethod__" ilk="function" name="condition_block?" />
          <scope attributes="__classmethod__" ilk="function" name="configurations" />
          <scope attributes="__classmethod__" ilk="function" name="configurations=" />
          <scope attributes="__classmethod__" doc="Returns true if a connection that&apos;s accessible to this class&#xA;have already been opened." ilk="function" name="connected?" signature="()" />
          <scope attributes="__classmethod__" doc="Returns the connection currently associated with the class.&#xA;This can also be used to &quot;borrow&quot; the connection&#xA;to do database work that isn&apos;t easily done without going&#xA;straight to SQL." ilk="function" name="connection" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="connection=" signature="(spec)" />
          <scope attributes="__classmethod__" ilk="function" name="connection_without_query_cache=" />
          <scope attributes="__classmethod__" ilk="function" name="construct_calculation_sql" />
          <scope attributes="__classmethod__" doc="Returns an array of column objects where the primary id, all&#xA;columns ending in &quot;_id&quot; or &quot;_count&quot;, and&#xA;columns used for single table inheritance have been removed." ilk="function" name="content_columns" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="count" />
          <scope attributes="__classmethod__" doc="Returns the result of an SQL statement that should only&#xA;include a COUNT(*) in the SELECT part.  Product.count_by_sql &quot;SELECT COUNT(*) FROM sales s, customers c WHERE s.customer_id = c.id&quot;&#xA;" ilk="function" name="count_by_sql" signature="(sql)" />
          <scope attributes="__classmethod__" doc="Creates an object, instantly saves it as a record (if the&#xA;validation permits it), and returns it. If the save fails&#xA;under validations, the unsaved object is still returned." ilk="function" name="create" signature="(attributes = nil)" />
          <scope attributes="__classmethod__" ilk="function" name="create!" />
          <scope attributes="__classmethod__" ilk="function" name="create_reflection" />
          <scope attributes="__classmethod__" ilk="function" name="current_scoped_methods" />
          <scope attributes="__classmethod__" ilk="function" name="db2_connection" />
          <scope attributes="__classmethod__" doc="Works like increment_counter, but decrements instead." ilk="function" name="decrement_counter" signature="(counter_name, id)" />
          <scope attributes="__classmethod__" ilk="function" name="default_timezone" />
          <scope attributes="__classmethod__" ilk="function" name="default_timezone=" />
          <scope attributes="__classmethod__" doc="Deletes the record with the given id without instantiating&#xA;an object first. If an array of ids is provided, all of them&#xA;are deleted." ilk="function" name="delete" signature="(id)" />
          <scope attributes="__classmethod__" doc="Deletes all the records that match the condition without&#xA;instantiating the objects first (and hence not calling the&#xA;destroy method). Example:  Post.delete_all &quot;person_id = 5 AND (category = &apos;Something&apos; OR category = &apos;Else&apos;)&quot;&#xA;" ilk="function" name="delete_all" signature="(conditions = nil)" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_add_association_relation" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_association_comparison_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_collection_build_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_collection_count_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_collection_create_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_find_all_in_collection_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_find_in_collection_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_has_association_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_has_collection_method" />
          <scope attributes="__classmethod__" ilk="function" name="deprecated_remove_association_relation" />
          <scope attributes="__classmethod__" ilk="function" name="descends_from_active_record?" />
          <scope attributes="__classmethod__" doc="Deletes the record in the database and freezes this instance&#xA;to reflect that no changes should be made (since they can&apos;t&#xA;be persisted)." ilk="function" name="destroy" signature="()" />
          <scope attributes="__classmethod__" doc="Destroys the objects for all the records that match the&#xA;condition by instantiating each object and calling the&#xA;destroy method. Example:  Person.destroy_all &quot;last_login &lt; &apos;2004-04-04&apos;&quot;&#xA;" ilk="function" name="destroy_all" signature="(conditions = nil)" />
          <scope attributes="__classmethod__" ilk="function" name="encode_quoted_value" />
          <scope attributes="__classmethod__" doc="Establishes the connection to the database. Accepts a hash&#xA;as input where the :adapter key must be specified with the&#xA;name of a database adapter (in lower-case) example for&#xA;regular databases (MySQL, Postgresql, etc):  ActiveRecord::Base.establish_connection(&#xA;    :adapter  =&gt; &quot;mysql&quot;,    :host     =&gt; &quot;localhost&quot;,&#xA;" ilk="function" name="establish_connection" signature="(spec = nil)" />
          <scope attributes="__classmethod__" ilk="function" name="evaluate_condition" />
          <scope attributes="__classmethod__" ilk="function" name="execute_grouped_calculation" />
          <scope attributes="__classmethod__" ilk="function" name="execute_simple_calculation" />
          <scope attributes="__classmethod__" doc="Returns true if the given id represents the primary key of a&#xA;record in the database, false otherwise. You can also pass a&#xA;set of SQL conditions. Example:  Person.exists?(5)&#xA;  Person.exists?(&apos;5&apos;)  Person.exists?(:name =&gt; &quot;David&quot;)&#xA;  Person.exists?([&apos;name LIKE ?&apos;, &quot;%#{query}%&quot;])" ilk="function" name="exists?" signature="(id_or_conditions)" />
          <scope attributes="__classmethod__" ilk="function" name="extract_options_from_args!" />
          <scope attributes="__classmethod__" ilk="function" name="find" signature="(*args)" />
          <scope attributes="__classmethod__" ilk="function" name="find_all" />
          <scope attributes="__classmethod__" doc="Works like find(:all), but requires a complete SQL string.&#xA;Examples:  Post.find_by_sql &quot;SELECT p.*, c.author FROM&#xA;posts p, comments c WHERE p.id = c.post_id&quot;  Post.find_by_sql [&quot;SELECT * FROM posts WHERE author = ? AND created &gt; ?&quot;, author_id, start_date]&#xA;" ilk="function" name="find_by_sql" signature="(sql)" />
          <scope attributes="__classmethod__" ilk="function" name="find_first" />
          <scope attributes="__classmethod__" ilk="function" name="find_on_conditions" />
          <scope attributes="__classmethod__" ilk="function" name="firebird_connection" />
          <scope attributes="__classmethod__" ilk="function" name="generate_read_methods" />
          <scope attributes="__classmethod__" ilk="function" name="generate_read_methods=" />
          <scope attributes="__classmethod__" ilk="function" name="has_and_belongs_to_many" />
          <scope attributes="__classmethod__" ilk="function" name="has_many" />
          <scope attributes="__classmethod__" ilk="function" name="has_one" />
          <scope attributes="__classmethod__" ilk="function" name="human_attribute_name" />
          <scope attributes="__classmethod__" doc="Increments the specified counter by one. So&#xA;DiscussionBoard.increment_counter(&quot;post_count&quot;, discussion_board_id) would increment the &quot;post_count&quot; counter on the board responding to discussion_board_id. This is used for caching aggregate values, so that they don&apos;t need to be computed every time. Especially important for looping over a collection where each element require a number of aggregate values. Like the DiscussionBoard that needs to list both the number of posts and comments.&#xA;" ilk="function" name="increment_counter" signature="(counter_name, id)" />
          <scope attributes="__classmethod__" doc="Defines the column name for use with single table&#xA;inheritance -- can be set in subclasses like&#xA;so: self.inheritance_column = &quot;type_id&quot;" ilk="function" name="inheritance_column" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="inheritance_column=" />
          <scope attributes="__classmethod__" ilk="function" name="inherited" />
          <scope attributes="__classmethod__" ilk="function" name="instantiate" />
          <scope attributes="__classmethod__" ilk="function" name="instantiate_with_callbacks" />
          <scope attributes="__classmethod__" ilk="function" name="lock_mutex" />
          <scope attributes="__classmethod__" ilk="function" name="lock_optimistically" />
          <scope attributes="__classmethod__" ilk="function" name="lock_optimistically=" />
          <scope attributes="__classmethod__" ilk="function" name="locking_column" />
          <scope attributes="__classmethod__" ilk="function" name="log_connections" />
          <scope attributes="__classmethod__" ilk="function" name="logger" />
          <scope attributes="__classmethod__" ilk="function" name="logger=" />
          <scope attributes="__classmethod__" ilk="function" name="maximum" />
          <scope attributes="__classmethod__" ilk="function" name="minimum" />
          <scope attributes="__classmethod__" ilk="function" name="mysql_connection" />
          <scope attributes="__classmethod__" ilk="function" name="observers=" />
          <scope attributes="__classmethod__" ilk="function" name="oci_connection" />
          <scope attributes="__classmethod__" ilk="function" name="openbase_connection" />
          <scope attributes="__classmethod__" ilk="function" name="oracle_connection" />
          <scope attributes="__classmethod__" ilk="function" name="pluralize_table_names" />
          <scope attributes="__classmethod__" ilk="function" name="pluralize_table_names=" />
          <scope attributes="__classmethod__" ilk="function" name="postgresql_connection" />
          <scope attributes="__classmethod__" doc="Defines the primary key field -- can be overridden in&#xA;subclasses. Overwriting will negate any effect of the&#xA;primary_key_prefix_type setting, though." ilk="function" name="primary_key" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="primary_key=" />
          <scope attributes="__classmethod__" ilk="function" name="primary_key_prefix_type" />
          <scope attributes="__classmethod__" ilk="function" name="primary_key_prefix_type=" />
          <scope attributes="__classmethod__" ilk="function" name="protected_attributes" />
          <scope attributes="__classmethod__" ilk="function" name="quote" />
          <scope attributes="__classmethod__" ilk="function" name="quote_bound_value" />
          <scope attributes="__classmethod__" ilk="function" name="raise_if_bind_arity_mismatch" />
          <scope attributes="__classmethod__" ilk="function" name="read_methods" />
          <scope attributes="__classmethod__" ilk="function" name="record_timestamps" />
          <scope attributes="__classmethod__" ilk="function" name="record_timestamps=" />
          <scope attributes="__classmethod__" ilk="function" name="reflect_on_aggregation" />
          <scope attributes="__classmethod__" ilk="function" name="reflect_on_all_aggregations" />
          <scope attributes="__classmethod__" ilk="function" name="reflect_on_all_associations" />
          <scope attributes="__classmethod__" ilk="function" name="reflect_on_association" />
          <scope attributes="__classmethod__" ilk="function" name="reflections" />
          <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
          <scope attributes="__classmethod__" doc="Remove the connection for this class. This will close the&#xA;active connection and the defined connection (if they&#xA;exist). The result can be used as argument for&#xA;establish_connection, for easy re-establishing of the&#xA;connection." ilk="function" name="remove_connection" signature="(klass=self)" />
          <scope attributes="__classmethod__" ilk="function" name="replace_bind_variables" />
          <scope attributes="__classmethod__" ilk="function" name="replace_named_bind_variables" />
          <scope attributes="__classmethod__" doc="Resets all the cached information about columns, which will&#xA;cause them to be reloaded on the next request." ilk="function" name="reset_column_information" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="reset_column_information_and_inheritable_attributes_for_all_subclasses" />
          <scope attributes="__classmethod__" ilk="function" name="reset_locking_column" />
          <scope attributes="__classmethod__" ilk="function" name="reset_primary_key" />
          <scope attributes="__classmethod__" ilk="function" name="reset_sequence_name" />
          <scope attributes="__classmethod__" ilk="function" name="reset_subclasses" />
          <scope attributes="__classmethod__" ilk="function" name="reset_table_name" />
          <scope attributes="__classmethod__" ilk="function" name="retrieve_connection" />
          <scope attributes="__classmethod__" ilk="function" name="sanitize" />
          <scope attributes="__classmethod__" ilk="function" name="sanitize_conditions" />
          <scope attributes="__classmethod__" doc="Accepts an array, hash, or string of sql conditions and&#xA;sanitizes them into a valid SQL fragment.  [&quot;name=&apos;%s&apos; and group_id=&apos;%s&apos;&quot;, &quot;foo&apos;bar&quot;, 4]  returns  &quot;name=&apos;foo&apos;&apos;bar&apos; and group_id=&apos;4&apos;&quot;&#xA;  { :name =&gt; &quot;foo&apos;bar&quot;, :group_id =&gt; 4 }  returns &quot;name=&apos;foo&apos;&apos;bar&apos; and group_id=&apos;4&apos;&quot;&#xA;  &quot;name=&apos;foo&apos;&apos;bar&apos; and&#xA;group_id=&apos;4&apos;&quot; returns &quot;name=&apos;foo&apos;&apos;bar&apos; and&#xA;group_id=&apos;4&apos;&quot;" ilk="function" name="sanitize_sql" signature="(condition)" />
          <scope attributes="__classmethod__" ilk="function" name="schema_format" />
          <scope attributes="__classmethod__" ilk="function" name="schema_format=" />
          <scope attributes="__classmethod__" ilk="function" name="scope" />
          <scope attributes="__classmethod__" ilk="function" name="scoped?" />
          <scope attributes="__classmethod__" ilk="function" name="scoped_methods" />
          <scope attributes="__classmethod__" ilk="function" name="sequence_name" />
          <scope attributes="__classmethod__" ilk="function" name="sequence_name=" />
          <scope attributes="__classmethod__" doc="Specifies that the attribute by the name of&#xA;attr_name&lt;/tt&gt; should be serialized before saving to the&#xA;database and unserialized after loading from the database.&#xA;The serialization is done through YAML.&#xA;If &lt;tt&gt;class_name&lt;/tt&gt; is specified, the serialized object&#xA;must be of that class on retrieval&#xA;or &lt;tt&gt;SerializationTypeMismatch will be raised." ilk="function" name="serialize" signature="(attr_name, class_name = Object)" />
          <scope attributes="__classmethod__" doc="Returns a hash of all the attributes that have been&#xA;specified for serialization as keys and their class&#xA;restriction as values." ilk="function" name="serialized_attributes" signature="()" />
          <scope attributes="__classmethod__" doc="Sets the name of the inheritance column to use to the given&#xA;value, or (if the value # is nil or false) to the value&#xA;returned by the given block.Example:  class&#xA;Project &lt; ActiveRecord::Base    set_inheritance_column do&#xA;      original_inheritance_column + &quot;_id&quot;&#xA;    end" ilk="function" name="set_inheritance_column" signature="(value = nil, &amp;block)" />
          <scope attributes="__classmethod__" ilk="function" name="set_locking_column" />
          <scope attributes="__classmethod__" doc="Sets the name of the primary key column to use to the given&#xA;value, or (if the value is nil or false) to the value&#xA;returned by the given block.Example:  class&#xA;Project &lt; ActiveRecord::Base    set_primary_key &quot;sysid&quot;&#xA;  end" ilk="function" name="set_primary_key" signature="(value = nil, &amp;block)" />
          <scope attributes="__classmethod__" ilk="function" name="set_readonly_option!" />
          <scope attributes="__classmethod__" doc="Sets the name of the sequence to use when generating ids to&#xA;the given value, or (if the value is nil or false) to the&#xA;value returned by the given block. This is required for&#xA;Oracle and is useful for any database which relies on&#xA;sequences for primary key generation.If a sequence name is&#xA;not explicitly set when using Oracle or Firebird, it will&#xA;default to the commonly used pattern of: #{table_name}_seq" ilk="function" name="set_sequence_name" signature="(value = nil, &amp;block)" />
          <scope attributes="__classmethod__" doc="Sets the table name to use to the given value, or (if the&#xA;value is nil or false) to the value returned by the given&#xA;block.Example:  class Project &lt; ActiveRecord::Base&#xA;    set_table_name &quot;project&quot;  end" ilk="function" name="set_table_name" signature="(value = nil, &amp;block)" />
          <scope attributes="__classmethod__" doc="Silences the logger for the duration of the block." ilk="function" name="silence" signature="() {|| ...}" />
          <scope attributes="__classmethod__" ilk="function" name="single_threaded_active_connections" />
          <scope attributes="__classmethod__" ilk="function" name="single_threaded_scoped_methods" />
          <scope attributes="__classmethod__" ilk="function" name="sqlite3_connection" />
          <scope attributes="__classmethod__" ilk="function" name="sqlite_connection" />
          <scope attributes="__classmethod__" ilk="function" name="sqlserver_connection" />
          <scope attributes="__classmethod__" ilk="function" name="subclasses" />
          <scope attributes="__classmethod__" ilk="function" name="sum" />
          <scope attributes="__classmethod__" doc="Indicates whether the table associated with this class&#xA;exists" ilk="function" name="table_exists?" signature="()" />
          <scope attributes="__classmethod__" doc="Guesses the table name (in forced lower-case) based on the&#xA;name of the class in the inheritance hierarchy descending&#xA;directly from ActiveRecord. So if the hierarchy looks&#xA;like: Reply &lt; Message &lt; ActiveRecord, then Message is&#xA;used to guess the table name from even when called on Reply.&#xA;The rules used to do the guess are handled by the Inflector&#xA;class in Active Support, which knows almost all common&#xA;English inflections (report a bug if your inflection isn&apos;t&#xA;covered)." ilk="function" name="table_name" signature="()" />
          <scope attributes="__classmethod__" ilk="function" name="table_name=" />
          <scope attributes="__classmethod__" ilk="function" name="table_name_prefix" />
          <scope attributes="__classmethod__" ilk="function" name="table_name_prefix=" />
          <scope attributes="__classmethod__" ilk="function" name="table_name_suffix" />
          <scope attributes="__classmethod__" ilk="function" name="table_name_suffix=" />
          <scope attributes="__classmethod__" ilk="function" name="thread_safe_active_connections" />
          <scope attributes="__classmethod__" ilk="function" name="thread_safe_scoped_methods" />
          <scope attributes="__classmethod__" ilk="function" name="threaded_connections" />
          <scope attributes="__classmethod__" ilk="function" name="threaded_connections=" />
          <scope attributes="__classmethod__" ilk="function" name="timestamps_gmt" />
          <scope attributes="__classmethod__" ilk="function" name="timestamps_gmt=" />
          <scope attributes="__classmethod__" ilk="function" name="transaction" />
          <scope attributes="__classmethod__" ilk="function" name="unlock_mutex" />
          <scope attributes="__classmethod__" doc="Finds the record from the passed id&lt;/tt&gt;, instantly saves it&#xA;with the passed &lt;tt&gt;attributes (if the validation permits&#xA;it), and returns it. If the save fails under&#xA;validations, the unsaved object is still returned.&#xA;The arguments may also be given as arrays in which case the&#xA;update method is called for each pair of&#xA;id&lt;/tt&gt; and &lt;tt&gt;attributes and an array of objects is&#xA;returned." ilk="function" name="update" signature="(id, attributes)" />
          <scope attributes="__classmethod__" doc="Updates all records with the SET-part of an SQL update&#xA;statement in updates&lt;/tt&gt; and returns an integer with the&#xA;number of rows updated. A subset of the records can be&#xA;selected by specifying &lt;tt&gt;conditions. Example:  Billing.update_all &quot;category = &apos;authorized&apos;, approved = 1&quot;, &quot;author = &apos;David&apos;&quot;&#xA;" ilk="function" name="update_all" signature="(updates, conditions = nil)" />
          <scope attributes="__classmethod__" ilk="function" name="validate" />
          <scope attributes="__classmethod__" ilk="function" name="validate_find_options" />
          <scope attributes="__classmethod__" ilk="function" name="validate_on_create" />
          <scope attributes="__classmethod__" ilk="function" name="validate_on_update" />
          <scope attributes="__classmethod__" ilk="function" name="validates_acceptance_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_associated" />
          <scope attributes="__classmethod__" ilk="function" name="validates_confirmation_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_each" />
          <scope attributes="__classmethod__" ilk="function" name="validates_exclusion_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_format_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_inclusion_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_length_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_numericality_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_presence_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_size_of" />
          <scope attributes="__classmethod__" ilk="function" name="validates_uniqueness_of" />
          <scope attributes="__classmethod__" ilk="function" name="verification_timeout" />
          <scope attributes="__classmethod__" ilk="function" name="verification_timeout=" />
          <scope attributes="__classmethod__" ilk="function" name="verify_active_connections!" />
          <scope attributes="__classmethod__" doc="Works like with_scope, but discards any nested properties." ilk="function" name="with_exclusive_scope" signature="(method_scoping = {}, &amp;block)" />
          <scope attributes="__classmethod__" doc="Scope parameters to method calls within the block. Takes a&#xA;hash of method_name =&gt; parameters hash. method_name may&#xA;be :find or :create. :find parameters may include&#xA;the :conditions&lt;/tt&gt;, &lt;tt&gt;:joins&lt;/tt&gt;, &lt;tt&gt;:include&lt;/tt&gt;, &lt;tt&gt;:offset&lt;/tt&gt;, &lt;tt&gt;:limit&lt;/tt&gt;, and &lt;tt&gt;:readonly options. :create parameters are an attributes hash.&#xA;  Article.with_scope(:find =&gt; { :conditions =&gt; &quot;blog_id = 1&quot; }, :create =&gt; { :blog_id =&gt; 1 }) do&#xA;" ilk="function" name="with_scope" signature="(method_scoping = {}, action = :merge, &amp;block) {|| ...}" />
          <scope doc="Returns the value of the attribute identified by attr_name&#xA;after it has been typecast (for&#xA;example, &quot;2004-12-12&quot; in a data column is cast to&#xA;a date object, like Date.new(2004, 12, 12)). (Alias for the&#xA;protected read_attribute method)." ilk="function" name="[]" signature="(attr_name)" />
          <scope doc="Updates the attribute identified by attr_name&lt;/tt&gt; with the&#xA;specified &lt;tt&gt;value. (Alias for the protected&#xA;write_attribute method)." ilk="function" name="[]=" signature="(attr_name, value)" />
          <scope ilk="function" name="add_child" />
          <scope ilk="function" name="all_children" />
          <scope ilk="function" name="allow_concurrency" />
          <scope ilk="function" name="allow_concurrency=" />
          <scope doc="Returns an array of names for the attributes available on&#xA;this object sorted alphabetically." ilk="function" name="attribute_names" signature="()" />
          <scope doc="Returns true if the specified attribute has been set by the&#xA;user or by a database load and is neither nil nor&#xA;empty? (the latter only applies to objects that respond to&#xA;empty?, most notably Strings)." ilk="function" name="attribute_present?" signature="(attribute)" />
          <scope doc="Returns a hash of all the attributes with their names as&#xA;keys and clones of their objects as values." ilk="function" name="attributes" signature="(options = nil)" />
          <scope doc="Allows you to set all the attributes at once by passing in a&#xA;hash with keys matching the attribute names (which again&#xA;matches the column names). Sensitive attributes can be&#xA;protected from this form of mass-assignment by using the&#xA;attr_protected&lt;/tt&gt; macro. Or you can alternatively specify&#xA;which attributes &lt;b&gt;can&lt;/b&gt; be accessed in with&#xA;the &lt;tt&gt;attr_accessible macro. Then all the attributes not&#xA;included in that won&apos;t be allowed to be mass-assigned." ilk="function" name="attributes=" signature="(new_attributes)" />
          <scope doc="Returns a hash of cloned attributes before typecasting and&#xA;deserialization." ilk="function" name="attributes_before_type_cast" signature="()" />
          <scope ilk="function" name="before_destroy" />
          <scope ilk="function" name="child?" />
          <scope ilk="function" name="children_count" />
          <scope ilk="function" name="colorize_logging" />
          <scope ilk="function" name="colorize_logging=" />
          <scope doc="Returns the column object for the named attribute." ilk="function" name="column_for_attribute" signature="(name)" />
          <scope ilk="function" name="configurations" />
          <scope ilk="function" name="configurations=" />
          <scope doc="Returns the connection currently associated with the class.&#xA;This can also be used to &quot;borrow&quot; the connection&#xA;to do database work that isn&apos;t easily done without going&#xA;straight to SQL." ilk="function" name="connection" signature="()" />
          <scope doc="Creates an object, instantly saves it as a record (if the&#xA;validation permits it), and returns it. If the save fails&#xA;under validations, the unsaved object is still returned." ilk="function" name="create" signature="(attributes = nil)" />
          <scope ilk="function" name="create_or_update" />
          <scope ilk="function" name="create_without_timestamps" />
          <scope doc="Initializes the attribute to zero if nil and subtracts one.&#xA;Only makes sense for number-based attributes. Returns self." ilk="function" name="decrement" signature="(attribute)" />
          <scope doc="Decrements the attribute and saves the record." ilk="function" name="decrement!" signature="(attribute)" />
          <scope ilk="function" name="decrement_position" />
          <scope ilk="function" name="default_timezone" />
          <scope ilk="function" name="default_timezone=" />
          <scope doc="Deletes the record in the database and freezes this instance&#xA;to reflect that no changes should be made (since they can&apos;t&#xA;be persisted)." ilk="function" name="destroy" signature="()" />
          <scope ilk="function" name="destroy_without_callbacks" />
          <scope ilk="function" name="destroy_without_transactions" />
          <scope ilk="function" name="direct_children" />
          <scope ilk="function" name="first?" />
          <scope ilk="function" name="full_set" />
          <scope ilk="function" name="generate_read_methods" />
          <scope ilk="function" name="generate_read_methods=" />
          <scope doc="Returns true if the given attribute is in the attributes&#xA;hash" ilk="function" name="has_attribute?" signature="(attr_name)" />
          <scope ilk="function" name="higher_item" />
          <scope doc="Sets the primary ID." ilk="function" name="id=" signature="(value)" />
          <scope ilk="function" name="id_before_type_cast" />
          <scope ilk="function" name="in_list?" />
          <scope doc="Initializes the attribute to zero if nil and adds one. Only&#xA;makes sense for number-based attributes. Returns self." ilk="function" name="increment" signature="(attribute)" />
          <scope doc="Increments the attribute and saves the record." ilk="function" name="increment!" signature="(attribute)" />
          <scope ilk="function" name="increment_position" />
          <scope ilk="function" name="initialize" />
          <scope ilk="function" name="insert_at" />
          <scope ilk="function" name="last?" />
          <scope ilk="function" name="lock_optimistically" />
          <scope ilk="function" name="lock_optimistically=" />
          <scope ilk="function" name="locking_enabled?" />
          <scope ilk="function" name="logger" />
          <scope ilk="function" name="logger=" />
          <scope ilk="function" name="lower_item" />
          <scope ilk="function" name="move_higher" />
          <scope ilk="function" name="move_lower" />
          <scope ilk="function" name="move_to_bottom" />
          <scope ilk="function" name="move_to_top" />
          <scope doc="Returns true if this object hasn&apos;t been saved yet -- that&#xA;is, a record for the object doesn&apos;t exist yet." ilk="function" name="new_record?" signature="()" />
          <scope ilk="function" name="pluralize_table_names" />
          <scope ilk="function" name="pluralize_table_names=" />
          <scope ilk="function" name="primary_key_prefix_type" />
          <scope ilk="function" name="primary_key_prefix_type=" />
          <scope ilk="function" name="quoted_id" />
          <scope ilk="function" name="readonly!" />
          <scope doc="Records loaded through joins with piggy-back attributes will&#xA;be marked as read only as they cannot be saved and return&#xA;true to this query." ilk="function" name="readonly?" signature="()" />
          <scope ilk="function" name="record_timestamps" />
          <scope ilk="function" name="record_timestamps=" />
          <scope doc="Reloads the attributes of this object from the database. The&#xA;optional options argument is passed to find when reloading&#xA;so you may do e.g. record.reload(:lock =&gt; true) to reload&#xA;the same record with an exclusive row lock." ilk="function" name="reload" signature="(options = nil)" />
          <scope ilk="function" name="remove_from_list" />
          <scope ilk="function" name="respond_to_without_attributes?" />
          <scope ilk="function" name="root" />
          <scope ilk="function" name="root?" />
          <scope ilk="function" name="save" />
          <scope doc="Attempts to save the record, but instead of just returning&#xA;false if it couldn&apos;t happen, it raises a RecordNotSaved&#xA;exception" ilk="function" name="save!" signature="()" />
          <scope ilk="function" name="save_without_transactions" />
          <scope ilk="function" name="save_without_validation" />
          <scope ilk="function" name="save_without_validation!" />
          <scope ilk="function" name="schema_format" />
          <scope ilk="function" name="schema_format=" />
          <scope ilk="function" name="self_and_siblings" />
          <scope ilk="function" name="siblings" />
          <scope ilk="function" name="table_name_prefix" />
          <scope ilk="function" name="table_name_prefix=" />
          <scope ilk="function" name="table_name_suffix" />
          <scope ilk="function" name="table_name_suffix=" />
          <scope doc="Enables Active Record objects to be used as URL parameters&#xA;in Action Pack automatically." ilk="function" name="to_param" signature="()" />
          <scope ilk="function" name="to_xml" />
          <scope doc="Turns an attribute that&apos;s currently true into false and vice&#xA;versa. Returns self." ilk="function" name="toggle" signature="(attribute)" />
          <scope doc="Toggles the attribute and saves the record." ilk="function" name="toggle!" signature="(attribute)" />
          <scope ilk="function" name="unknown?" />
          <scope doc="Finds the record from the passed id&lt;/tt&gt;, instantly saves it&#xA;with the passed &lt;tt&gt;attributes (if the validation permits&#xA;it), and returns it. If the save fails under&#xA;validations, the unsaved object is still returned.&#xA;The arguments may also be given as arrays in which case the&#xA;update method is called for each pair of&#xA;id&lt;/tt&gt; and &lt;tt&gt;attributes and an array of objects is&#xA;returned." ilk="function" name="update" signature="(id, attributes)" />
          <scope doc="Updates a single attribute and saves the record. This is&#xA;especially useful for boolean flags on existing records.&#xA;Note: This method is overwritten by the Validation module&#xA;that&apos;ll make sure that updates made with this method doesn&apos;t&#xA;get subjected to validation checks. Hence, attributes can be&#xA;updated even if the full object isn&apos;t valid." ilk="function" name="update_attribute" signature="(name, value)" />
          <scope ilk="function" name="update_attribute_without_validation_skipping" />
          <scope doc="Updates all the attributes from the passed-in Hash and saves&#xA;the record. If the object is invalid, the saving will fail&#xA;and false will be returned." ilk="function" name="update_attributes" signature="(attributes)" />
          <scope ilk="function" name="update_without_callbacks" />
          <scope ilk="function" name="update_without_timestamps" />
          <scope ilk="function" name="valid?" />
          <scope ilk="function" name="valid_without_callbacks" />
          <scope ilk="function" name="verification_timeout" />
          <scope ilk="function" name="verification_timeout=" />
          <import symbol="ActiveRecord::Acts::List" />
          <import symbol="ActiveRecord::Acts::NestedSet" />
          <import symbol="ActiveRecord::Acts::Tree" />
          <import symbol="ActiveRecord::Aggregations" />
          <import symbol="ActiveRecord::Associations" />
          <import symbol="ActiveRecord::Calculations" />
          <import symbol="ActiveRecord::Callbacks" />
          <import symbol="ActiveRecord::Locking" />
          <import symbol="ActiveRecord::Observing" />
          <import symbol="ActiveRecord::Reflection" />
          <import symbol="ActiveRecord::Timestamp" />
          <import symbol="ActiveRecord::Transactions" />
          <import symbol="ActiveRecord::Validations" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <variable attributes="__const__" citdl="Array" name="CALCULATIONS_OPTIONS" />
          <variable attributes="__const__" citdl="Array" name="CALLBACKS" />
          <variable attributes="__const__" citdl="Mutex" name="TRANSACTION_MUTEX" />
          <variable attributes="__const__" citdl="Array" name="VALIDATIONS" />
        </scope>
        <scope ilk="namespace" name="Calculations">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Calculates average value on a given column. The value is&#xA;returned as a float. See #calculate for examples with&#xA;options.  Person.average(&apos;age&apos;)" ilk="function" name="average" signature="(column_name, options = {})" />
            <scope ilk="function" name="calculate" signature="(operation, column_name, options = {})" />
            <scope ilk="function" name="construct_calculation_sql" />
            <scope ilk="function" name="count" signature="(*args)" />
            <scope ilk="function" name="execute_grouped_calculation" />
            <scope ilk="function" name="execute_simple_calculation" />
            <scope doc="Calculates the maximum value on a given column. The value is&#xA;returned with the same data type of the column..&#xA;See #calculate for examples with options.  Person.maximum(&apos;age&apos;)&#xA;" ilk="function" name="maximum" signature="(column_name, options = {})" />
            <scope doc="Calculates the minimum value on a given column. The value is&#xA;returned with the same data type of the column..&#xA;See #calculate for examples with options.  Person.minimum(&apos;age&apos;)&#xA;" ilk="function" name="minimum" signature="(column_name, options = {})" />
            <scope doc="Calculates the sum value on a given column. The value is&#xA;returned with the same data type of the column..&#xA;See #calculate for examples with options.  Person.sum(&apos;age&apos;)" ilk="function" name="sum" signature="(column_name, options = {})" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
          <variable attributes="__const__" citdl="Array" name="CALCULATIONS_OPTIONS" />
        </scope>
        <scope ilk="namespace" name="Callbacks">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="instantiate_with_callbacks" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Base.save on new objects that&#xA;haven&apos;t been saved yet (no record exists)." ilk="function" name="after_create" signature="()" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Base.destroy (and all the&#xA;attributes have been frozen). class&#xA;Contact &lt; ActiveRecord::Base   after_destroy { |record| logger.info( &quot;Contact #{record.id} was destroyed.&quot; ) }&#xA; end" ilk="function" name="after_destroy" signature="()" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Base.save (regardless of whether&#xA;it&apos;s a create or update save). class&#xA;Contact &lt; ActiveRecord::Base   after_save { logger.info( &apos;New contact saved!&apos; ) }&#xA; end" ilk="function" name="after_save" signature="()" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Base.save on existing objects that&#xA;have a record." ilk="function" name="after_update" signature="()" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Validations.validate (which is part&#xA;of the Base.save call)." ilk="function" name="after_validation" signature="()" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Validations.validate (which is part&#xA;of the Base.save call) on new objects that haven&apos;t been&#xA;saved yet (no record exists)." ilk="function" name="after_validation_on_create" signature="()" />
          <scope doc="Is called &lt;em&gt;after&lt;/em&gt; Validations.validate (which is part&#xA;of the Base.save call) on existing objects that have a&#xA;record." ilk="function" name="after_validation_on_update" signature="()" />
          <scope ilk="function" name="append_features" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Base.save on new objects that&#xA;haven&apos;t been saved yet (no record exists)." ilk="function" name="before_create" signature="()" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Base.destroy.Note: If you need&#xA;to &lt;em&gt;destroy&lt;/em&gt; or &lt;em&gt;nullify&lt;/em&gt; associated records&#xA;first, use the _:dependent_ option on your associations." ilk="function" name="before_destroy" signature="()" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Base.save (regardless of whether&#xA;it&apos;s a create or update save)." ilk="function" name="before_save" signature="()" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Base.save on existing objects that&#xA;have a record." ilk="function" name="before_update" signature="()" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Validations.validate (which is&#xA;part of the Base.save call)." ilk="function" name="before_validation" signature="()" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Validations.validate (which is&#xA;part of the Base.save call) on new objects that haven&apos;t been&#xA;saved yet (no record exists)." ilk="function" name="before_validation_on_create" signature="()" />
          <scope doc="Is called &lt;em&gt;before&lt;/em&gt; Validations.validate (which is&#xA;part of the Base.save call) on existing objects that have a&#xA;record." ilk="function" name="before_validation_on_update" signature="()" />
          <scope ilk="function" name="create_or_update_with_callbacks" />
          <scope ilk="function" name="create_with_callbacks" />
          <scope ilk="function" name="destroy_with_callbacks" />
          <scope ilk="function" name="initialize_with_callbacks" />
          <scope ilk="function" name="update_with_callbacks" />
          <scope ilk="function" name="valid_with_callbacks" />
          <variable attributes="__const__" citdl="Array" name="CALLBACKS" />
        </scope>
        <scope classrefs="StandardError" ilk="class" name="ConfigurationError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="ConnectionAdapters">
          <scope classrefs="Object" ilk="class" name="AbstractAdapter">
            <scope doc="Is this connection active and ready to perform queries?" ilk="function" name="active?" signature="()" />
            <scope doc="Returns the human-readable name of the adapter. Use mixed&#xA;case - one can always use downcase if needed." ilk="function" name="adapter_name" signature="()" />
            <scope doc="Close this connection" ilk="function" name="disconnect!" signature="()" />
            <scope ilk="function" name="format_log_entry" signature="(message, dump = nil)" />
            <scope ilk="function" name="log" signature="(sql, name) {|| ...}" />
            <scope ilk="function" name="log_info" signature="(sql, name, runtime)" />
            <scope doc="Should primary key values be selected from their&#xA;corresponding sequence before the insert statement? If&#xA;true, next_sequence_value is called before each insert to&#xA;set the record&apos;s primary key. This is false for all adapters&#xA;but Firebird." ilk="function" name="prefetch_primary_key?" signature="(table_name = nil)" />
            <scope doc="Provides access to the underlying database connection.&#xA;Useful for when you need to call a proprietary method such&#xA;as postgresql&apos;s lo_* methods" ilk="function" name="raw_connection" signature="()" />
            <scope doc="Close this connection and open a new one in its place." ilk="function" name="reconnect!" signature="()" />
            <scope ilk="function" name="reset_runtime" />
            <scope doc="Does this adapter support using DISTINCT within COUNT? This&#xA;is true for all adapters except sqlite." ilk="function" name="supports_count_distinct?" signature="()" />
            <scope doc="Does this adapter support migrations? Backend specific, as&#xA;the abstract adapter always returns false." ilk="function" name="supports_migrations?" signature="()" />
            <scope doc="Lazily verify this connection, calling +active?+ only if it&#xA;hasn&apos;t been called for timeout seconds." ilk="function" name="verify!" signature="(timeout)" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="Column">
            <scope attributes="__classmethod__" doc="Used to convert from BLOBs to Strings" ilk="function" name="binary_to_string" signature="(value)" />
            <scope attributes="__classmethod__" doc="Used to convert from Strings to BLOBs" ilk="function" name="string_to_binary" signature="(value)" />
            <scope attributes="__classmethod__" ilk="function" name="string_to_date" signature="(string)" />
            <scope attributes="__classmethod__" ilk="function" name="string_to_dummy_time" signature="(string)" />
            <scope attributes="__classmethod__" ilk="function" name="string_to_time" signature="(string)" />
            <scope attributes="__classmethod__" doc="convert something to a boolean" ilk="function" name="value_to_boolean" signature="(value)" />
            <scope ilk="function" name="default" />
            <scope ilk="function" name="human_name" />
            <scope doc="Returns the Ruby class that corresponds to the abstract data&#xA;type." ilk="function" name="klass" signature="()" />
            <scope ilk="function" name="limit" />
            <scope ilk="function" name="null" />
            <scope ilk="function" name="number?" />
            <scope ilk="function" name="primary" />
            <scope ilk="function" name="primary=" />
            <scope ilk="function" name="sql_type" />
            <scope ilk="function" name="text?" />
            <scope doc="Casts value (which is a String) to an appropriate instance." ilk="function" name="type_cast" signature="(value)" />
            <scope ilk="function" name="type_cast_code" signature="(var_name)" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="" ilk="class" name="ColumnDefinition">
            <scope classrefs="Struct" ilk="class" name="Passwd">
              <scope classrefs="Struct" ilk="class" name="Tms">
                <scope attributes="__classmethod__" ilk="function" name="[]" />
                <scope attributes="__classmethod__" ilk="function" name="members" />
                <scope attributes="__classmethod__ __ctor__" ilk="function" name="new" />
                <scope ilk="function" name="cstime" />
                <scope ilk="function" name="cstime=" />
                <scope ilk="function" name="cutime" />
                <scope ilk="function" name="cutime=" />
                <scope ilk="function" name="stime" />
                <scope ilk="function" name="stime=" />
                <scope ilk="function" name="utime" />
                <scope ilk="function" name="utime=" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
                <import symbol="Enumerable" />
              </scope>
              <scope attributes="__classmethod__" ilk="function" name="[]" />
              <scope attributes="__classmethod__" ilk="function" name="members" />
              <scope attributes="__classmethod__ __ctor__" ilk="function" name="new" />
              <scope ilk="function" name="dir" />
              <scope ilk="function" name="dir=" />
              <scope ilk="function" name="gid" />
              <scope ilk="function" name="gid=" />
              <scope ilk="function" name="name=" />
              <scope ilk="function" name="passwd" />
              <scope ilk="function" name="passwd=" />
              <scope ilk="function" name="shell" />
              <scope ilk="function" name="shell=" />
              <scope ilk="function" name="uid" />
              <scope ilk="function" name="uid=" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Enumerable" />
            </scope>
            <scope ilk="function" name="to_sql" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class" name="ColumnWithIdentity">
            <scope attributes="__classmethod__" ilk="function" name="binary_to_string" />
            <scope attributes="__classmethod__" ilk="function" name="string_to_binary" />
            <scope ilk="function" name="cast_to_datetime" />
            <scope ilk="function" name="cast_to_time" />
            <scope ilk="function" name="identity" />
            <scope ilk="function" name="is_special" />
            <scope ilk="function" name="scale" />
            <scope ilk="function" name="simplified_type" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="DatabaseStatements">
            <scope doc="Alias for #add_limit_offset!." ilk="function" name="add_limit!" signature="(sql, options)" />
            <scope ilk="function" name="add_limit_offset!" signature="(sql, options)" />
            <scope doc="Begins the transaction (and turns off auto-committing)." ilk="function" name="begin_db_transaction" signature="()" />
            <scope doc="Commits the transaction (and turns on auto-committing)." ilk="function" name="commit_db_transaction" signature="()" />
            <scope ilk="function" name="default_sequence_name" signature="(table, column)" />
            <scope doc="Executes the delete statement and returns the number of rows&#xA;affected." ilk="function" name="delete" signature="(sql, name = nil)" />
            <scope doc="Executes the SQL statement in the context of this&#xA;connection." ilk="function" name="execute" signature="(sql, name = nil)" />
            <scope doc="Returns the last auto-generated ID from the affected table." ilk="function" name="insert" signature="(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)" />
            <scope doc="Set the sequence to the max value of the table&apos;s column." ilk="function" name="reset_sequence!" signature="(table, column, sequence = nil)" />
            <scope doc="Rolls back the transaction (and turns on auto-committing).&#xA;Must be done if the transaction block raises an exception or&#xA;returns false." ilk="function" name="rollback_db_transaction" signature="()" />
            <scope doc="Returns an array of record hashes with the column names as&#xA;keys and column values as values." ilk="function" name="select_all" signature="(sql, name = nil)" />
            <scope doc="Returns a record hash with the column names as keys and&#xA;column values as values." ilk="function" name="select_one" signature="(sql, name = nil)" />
            <scope doc="Returns a single value from a record" ilk="function" name="select_value" signature="(sql, name = nil)" />
            <scope doc="Returns an array of the values of the first column in a&#xA;select:  select_values(&quot;SELECT id FROM companies LIMIT&#xA;3&quot;) =&gt; [1,2,3]" ilk="function" name="select_values" signature="(sql, name = nil)" />
            <scope doc="Wrap a block in a transaction. Returns result of block." ilk="function" name="transaction" signature="(start_db_transaction = true) {|| ...}" />
            <scope doc="Executes the update statement and returns the number of rows&#xA;affected." ilk="function" name="update" signature="(sql, name = nil)" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::SQLite2Adapter" ilk="class" name="DeprecatedSQLiteAdapter">
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class" name="FirebirdAdapter">
            <scope attributes="__classmethod__" ilk="function" name="boolean_domain" />
            <scope attributes="__classmethod__" ilk="function" name="boolean_domain=" />
            <scope ilk="function" name="boolean_domain" />
            <scope ilk="function" name="boolean_domain=" />
            <scope doc="Returns the next sequence value from a sequence generator.&#xA;Not generally called directly; used by ActiveRecord to get&#xA;the next primary key value when inserting a new database&#xA;record (see #prefetch_primary_key?)." ilk="function" name="next_sequence_value" signature="(sequence_name)" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class" name="FirebirdColumn">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Fixnum" name="BLOB_MAX_LENGTH" />
            <variable attributes="__const__" citdl="Fixnum" name="VARCHAR_MAX_LENGTH" />
          </scope>
          <scope classrefs="" ilk="class" name="IndexDefinition">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class" name="MysqlAdapter">
            <scope attributes="__classmethod__" ilk="function" name="emulate_booleans" />
            <scope attributes="__classmethod__" ilk="function" name="emulate_booleans=" />
            <scope ilk="function" name="create_database" />
            <scope ilk="function" name="current_database" />
            <scope ilk="function" name="drop_database" />
            <scope ilk="function" name="emulate_booleans" />
            <scope ilk="function" name="emulate_booleans=" />
            <scope ilk="function" name="indexes" />
            <scope ilk="function" name="recreate_database" />
            <scope ilk="function" name="tables" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Array" name="LOST_CONNECTION_ERROR_MESSAGES" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class" name="MysqlColumn">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class" name="OpenBaseAdapter">
            <scope ilk="function" name="indexes" />
            <scope ilk="function" name="next_sequence_value" signature="(sequence_name)" />
            <scope ilk="function" name="tables" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class" name="OpenBaseColumn">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class" name="PostgreSQLAdapter">
            <scope ilk="function" name="indexes" />
            <scope doc="Find a table&apos;s primary key and sequence." ilk="function" name="pk_and_sequence_for" signature="(table)" />
            <scope ilk="function" name="query" />
            <scope doc="Resets sequence to the max value of the table&apos;s pk if&#xA;present." ilk="function" name="reset_pk_sequence!" signature="(table, pk = nil, sequence = nil)" />
            <scope ilk="function" name="schema_search_path" />
            <scope ilk="function" name="schema_search_path=" />
            <scope ilk="function" name="tables" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Fixnum" name="BYTEA_COLUMN_TYPE_OID" />
            <variable attributes="__const__" citdl="Fixnum" name="TIMESTAMPOID" />
            <variable attributes="__const__" citdl="Fixnum" name="TIMESTAMPTZOID" />
          </scope>
          <scope ilk="namespace" name="Quoting">
            <scope doc="Quotes the column value to help prevent {SQL injection&#xA;attacks}[http://en.wikipedia.org/wiki/SQL_injection]." ilk="function" name="quote" signature="(value, column = nil)" />
            <scope doc="Returns a quoted form of the column name. This is highly&#xA;adapter specific." ilk="function" name="quote_column_name" signature="(name)" />
            <scope doc="Quotes a string, escaping any &apos; (single&#xA;quote) and \ (backslash) characters." ilk="function" name="quote_string" signature="(s)" />
            <scope ilk="function" name="quoted_date" signature="(value)" />
            <scope ilk="function" name="quoted_false" />
            <scope ilk="function" name="quoted_true" />
          </scope>
          <scope ilk="namespace" name="SchemaStatements">
            <scope doc="Adds a new column to the named table. See&#xA;TableDefinition#column for details of the options you can&#xA;use." ilk="function" name="add_column" signature="(table_name, column_name, type, options = {})" />
            <scope ilk="function" name="add_column_options!" />
            <scope ilk="function" name="add_index" signature="(table_name, column_name, options = {})" />
            <scope ilk="function" name="change_column" signature="(table_name, column_name, type, options = {})" />
            <scope ilk="function" name="change_column_default" signature="(table_name, column_name, default)" />
            <scope doc="Returns an array of Column objects for the table specified&#xA;by table_name. See the concrete implementation for details&#xA;on the expected parameter values." ilk="function" name="columns" signature="(table_name, name = nil)" />
            <scope ilk="function" name="create_table" signature="(name, options = {}) {|table_definition| ...}" />
            <scope doc="Drops a table from the database." ilk="function" name="drop_table" signature="(name, options = {})" />
            <scope ilk="function" name="dump_schema_information" />
            <scope ilk="function" name="index_name" />
            <scope doc="Should not be called normally, but this operation is&#xA;non-destructive. The migrations module handles this&#xA;automatically." ilk="function" name="initialize_schema_information" signature="()" />
            <scope doc="Returns a Hash of mappings from the abstract data types to&#xA;the native database types. See TableDefinition#column for&#xA;details on the recognized abstract data types." ilk="function" name="native_database_types" signature="()" />
            <scope ilk="function" name="remove_column" signature="(table_name, column_name)" />
            <scope doc="Remove the given index from the table.Remove the&#xA;suppliers_name_index in the suppliers table.  remove_index :suppliers, :name&#xA;Remove the index named accounts_branch_id_index in the&#xA;accounts table.  remove_index :accounts, :column =&gt; :branch_id&#xA;Remove the index named accounts_branch_id_party_id_index in&#xA;the accounts table." ilk="function" name="remove_index" signature="(table_name, options = {})" />
            <scope ilk="function" name="rename_column" signature="(table_name, column_name, new_column_name)" />
            <scope ilk="function" name="rename_table" signature="(name, new_name)" />
            <scope doc="Returns a string of CREATE TABLE SQL statement(s) for&#xA;recreating the entire structure of the database." ilk="function" name="structure_dump" signature="()" />
            <scope doc="Truncates a table alias according to the limits of the&#xA;current adapter." ilk="function" name="table_alias_for" signature="(table_name)" />
            <scope doc="This is the maximum length a table alias can be" ilk="function" name="table_alias_length" signature="()" />
            <scope ilk="function" name="type_to_sql" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::SQLiteAdapter" ilk="class" name="SQLite2Adapter">
            <scope ilk="function" name="rewrite_count_distinct_queries" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class" name="SQLiteAdapter">
            <scope ilk="function" name="alter_table" />
            <scope ilk="function" name="catch_schema_changes" signature="() {|| ...}" />
            <scope ilk="function" name="copy_table" />
            <scope ilk="function" name="copy_table_contents" />
            <scope ilk="function" name="copy_table_indexes" />
            <scope ilk="function" name="indexes" />
            <scope ilk="function" name="move_table" />
            <scope ilk="function" name="primary_key" />
            <scope ilk="function" name="table_structure" signature="(table_name)" />
            <scope ilk="function" name="tables" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class" name="SQLiteColumn">
            <scope attributes="__classmethod__" ilk="function" name="binary_to_string" />
            <scope attributes="__classmethod__" ilk="function" name="string_to_binary" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class" name="SQLServerAdapter">
            <scope ilk="function" name="create_database" signature="(name)" />
            <scope ilk="function" name="current_database" />
            <scope ilk="function" name="drop_database" signature="(name)" />
            <scope ilk="function" name="indexes" signature="(table_name, name = nil)" />
            <scope ilk="function" name="recreate_database" signature="(name)" />
            <scope ilk="function" name="remove_default_constraint" signature="(table_name, column_name)" />
            <scope ilk="function" name="tables" signature="(name = nil)" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="Object" ilk="class" name="TableDefinition">
            <scope doc="Returns a ColumnDefinition for the column with name name." ilk="function" name="[]" signature="(name)" />
            <scope ilk="function" name="column" signature="(name, type, options = {})" />
            <scope ilk="function" name="columns" />
            <scope ilk="function" name="columns=" />
            <scope doc="Appends a primary key definition to the table definition.&#xA;Can be called multiple times, but this is probably not a&#xA;good idea." ilk="function" name="primary_key" signature="(name)" />
            <scope doc="Returns a String whose contents are the column definitions&#xA;concatenated together. This string can then be pre and&#xA;appended to to generate the final SQL to create the table." ilk="function" name="to_sql" signature="()" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="ConnectionFailed">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="ConnectionNotEstablished">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="DuplicateMigrationVersionError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="EagerLoadPolymorphicError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Errors">
          <scope attributes="__classmethod__" ilk="function" name="default_error_messages" />
          <scope attributes="__classmethod__" ilk="function" name="default_error_messages=" />
          <scope doc="Alias for #on" ilk="function" name="[]" signature="(attribute)" />
          <scope doc="Adds an error message (msg&lt;/tt&gt;) to&#xA;the &lt;tt&gt;attribute&lt;/tt&gt;, which will be returned on a call&#xA;to &lt;tt&gt;on(attribute)&lt;/tt&gt; for the same attribute and ensure&#xA;that this error object returns false when asked&#xA;if &lt;tt&gt;empty?&lt;/tt&gt;. More than one error can be added to the&#xA;same &lt;tt&gt;attribute&lt;/tt&gt; in which case an array will be&#xA;returned on a call to &lt;tt&gt;on(attribute)&lt;/tt&gt;. If no &lt;tt&gt;msg&#xA;is supplied, &quot;invalid&quot; is assumed." ilk="function" name="add" signature="(attribute, msg = @@default_error_messages[:invalid])" />
          <scope doc="Will add an error message to each of the attributes in&#xA;attributes that is blank (using Object#blank?)." ilk="function" name="add_on_blank" signature="(attributes, msg = @@default_error_messages[:blank])" />
          <scope doc="Will add an error message to each of the attributes in&#xA;attributes&lt;/tt&gt; that has a length outside of the passed&#xA;boundary &lt;tt&gt;range. If the length is above the boundary, the&#xA;too_long_msg message will be used. If below, the&#xA;too_short_msg." ilk="function" name="add_on_boundary_breaking" signature="(attributes, range, too_long_msg = @@default_error_messages[:too_long], too_short_msg = @@default_error_messages[:too_short])" />
          <scope doc="Alias for #add_on_boundary_breaking" ilk="function" name="add_on_boundry_breaking" signature="(attributes, range, too_long_msg = @@default_error_messages[:too_long], too_short_msg = @@default_error_messages[:too_short])" />
          <scope doc="Will add an error message to each of the attributes in&#xA;attributes that is empty." ilk="function" name="add_on_empty" signature="(attributes, msg = @@default_error_messages[:empty])" />
          <scope doc="Adds an error to the base object instead of any particular&#xA;attribute. This is used to report errors that don&apos;t tie to&#xA;any specific attribute, but rather to the object as a whole.&#xA;These error messages don&apos;t get prepended with any field name&#xA;when iterating with each_full, so they should be complete&#xA;sentences." ilk="function" name="add_to_base" signature="(msg)" />
          <scope doc="Removes all the errors that have been added." ilk="function" name="clear" signature="()" />
          <scope doc="Alias for #size" ilk="function" name="count" signature="()" />
          <scope ilk="function" name="default_error_messages" />
          <scope ilk="function" name="default_error_messages=" />
          <scope doc="Yields each attribute and associated message per error&#xA;added." ilk="function" name="each" signature="() {|attr, msg| ...}" />
          <scope doc="Yields each full error message added. So&#xA;Person.errors.add(&quot;first_name&quot;, &quot;can&apos;t be&#xA;empty&quot;) will be returned through iteration&#xA;as &quot;First name can&apos;t be empty&quot;." ilk="function" name="each_full" signature="() {|msg| ...}" />
          <scope doc="Returns true if no errors have been added." ilk="function" name="empty?" signature="()" />
          <scope doc="Returns all the full error messages in an array." ilk="function" name="full_messages" signature="()" />
          <scope doc="Returns true if the specified attribute has errors&#xA;associated with it." ilk="function" name="invalid?" signature="(attribute)" />
          <scope doc="Alias for #size" ilk="function" name="length" signature="()" />
          <scope ilk="function" name="on" signature="(attribute)" />
          <scope doc="Returns errors assigned to base object through add_to_base&#xA;according to the normal rules of on(attribute)." ilk="function" name="on_base" signature="()" />
          <scope doc="Returns the total number of errors added. Two errors added&#xA;to the same attribute will be counted as such with this as&#xA;well." ilk="function" name="size" signature="()" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Enumerable" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="HasManyThroughAssociationNotFoundError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="HasManyThroughAssociationPolymorphicError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="HasManyThroughSourceAssociationMacroError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="HasManyThroughSourceAssociationNotFoundError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="IrreversibleMigration">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Locking">
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
          <scope ilk="function" name="update_with_lock" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Migration">
          <scope attributes="__classmethod__" ilk="function" name="announce" signature="(message)" />
          <scope attributes="__classmethod__" ilk="function" name="down_using_benchmarks" />
          <scope attributes="__classmethod__" ilk="function" name="method_missing" signature="(method, *arguments, &amp;block)" />
          <scope attributes="__classmethod__" doc="Execute this migration in the named direction" ilk="function" name="migrate" signature="(direction)" />
          <scope attributes="__classmethod__" ilk="function" name="say" signature="(message, subitem=false)" />
          <scope attributes="__classmethod__" ilk="function" name="say_with_time" signature="(message) {|| ...}" />
          <scope attributes="__classmethod__" ilk="function" name="singleton_method_added" />
          <scope attributes="__classmethod__" ilk="function" name="suppress_messages" signature="() {|| ...}" />
          <scope attributes="__classmethod__" ilk="function" name="up_using_benchmarks" />
          <scope attributes="__classmethod__" ilk="function" name="verbose" />
          <scope attributes="__classmethod__" ilk="function" name="verbose=" />
          <scope attributes="__classmethod__" ilk="function" name="write" signature="(text=&quot;&quot;)" />
          <scope ilk="function" name="verbose" />
          <scope ilk="function" name="verbose=" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Migrator">
          <scope attributes="__classmethod__" ilk="function" name="current_version" />
          <scope attributes="__classmethod__" ilk="function" name="down" />
          <scope attributes="__classmethod__" ilk="function" name="migrate" />
          <scope attributes="__classmethod__" ilk="function" name="proper_table_name" />
          <scope attributes="__classmethod__" ilk="function" name="schema_info_table_name" />
          <scope attributes="__classmethod__" ilk="function" name="up" />
          <scope ilk="function" name="current_version" />
          <scope ilk="function" name="migrate" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="MultiparameterAssignmentErrors">
          <scope ilk="function" name="errors" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="Observer">
          <scope attributes="__classmethod__" ilk="function" name="instance" />
          <scope attributes="__classmethod__" doc="Attaches the observer to the supplied model classes." ilk="function" name="observe" signature="(*models)" />
          <scope attributes="__classmethod__" ilk="function" name="reloadable?" />
          <scope ilk="function" name="update" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <import symbol="Singleton" />
        </scope>
        <scope ilk="namespace" name="Observing">
          <scope ilk="namespace" name="ClassMethods">
            <scope doc="Activates the observers assigned. Examples:  # Calls&#xA;PersonObserver.instance  ActiveRecord::Base.observers = :person_observer&#xA;  # Calls Cacher.instance and GarbageCollector.instance&#xA;  ActiveRecord::Base.observers = :cacher, :garbage_collector&#xA;  # Same as above, just using explicit class references&#xA;  ActiveRecord::Base.observers = Cacher, GarbageCollector" ilk="function" name="observers=" signature="(*observers)" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="PreparedStatementInvalid">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="Object" ilk="class" name="QueryCache">
          <scope ilk="function" name="clear_query_cache" />
          <scope ilk="function" name="columns" />
          <scope ilk="function" name="delete" />
          <scope ilk="function" name="insert" />
          <scope ilk="function" name="select_all" />
          <scope ilk="function" name="select_one" />
          <scope ilk="function" name="update" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="StandardError" ilk="class" name="ReadOnlyRecord">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="RecordInvalid">
          <scope ilk="function" name="record" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="RecordNotFound">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="RecordNotSaved">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Reflection">
          <scope classrefs="ActiveRecord::Reflection::MacroReflection" ilk="class" name="AggregateReflection">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope classrefs="ActiveRecord::Reflection::MacroReflection" ilk="class" name="AssociationReflection">
            <scope ilk="function" name="association_foreign_key" />
            <scope ilk="function" name="check_validity!" />
            <scope ilk="function" name="counter_cache_column" />
            <scope ilk="function" name="primary_key_name" />
            <scope ilk="function" name="source_reflection" />
            <scope ilk="function" name="source_reflection_names" />
            <scope ilk="function" name="table_name" />
            <scope ilk="function" name="through_reflection" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="create_reflection" signature="(macro, name, options, active_record)" />
            <scope doc="Returns the AggregateReflection object for the named&#xA;aggregation (use the symbol). Example:  Account.reflect_on_aggregation(:balance) # returns the balance AggregateReflection&#xA;" ilk="function" name="reflect_on_aggregation" signature="(aggregation)" />
            <scope doc="Returns an array of AggregateReflection objects for all the&#xA;aggregations in the class." ilk="function" name="reflect_on_all_aggregations" signature="()" />
            <scope doc="Returns an array of AssociationReflection objects for all&#xA;the aggregations in the class. If you only want to reflect&#xA;on a certain association type, pass in the&#xA;symbol (:has_many, :has_one, :belongs_to) for that as the&#xA;first parameter. Example:  Account.reflect_on_all_associations             # returns an array of all associations&#xA;" ilk="function" name="reflect_on_all_associations" signature="(macro = nil)" />
            <scope doc="Returns the AssociationReflection object for the named&#xA;aggregation (use the symbol). Example:  Account.reflect_on_association(:owner) # returns the owner AssociationReflection&#xA;  Invoice.reflect_on_association(:line_items).macro  # returns :has_many&#xA;" ilk="function" name="reflect_on_association" signature="(association)" />
            <scope doc="Returns a hash containing all AssociationReflection objects&#xA;for the current class Example:  Invoice.reflections&#xA;  Account.reflections" ilk="function" name="reflections" signature="()" />
          </scope>
          <scope classrefs="Object" ilk="class" name="MacroReflection">
            <scope ilk="function" name="active_record" />
            <scope ilk="function" name="class_name" />
            <scope doc="Returns the class for the&#xA;macro, so &quot;composed_of :balance, :class_name =&gt; &apos;Money&apos;&quot; would return the Money class and &quot;has_many :clients&quot; would return the Client class.&#xA;" ilk="function" name="klass" signature="()" />
            <scope doc="Returns the name of the macro, so it would&#xA;return :composed_of&#xA;for &quot;composed_of :balance, :class_name =&gt; &apos;Money&apos;&quot; or :has_many for &quot;has_many :clients&quot;.&#xA;" ilk="function" name="macro" signature="()" />
            <scope doc="Returns the hash of options used for the macro, so it would&#xA;return { :class_name =&gt; &quot;Money&quot; } for &quot;composed_of :balance, :class_name =&gt; &apos;Money&apos;&quot; or {} for &quot;has_many :clients&quot;.&#xA;" ilk="function" name="options" signature="()" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="included" />
          <scope ilk="function" name="included" />
        </scope>
        <scope classrefs="ActiveRecord::Migration" ilk="class" name="Schema">
          <scope attributes="__classmethod__" doc="Eval the given block. All methods available to the current&#xA;connection adapter are available within the block, so you&#xA;can easily use the database definition DSL to build up your&#xA;schema (#create_table, #add_index, etc.).The info hash is&#xA;optional, and if given is used to define metadata about the&#xA;current schema (like the schema&apos;s version):" ilk="function" name="define" signature="(info={}, &amp;block)" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="Object" ilk="class" name="SchemaDumper">
          <scope attributes="__classmethod__" ilk="function" name="dump" />
          <scope attributes="__classmethod__" ilk="function" name="ignore_tables" />
          <scope attributes="__classmethod__" ilk="function" name="ignore_tables=" />
          <scope ilk="function" name="dump" />
          <scope ilk="function" name="ignore_tables" />
          <scope ilk="function" name="ignore_tables=" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="SerializationTypeMismatch">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="StaleObjectError">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="StatementInvalid">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope classrefs="ActiveRecord::ActiveRecordError" ilk="class" name="SubclassNotFound">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
          <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
        </scope>
        <scope ilk="namespace" name="Timestamp">
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
          <scope ilk="function" name="create_with_timestamps" />
          <scope ilk="function" name="update_with_timestamps" />
        </scope>
        <scope ilk="namespace" name="Transactions">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="lock_mutex" />
            <scope ilk="function" name="transaction" signature="(*objects, &amp;block)" />
            <scope ilk="function" name="unlock_mutex" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
          <scope ilk="function" name="destroy_with_transactions" />
          <scope ilk="function" name="save_with_transactions" />
          <scope ilk="function" name="transaction" />
          <variable attributes="__const__" citdl="Mutex" name="TRANSACTION_MUTEX" />
        </scope>
        <scope ilk="namespace" name="Validations">
          <scope ilk="namespace" name="ClassMethods">
            <scope ilk="function" name="condition_block?" signature="(condition)" />
            <scope doc="Creates an object just like Base.create but calls&#xA;save! instead of save so an exception is raised if the&#xA;record is invalid." ilk="function" name="create!" signature="(attributes = nil)" />
            <scope doc="Determine from the given condition (whether a&#xA;block, procedure, method or string) whether or not to&#xA;validate the record. See #validates_each." ilk="function" name="evaluate_condition" signature="(condition, record)" />
            <scope ilk="function" name="validate" signature="(*methods, &amp;block)" />
            <scope ilk="function" name="validate_on_create" signature="(*methods, &amp;block)" />
            <scope ilk="function" name="validate_on_update" signature="(*methods, &amp;block)" />
            <scope ilk="function" name="validates_acceptance_of" signature="(*attr_names)" />
            <scope ilk="function" name="validates_associated" signature="(*attr_names)" />
            <scope ilk="function" name="validates_confirmation_of" signature="(*attr_names)" />
            <scope ilk="function" name="validates_each" signature="(*attrs) {|record, attr, value| ...}" />
            <scope ilk="function" name="validates_exclusion_of" signature="(*attr_names)" />
            <scope ilk="function" name="validates_format_of" signature="(*attr_names)" />
            <scope ilk="function" name="validates_inclusion_of" signature="(*attr_names)" />
            <scope ilk="function" name="validates_length_of" signature="(*attrs)" />
            <scope ilk="function" name="validates_numericality_of" signature="(*attr_names)" />
            <scope ilk="function" name="validates_presence_of" signature="(*attr_names)" />
            <scope doc="Alias for #validates_length_of" ilk="function" name="validates_size_of" signature="(*attrs)" />
            <scope ilk="function" name="validates_uniqueness_of" signature="(*attr_names)" />
            <variable attributes="__const__" citdl="Array" name="ALL_RANGE_OPTIONS" />
            <variable attributes="__const__" citdl="Hash" name="DEFAULT_VALIDATION_OPTIONS" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="append_features" />
          <scope ilk="function" name="append_features" />
          <scope doc="Returns the Errors object that holds all information about&#xA;attribute error messages." ilk="function" name="errors" signature="()" />
          <scope doc="The validation process on save can be skipped by passing&#xA;false. The regular Base#save method is replaced with this&#xA;when the validations module is mixed in, which it is by&#xA;default." ilk="function" name="save_with_validation" signature="(perform_validation = true)" />
          <scope doc="Attempts to save the record just like Base#save but will&#xA;raise a RecordInvalid exception instead of returning false&#xA;if the record is not valid." ilk="function" name="save_with_validation!" signature="()" />
          <scope doc="Updates a single attribute and saves the record without&#xA;going through the normal validation procedure. This is&#xA;especially useful for boolean flags on existing records. The&#xA;regular update_attribute method in Base is replaced with&#xA;this when the validations module is mixed in, which it is by&#xA;default." ilk="function" name="update_attribute_with_validation_skipping" signature="(name, value)" />
          <scope doc="Runs validate and validate_on_create or validate_on_update&#xA;and returns true if no errors were added otherwise false." ilk="function" name="valid?" signature="()" />
          <scope doc="Overwrite this method for validation checks on all saves and&#xA;use Errors.add(field, msg) for invalid attributes." ilk="function" name="validate" signature="(" />
          <scope doc="Overwrite this method for validation checks used only on&#xA;creation." ilk="function" name="validate_on_create" signature="(" />
          <scope doc="Overwrite this method for validation checks used only on&#xA;updates." ilk="function" name="validate_on_update" signature="(" />
          <variable attributes="__const__" citdl="Array" name="VALIDATIONS" />
        </scope>
      </scope>
      <scope ilk="namespace" name="ActiveSupport">
        <scope ilk="namespace" name="CoreExtensions">
          <scope ilk="namespace" name="Array">
            <scope ilk="namespace" name="Conversions">
              <scope doc="When an array is given to url_for, it is converted to a&#xA;slash separated string." ilk="function" name="to_param" signature="()" />
              <scope ilk="function" name="to_sentence" signature="(options = {})" />
              <scope ilk="function" name="to_xml" signature="(options = {})" />
            </scope>
          </scope>
          <scope ilk="namespace" name="CGI">
            <scope ilk="namespace" name="EscapeSkippingSlashes">
              <scope ilk="function" name="escape_skipping_slashes" />
            </scope>
          </scope>
          <scope ilk="namespace" name="Date">
            <scope ilk="namespace" name="Conversions">
              <scope attributes="__classmethod__" ilk="function" name="included" />
              <scope ilk="function" name="included" />
              <scope doc="To be able to keep Dates and Times interchangeable on&#xA;conversions" ilk="function" name="to_date" signature="()" />
              <scope ilk="function" name="to_formatted_s" signature="(format = :default)" />
              <scope ilk="function" name="to_time" signature="(form = :local)" />
              <scope ilk="function" name="xmlschema" />
              <variable attributes="__const__" citdl="Hash" name="DATE_FORMATS" />
            </scope>
          </scope>
          <scope ilk="namespace" name="Hash">
            <scope ilk="namespace" name="Conversions">
              <scope ilk="function" name="to_xml" signature="(options = {})" />
              <variable attributes="__const__" citdl="Hash" name="XML_FORMATTING" />
              <variable attributes="__const__" citdl="Hash" name="XML_TYPE_NAMES" />
            </scope>
            <scope ilk="namespace" name="Diff">
              <scope ilk="function" name="diff" signature="(h2)" />
            </scope>
            <scope ilk="namespace" name="IndifferentAccess">
              <scope ilk="function" name="with_indifferent_access" />
            </scope>
            <scope ilk="namespace" name="Keys">
              <scope ilk="function" name="assert_valid_keys" signature="(*valid_keys)" />
              <scope doc="Return a new hash with all keys converted to strings." ilk="function" name="stringify_keys" signature="()" />
              <scope doc="Destructively convert all keys to strings." ilk="function" name="stringify_keys!" signature="()" />
              <scope doc="Return a new hash with all keys converted to symbols." ilk="function" name="symbolize_keys" signature="()" />
              <scope doc="Destructively convert all keys to symbols." ilk="function" name="symbolize_keys!" signature="()" />
              <scope doc="Alias for #symbolize_keys" ilk="function" name="to_options" signature="()" />
              <scope doc="Alias for #symbolize_keys!" ilk="function" name="to_options!" signature="()" />
            </scope>
            <scope ilk="namespace" name="ReverseMerge">
              <scope ilk="function" name="reverse_merge" signature="(other_hash)" />
              <scope ilk="function" name="reverse_merge!" signature="(other_hash)" />
              <scope doc="Alias for #reverse_merge" ilk="function" name="reverse_update" signature="(other_hash)" />
            </scope>
          </scope>
          <scope ilk="namespace" name="Integer">
            <scope ilk="namespace" name="EvenOdd">
              <scope ilk="function" name="even?" />
              <scope ilk="function" name="multiple_of?" signature="(number)" />
              <scope ilk="function" name="odd?" />
            </scope>
            <scope ilk="namespace" name="Inflections">
              <scope doc="Ordinalize turns a number into an ordinal string used to&#xA;denote the position in an ordered sequence such as&#xA;1st, 2nd, 3rd, 4th.Examples  1.ordinalize    # =&gt; &quot;1st&quot;&#xA;  2.ordinalize    # =&gt; &quot;2nd&quot;  1002.ordinalize # =&gt; &quot;1002nd&quot;&#xA;  1003.ordinalize # =&gt; &quot;1003rd&quot;" ilk="function" name="ordinalize" signature="()" />
            </scope>
          </scope>
          <scope ilk="namespace" name="LoadErrorExtensions">
            <scope ilk="namespace" name="LoadErrorClassMethods">
            </scope>
          </scope>
          <scope ilk="namespace" name="Numeric">
            <scope ilk="namespace" name="Bytes">
              <scope doc="Alias for #bytes" ilk="function" name="byte" signature="()" />
              <scope ilk="function" name="bytes" />
              <scope doc="Alias for #exabytes" ilk="function" name="exabyte" signature="()" />
              <scope ilk="function" name="exabytes" />
              <scope doc="Alias for #gigabytes" ilk="function" name="gigabyte" signature="()" />
              <scope ilk="function" name="gigabytes" />
              <scope doc="Alias for #kilobytes" ilk="function" name="kilobyte" signature="()" />
              <scope ilk="function" name="kilobytes" />
              <scope doc="Alias for #megabytes" ilk="function" name="megabyte" signature="()" />
              <scope ilk="function" name="megabytes" />
              <scope doc="Alias for #petabytes" ilk="function" name="petabyte" signature="()" />
              <scope ilk="function" name="petabytes" />
              <scope doc="Alias for #terabytes" ilk="function" name="terabyte" signature="()" />
              <scope ilk="function" name="terabytes" />
            </scope>
            <scope ilk="namespace" name="Time">
              <scope doc="Reads best without arguments: 10.minutes.ago" ilk="function" name="ago" signature="(time = ::Time.now)" />
              <scope doc="Alias for #days" ilk="function" name="day" signature="()" />
              <scope ilk="function" name="days" />
              <scope doc="Alias for #fortnights" ilk="function" name="fortnight" signature="()" />
              <scope ilk="function" name="fortnights" />
              <scope doc="Alias for #since" ilk="function" name="from_now" signature="(time = ::Time.now)" />
              <scope doc="Alias for #hours" ilk="function" name="hour" signature="()" />
              <scope ilk="function" name="hours" />
              <scope doc="Alias for #minutes" ilk="function" name="minute" signature="()" />
              <scope ilk="function" name="minutes" />
              <scope doc="Alias for #months" ilk="function" name="month" signature="()" />
              <scope ilk="function" name="months" />
              <scope doc="Alias for #seconds" ilk="function" name="second" signature="()" />
              <scope ilk="function" name="seconds" />
              <scope doc="Reads best with argument: 10.minutes.since(time)" ilk="function" name="since" signature="(time = ::Time.now)" />
              <scope doc="Alias for #ago" ilk="function" name="until" signature="(time = ::Time.now)" />
              <scope doc="Alias for #weeks" ilk="function" name="week" signature="()" />
              <scope ilk="function" name="weeks" />
              <scope doc="Alias for #years" ilk="function" name="year" signature="()" />
              <scope ilk="function" name="years" />
            </scope>
          </scope>
          <scope ilk="namespace" name="Pathname">
            <scope ilk="namespace" name="CleanWithin">
              <scope doc="Clean the paths contained in the provided string." ilk="function" name="clean_within" signature="(string)" />
            </scope>
          </scope>
          <scope ilk="namespace" name="Range">
            <scope ilk="namespace" name="Conversions">
              <scope attributes="__classmethod__" ilk="function" name="included" />
              <scope ilk="function" name="included" />
              <scope ilk="function" name="to_formatted_s" signature="(format = :default)" />
              <variable attributes="__const__" citdl="Hash" name="DATE_FORMATS" />
            </scope>
          </scope>
          <scope ilk="namespace" name="String">
            <scope ilk="namespace" name="Access">
              <scope doc="Returns the character at the position treating the string as&#xA;an array (where 0 is the first character).Examples:&#xA;  &quot;hello&quot;.at(0)  # =&gt; &quot;h&quot;  &quot;hello&quot;.at(4)  # =&gt; &quot;o&quot;&#xA;  &quot;hello&quot;.at(10) # =&gt; nil" ilk="function" name="at" signature="(position)" />
              <scope doc="Returns the first character of the string or the first limit&#xA;characters.Examples:  &quot;hello&quot;.first     # =&gt; &quot;h&quot;&#xA;  &quot;hello&quot;.first(2)  # =&gt; &quot;he&quot;&#xA;  &quot;hello&quot;.first(10) # =&gt; &quot;hello&quot;" ilk="function" name="first" signature="(limit = 1)" />
              <scope doc="Returns the remaining of the string from the position&#xA;treating the string as an array (where 0 is the first&#xA;character).Examples:  &quot;hello&quot;.from(0)  # =&gt; &quot;hello&quot;&#xA;  &quot;hello&quot;.from(2)  # =&gt; &quot;llo&quot;&#xA;  &quot;hello&quot;.from(10) # =&gt; nil" ilk="function" name="from" signature="(position)" />
              <scope doc="Returns the last character of the string or the last limit&#xA;characters.Examples:  &quot;hello&quot;.last     # =&gt; &quot;o&quot;&#xA;  &quot;hello&quot;.last(2)  # =&gt; &quot;lo&quot;&#xA;  &quot;hello&quot;.last(10) # =&gt; &quot;hello&quot;" ilk="function" name="last" signature="(limit = 1)" />
              <scope doc="Returns the beginning of the string up to the position&#xA;treating the string as an array (where 0 is the first&#xA;character).Examples:  &quot;hello&quot;.to(0)  # =&gt; &quot;h&quot;&#xA;  &quot;hello&quot;.to(2)  # =&gt; &quot;hel&quot;&#xA;  &quot;hello&quot;.to(10) # =&gt; &quot;hello&quot;" ilk="function" name="to" signature="(position)" />
            </scope>
            <scope ilk="namespace" name="Conversions">
              <scope ilk="function" name="to_date" />
              <scope doc="Form can be either :utc (default) or :local." ilk="function" name="to_time" signature="(form = :utc)" />
            </scope>
            <scope ilk="namespace" name="Inflections">
              <scope doc="Alias for #camelize" ilk="function" name="camelcase" signature="(first_letter = :upper)" />
              <scope doc="By default, camelize converts strings to UpperCamelCase. If&#xA;the argument to camelize is set to &quot;:lower&quot; then&#xA;camelize produces lowerCamelCase.camelize will also&#xA;convert &apos;/&apos; to &apos;::&apos; which is useful for converting paths to&#xA;namespacesExamples  &quot;active_record&quot;.camelize #=&gt; &quot;ActiveRecord&quot;&#xA;" ilk="function" name="camelize" signature="(first_letter = :upper)" />
              <scope doc="Create a class name from a table name like Rails does for&#xA;table names to models. Note that this returns a string and&#xA;not a Class. (To convert to an actual class follow classify&#xA;with constantize.)Examples  &quot;egg_and_hams&quot;.classify #=&gt; &quot;EggAndHam&quot;&#xA;  &quot;post&quot;.classify #=&gt; &quot;Post&quot;" ilk="function" name="classify" signature="()" />
              <scope doc="Constantize tries to find a declared constant with the name&#xA;specified in the string. It raises a NameError when the name&#xA;is not in CamelCase or is not initialized.Examples&#xA;  &quot;Module&quot;.constantize #=&gt; Module  &quot;Class&quot;.constantize #=&gt; Class&#xA;" ilk="function" name="constantize" signature="()" />
              <scope doc="Replaces underscores with dashes in the string.Example&#xA;  &quot;puni_puni&quot; #=&gt; &quot;puni-puni&quot;" ilk="function" name="dasherize" signature="()" />
              <scope doc="Removes the module part from the expression in the string&#xA;Examples  &quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize #=&gt; &quot;Inflections&quot;&#xA;  &quot;Inflections&quot;.demodulize #=&gt; &quot;Inflections&quot;&#xA;" ilk="function" name="demodulize" signature="()" />
              <scope doc="Creates a foreign key name from a class name.&#xA;separate_class_name_and_id_with_underscore sets whether the&#xA;method should put &apos;_&apos; between the name and &apos;id&apos;.Examples&#xA;  &quot;Message&quot;.foreign_key #=&gt; &quot;message_id&quot;&#xA;  &quot;Message&quot;.foreign_key(false) #=&gt; &quot;messageid&quot;&#xA;" ilk="function" name="foreign_key" signature="(separate_class_name_and_id_with_underscore = true)" />
              <scope doc="Capitalizes the first word and turns underscores into spaces&#xA;and strips _id. Like titleize, this is meant for creating&#xA;pretty output.Examples  &quot;employee_salary&quot; #=&gt; &quot;Employee salary&quot;&#xA;  &quot;author_id&quot; #=&gt; &quot;Author&quot;" ilk="function" name="humanize" signature="()" />
              <scope doc="Returns the plural form of the word in the string.&#xA;Examples  &quot;post&quot;.pluralize #=&gt; &quot;posts&quot;&#xA;  &quot;octopus&quot;.pluralize #=&gt; &quot;octopi&quot;&#xA;  &quot;sheep&quot;.pluralize #=&gt; &quot;sheep&quot;&#xA;  &quot;words&quot;.pluralize #=&gt; &quot;words&quot;&#xA;  &quot;the blue mailman&quot;.pluralize #=&gt; &quot;the&#xA;blue mailmen&quot;" ilk="function" name="pluralize" signature="()" />
              <scope doc="The reverse of pluralize, returns the singular form of a&#xA;word in a string.Examples  &quot;posts&quot;.singularize #=&gt; &quot;post&quot;&#xA;  &quot;octopi&quot;.singularize #=&gt; &quot;octopus&quot;&#xA;  &quot;sheep&quot;.singluarize #=&gt; &quot;sheep&quot;&#xA;  &quot;word&quot;.singluarize #=&gt; &quot;word&quot;&#xA;  &quot;the blue mailmen&quot;.singularize #=&gt; &quot;the&#xA;blue mailman&quot;" ilk="function" name="singularize" signature="()" />
              <scope doc="Create the name of a table like Rails does for models to&#xA;table names. This method uses the pluralize method on the&#xA;last word in the string.Examples  &quot;RawScaledScorer&quot;.tableize #=&gt; &quot;raw_scaled_scorers&quot;&#xA;  &quot;egg_and_ham&quot;.tableize #=&gt; &quot;egg_and_hams&quot;&#xA;  &quot;fancyCategory&quot;.tableize #=&gt; &quot;fancy_categories&quot;&#xA;" ilk="function" name="tableize" signature="()" />
              <scope doc="Alias for #titleize" ilk="function" name="titlecase" signature="()" />
              <scope doc="Capitalizes all the words and replaces some characters in&#xA;the string to create a nicer looking title. Titleize is&#xA;meant for creating pretty output. It is not used in the&#xA;Rails internals.titleize is also aliased as as titlecase&#xA;Examples  &quot;man from the&#xA;boondocks&quot;.titleize #=&gt; &quot;Man From The&#xA;Boondocks&quot;" ilk="function" name="titleize" signature="()" />
              <scope doc="The reverse of camelize. Makes an underscored form from the&#xA;expression in the string.Changes &apos;::&apos; to &apos;/&apos; to convert&#xA;namespaces to paths.Examples  &quot;ActiveRecord&quot;.underscore #=&gt; &quot;active_record&quot;&#xA;  &quot;ActiveRecord::Errors&quot;.underscore #=&gt; active_record/errors&#xA;" ilk="function" name="underscore" signature="()" />
            </scope>
            <scope ilk="namespace" name="Iterators">
              <scope doc="Yields a single-character string for each character in the&#xA;string. When $KCODE = &apos;UTF8&apos;, multi-byte characters are&#xA;yielded appropriately." ilk="function" name="each_char" signature="() {|scanner.scan(char || break)| ...}" />
            </scope>
            <scope ilk="namespace" name="StartsEndsWith">
              <scope doc="Does the string end with the specified suffix?" ilk="function" name="ends_with?" signature="(suffix)" />
              <scope doc="Does the string start with the specified prefix?" ilk="function" name="starts_with?" signature="(prefix)" />
            </scope>
          </scope>
          <scope ilk="namespace" name="Time">
            <scope ilk="namespace" name="Calculations">
              <scope ilk="namespace" name="ClassMethods">
                <scope doc="Return the number of days in the given month. If a year is&#xA;given, February will return the correct number of days for&#xA;leap years. Otherwise, this method will always report&#xA;February as having 28 days." ilk="function" name="days_in_month" signature="(month, year=nil)" />
              </scope>
              <scope attributes="__classmethod__" ilk="function" name="append_features" />
              <scope doc="Uses Date to provide precise Time calculations for&#xA;years, months, and days. The options parameter takes a hash&#xA;with any of these keys: :months, :days, :years." ilk="function" name="advance" signature="(options)" />
              <scope doc="Returns a new Time representing the time a number of seconds&#xA;ago, this is basically a wrapper around the Numeric&#xA;extension Do not use this method in combination with&#xA;x.months, use months_ago instead!" ilk="function" name="ago" signature="(seconds)" />
              <scope ilk="function" name="append_features" />
              <scope doc="Alias for #beginning_of_day" ilk="function" name="at_beginning_of_day" signature="()" />
              <scope doc="Alias for #beginning_of_month" ilk="function" name="at_beginning_of_month" signature="()" />
              <scope doc="Alias for #beginning_of_quarter" ilk="function" name="at_beginning_of_quarter" signature="()" />
              <scope doc="Alias for #beginning_of_week" ilk="function" name="at_beginning_of_week" signature="()" />
              <scope doc="Alias for #beginning_of_year" ilk="function" name="at_beginning_of_year" signature="()" />
              <scope doc="Alias for #end_of_month" ilk="function" name="at_end_of_month" signature="()" />
              <scope doc="Alias for #beginning_of_day" ilk="function" name="at_midnight" signature="()" />
              <scope doc="Returns a new Time representing the start of the day (0:00)" ilk="function" name="beginning_of_day" signature="()" />
              <scope doc="Returns a new Time representing the start of the month (1st&#xA;of the month, 0:00)" ilk="function" name="beginning_of_month" signature="()" />
              <scope doc="Returns a new Time representing the start of the&#xA;quarter (1st of january, april, july, october, 0:00)" ilk="function" name="beginning_of_quarter" signature="()" />
              <scope doc="Returns a new Time representing the &quot;start&quot; of&#xA;this week (Monday, 0:00)" ilk="function" name="beginning_of_week" signature="()" />
              <scope doc="Returns a new Time representing the start of the year (1st&#xA;of january, 0:00)" ilk="function" name="beginning_of_year" signature="()" />
              <scope doc="Returns a new Time where one or more of the elements have&#xA;been changed according to the options parameter. The time&#xA;options (hour, minute, sec, usec) reset cascadingly, so if&#xA;only the hour is passed, then minute, sec, and usec is set&#xA;to 0. If the hour and minute is passed, then sec and usec is&#xA;set to 0." ilk="function" name="change" signature="(options)" />
              <scope doc="Returns a new Time representing the end of the month (last&#xA;day of the month, 0:00)" ilk="function" name="end_of_month" signature="()" />
              <scope doc="Alias for #since" ilk="function" name="in" signature="(seconds)" />
              <scope doc="Short-hand for months_ago(1)" ilk="function" name="last_month" signature="()" />
              <scope doc="Short-hand for years_ago(1)" ilk="function" name="last_year" signature="()" />
              <scope doc="Alias for #beginning_of_day" ilk="function" name="midnight" signature="()" />
              <scope doc="Alias for #beginning_of_week" ilk="function" name="monday" signature="()" />
              <scope doc="Returns a new Time representing the time a number of&#xA;specified months ago" ilk="function" name="months_ago" signature="(months)" />
              <scope ilk="function" name="months_since" signature="(months)" />
              <scope doc="Short-hand for months_since(1)" ilk="function" name="next_month" signature="()" />
              <scope doc="Returns a new Time representing the start of the given day&#xA;in next week (default is Monday)." ilk="function" name="next_week" signature="(day = :monday)" />
              <scope doc="Short-hand for years_since(1)" ilk="function" name="next_year" signature="()" />
              <scope doc="Seconds since midnight: Time.now.seconds_since_midnight" ilk="function" name="seconds_since_midnight" signature="()" />
              <scope doc=" Returns a new Time representing the time a number of&#xA;seconds since the instance time, this is basically a wrapper&#xA;aroundthe Numeric extension. Do not use this method in&#xA;combination with x.months, use months_since instead!" ilk="function" name="since" signature="(seconds)" />
              <scope doc="Convenience method which returns a new Time representing the&#xA;time 1 day since the instance time" ilk="function" name="tomorrow" signature="()" />
              <scope doc="Returns a new Time representing the time a number of&#xA;specified years ago" ilk="function" name="years_ago" signature="(years)" />
              <scope ilk="function" name="years_since" signature="(years)" />
              <scope doc="Convenience method which returns a new Time representing the&#xA;time 1 day ago" ilk="function" name="yesterday" signature="()" />
            </scope>
            <scope ilk="namespace" name="Conversions">
              <scope attributes="__classmethod__" ilk="function" name="append_features" />
              <scope ilk="function" name="append_features" />
              <scope ilk="function" name="to_date" />
              <scope ilk="function" name="to_formatted_s" signature="(format = :default)" />
              <scope doc="To be able to keep Dates and Times interchangeable on&#xA;conversions" ilk="function" name="to_time" signature="()" />
              <variable attributes="__const__" citdl="Hash" name="DATE_FORMATS" />
            </scope>
          </scope>
        </scope>
        <scope ilk="namespace" name="JSON">
          <scope classrefs="StandardError" ilk="class" name="CircularReferenceError">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable attributes="__const__" citdl="Regexp" name="FrameworkRegexp" />
            <variable attributes="__const__" citdl="Array" name="TraceSubstitutions" />
          </scope>
          <scope ilk="namespace" name="Encoders">
            <scope attributes="__classmethod__" ilk="function" name="[]" />
            <scope attributes="__classmethod__" ilk="function" name="define_encoder" />
            <scope attributes="__classmethod__" ilk="function" name="encoders" />
            <scope attributes="__classmethod__" ilk="function" name="encoders=" />
            <scope ilk="function" name="[]" />
            <scope ilk="function" name="define_encoder" />
            <scope ilk="function" name="encoders" />
            <scope ilk="function" name="encoders=" />
          </scope>
          <scope classrefs="String" ilk="class" name="Variable">
            <import symbol="ActiveSupport::CoreExtensions::String::Access" />
            <import symbol="ActiveSupport::CoreExtensions::String::Conversions" />
            <import symbol="ActiveSupport::CoreExtensions::String::Inflections" />
            <import symbol="ActiveSupport::CoreExtensions::String::Iterators" />
            <import symbol="ActiveSupport::CoreExtensions::String::StartsEndsWith" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Comparable" />
            <import symbol="Enumerable" />
          </scope>
          <scope attributes="__classmethod__" ilk="function" name="encode" />
          <scope attributes="__classmethod__" ilk="function" name="raise_on_circular_reference" />
          <scope ilk="function" name="encode" />
        </scope>
        <scope classrefs="Object" ilk="class" name="OptionMerger">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
      </scope>
      <scope ilk="class" name="Array">
        <scope ilk="function" name="first_match" />
        <scope ilk="function" name="group_by" />
        <scope ilk="function" name="in_groups_of" />
        <scope ilk="function" name="to_param" />
        <scope ilk="function" name="to_sentence" />
        <scope ilk="function" name="to_set" />
        <scope ilk="function" name="to_xml" />
        <scope ilk="function" name="yaml_initialize" />
      </scope>
      <scope ilk="class" name="CGI">
        <scope attributes="__classmethod__" ilk="function" name="escapeHTML_fail_on_nil" />
        <scope attributes="__classmethod__" ilk="function" name="escape_skipping_slashes" />
        <scope ilk="function" name="parameters" />
        <scope ilk="function" name="query_parameters" />
        <scope ilk="function" name="redirect" />
        <scope ilk="function" name="request_parameters" />
        <scope ilk="function" name="session" />
      </scope>
      <scope ilk="class" name="Date">
        <scope attributes="__classmethod__" ilk="function" name="_load" />
        <scope attributes="__classmethod__" ilk="function" name="ajd_to_amjd" />
        <scope attributes="__classmethod__" ilk="function" name="ajd_to_jd" />
        <scope attributes="__classmethod__" ilk="function" name="amjd_to_ajd" />
        <scope attributes="__classmethod__" ilk="function" name="civil" />
        <scope attributes="__classmethod__" ilk="function" name="civil_to_jd" />
        <scope attributes="__classmethod__" ilk="function" name="commercial" />
        <scope attributes="__classmethod__" ilk="function" name="commercial_to_jd" />
        <scope attributes="__classmethod__" ilk="function" name="day_fraction_to_time" />
        <scope attributes="__classmethod__" ilk="function" name="exist1?" />
        <scope attributes="__classmethod__" ilk="function" name="exist2?" />
        <scope attributes="__classmethod__" ilk="function" name="exist3?" />
        <scope attributes="__classmethod__" ilk="function" name="exist?" />
        <scope attributes="__classmethod__" ilk="function" name="existw?" />
        <scope attributes="__classmethod__" ilk="function" name="gregorian_leap?" />
        <scope attributes="__classmethod__" ilk="function" name="jd" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_ajd" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_civil" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_commercial" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_ld" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_mjd" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_ordinal" />
        <scope attributes="__classmethod__" ilk="function" name="jd_to_wday" />
        <scope attributes="__classmethod__" ilk="function" name="julian_leap?" />
        <scope attributes="__classmethod__" ilk="function" name="ld_to_jd" />
        <scope attributes="__classmethod__" ilk="function" name="leap?" />
        <scope attributes="__classmethod__" ilk="function" name="mjd_to_jd" />
        <scope attributes="__classmethod__" ilk="function" name="new" />
        <scope attributes="__classmethod__" ilk="function" name="new0" />
        <scope attributes="__classmethod__" ilk="function" name="new1" />
        <scope attributes="__classmethod__" ilk="function" name="new2" />
        <scope attributes="__classmethod__" ilk="function" name="new3" />
        <scope attributes="__classmethod__" ilk="function" name="neww" />
        <scope attributes="__classmethod__" ilk="function" name="ns?" />
        <scope attributes="__classmethod__" ilk="function" name="ordinal" />
        <scope attributes="__classmethod__" ilk="function" name="ordinal_to_jd" />
        <scope attributes="__classmethod__" ilk="function" name="os?" />
        <scope attributes="__classmethod__" ilk="function" name="parse" />
        <scope attributes="__classmethod__" ilk="function" name="strptime" />
        <scope attributes="__classmethod__" ilk="function" name="time_to_day_fraction" />
        <scope attributes="__classmethod__" ilk="function" name="today" />
        <scope attributes="__classmethod__" ilk="function" name="valid_civil?" />
        <scope attributes="__classmethod__" ilk="function" name="valid_commercial?" />
        <scope attributes="__classmethod__" ilk="function" name="valid_date?" />
        <scope attributes="__classmethod__" ilk="function" name="valid_jd?" />
        <scope attributes="__classmethod__" ilk="function" name="valid_ordinal?" />
        <scope ilk="function" name="+" />
        <scope ilk="function" name="-" />
        <scope ilk="function" name="&lt;" />
        <scope ilk="function" name="&lt;&lt;" />
        <scope ilk="function" name="&lt;=" />
        <scope ilk="function" name="&lt;=&gt;" />
        <scope ilk="function" name="&gt;" />
        <scope ilk="function" name="&gt;=" />
        <scope ilk="function" name="&gt;&gt;" />
        <scope ilk="function" name="_dump" />
        <scope ilk="function" name="ajd" />
        <scope ilk="function" name="amjd" />
        <scope ilk="function" name="between?" />
        <scope ilk="function" name="cwday" />
        <scope ilk="function" name="cweek" />
        <scope ilk="function" name="cwyear" />
        <scope ilk="function" name="day" />
        <scope ilk="function" name="day_fraction" />
        <scope ilk="function" name="downto" />
        <scope ilk="function" name="england" />
        <scope ilk="function" name="gregorian" />
        <scope ilk="function" name="italy" />
        <scope ilk="function" name="jd" />
        <scope ilk="function" name="julian" />
        <scope ilk="function" name="ld" />
        <scope ilk="function" name="leap?" />
        <scope ilk="function" name="mday" />
        <scope ilk="function" name="mjd" />
        <scope ilk="function" name="mon" />
        <scope ilk="function" name="month" />
        <scope ilk="function" name="new_start" />
        <scope ilk="function" name="newsg" />
        <scope ilk="function" name="next" />
        <scope ilk="function" name="ns?" />
        <scope ilk="function" name="os?" />
        <scope ilk="function" name="sg" />
        <scope ilk="function" name="start" />
        <scope ilk="function" name="step" />
        <scope ilk="function" name="succ" />
        <scope ilk="function" name="to_date" />
        <scope ilk="function" name="to_default_s" />
        <scope ilk="function" name="to_formatted_s" />
        <scope ilk="function" name="to_time" />
        <scope ilk="function" name="upto" />
        <scope ilk="function" name="wday" />
        <scope ilk="function" name="xmlschema" />
        <scope ilk="function" name="yday" />
        <scope ilk="function" name="year" />
      </scope>
      <scope ilk="class" name="Exception">
        <scope attributes="__classmethod__" ilk="function" name="yaml_new" />
        <scope ilk="function" name="application_backtrace" />
        <scope ilk="function" name="blame_file!" />
        <scope ilk="function" name="blamed_files" />
        <scope ilk="function" name="clean_backtrace" />
        <scope ilk="function" name="clean_message" />
        <scope ilk="function" name="copy_blame!" />
        <scope ilk="function" name="describe_blame" />
        <scope ilk="function" name="framework_backtrace" />
      </scope>
      <scope ilk="class" name="Hash">
        <scope ilk="function" name="assert_valid_keys" />
        <scope ilk="function" name="diff" />
        <scope ilk="function" name="first_match" />
        <scope ilk="function" name="group_by" />
        <scope ilk="function" name="reverse_merge" />
        <scope ilk="function" name="reverse_merge!" />
        <scope ilk="function" name="reverse_update" />
        <scope ilk="function" name="stringify_keys" />
        <scope ilk="function" name="stringify_keys!" />
        <scope ilk="function" name="symbolize_keys" />
        <scope ilk="function" name="symbolize_keys!" />
        <scope ilk="function" name="to_options" />
        <scope ilk="function" name="to_options!" />
        <scope ilk="function" name="to_set" />
        <scope ilk="function" name="to_xml" />
        <scope ilk="function" name="with_indifferent_access" />
        <scope ilk="function" name="yaml_initialize" />
      </scope>
      <scope ilk="class" name="Integer">
        <scope ilk="function" name="ago" />
        <scope ilk="function" name="byte" />
        <scope ilk="function" name="bytes" />
        <scope ilk="function" name="day" />
        <scope ilk="function" name="days" />
        <scope ilk="function" name="even?" />
        <scope ilk="function" name="exabyte" />
        <scope ilk="function" name="exabytes" />
        <scope ilk="function" name="fortnight" />
        <scope ilk="function" name="fortnights" />
        <scope ilk="function" name="from_now" />
        <scope ilk="function" name="gigabyte" />
        <scope ilk="function" name="gigabytes" />
        <scope ilk="function" name="hour" />
        <scope ilk="function" name="hours" />
        <scope ilk="function" name="kilobyte" />
        <scope ilk="function" name="kilobytes" />
        <scope ilk="function" name="megabyte" />
        <scope ilk="function" name="megabytes" />
        <scope ilk="function" name="minute" />
        <scope ilk="function" name="minutes" />
        <scope ilk="function" name="month" />
        <scope ilk="function" name="months" />
        <scope ilk="function" name="multiple_of?" />
        <scope ilk="function" name="odd?" />
        <scope ilk="function" name="ordinalize" />
        <scope ilk="function" name="petabyte" />
        <scope ilk="function" name="petabytes" />
        <scope ilk="function" name="second" />
        <scope ilk="function" name="seconds" />
        <scope ilk="function" name="since" />
        <scope ilk="function" name="terabyte" />
        <scope ilk="function" name="terabytes" />
        <scope ilk="function" name="until" />
        <scope ilk="function" name="week" />
        <scope ilk="function" name="weeks" />
        <scope ilk="function" name="year" />
        <scope ilk="function" name="years" />
      </scope>
      <scope ilk="class" name="Logger">
        <scope attributes="__classmethod__" ilk="function" name="define_around_helper" />
        <scope attributes="__classmethod__" ilk="function" name="silencer" />
        <scope attributes="__classmethod__" ilk="function" name="silencer=" />
        <scope ilk="function" name="around_debug" />
        <scope ilk="function" name="around_error" />
        <scope ilk="function" name="around_fatal" />
        <scope ilk="function" name="around_info" />
        <scope ilk="function" name="silence" />
        <scope ilk="function" name="silencer" />
        <scope ilk="function" name="silencer=" />
      </scope>
      <scope ilk="class" name="Numeric">
        <scope ilk="function" name="ago" />
        <scope ilk="function" name="byte" />
        <scope ilk="function" name="bytes" />
        <scope ilk="function" name="day" />
        <scope ilk="function" name="days" />
        <scope ilk="function" name="exabyte" />
        <scope ilk="function" name="exabytes" />
        <scope ilk="function" name="fortnight" />
        <scope ilk="function" name="fortnights" />
        <scope ilk="function" name="from_now" />
        <scope ilk="function" name="gigabyte" />
        <scope ilk="function" name="gigabytes" />
        <scope ilk="function" name="hour" />
        <scope ilk="function" name="hours" />
        <scope ilk="function" name="kilobyte" />
        <scope ilk="function" name="kilobytes" />
        <scope ilk="function" name="megabyte" />
        <scope ilk="function" name="megabytes" />
        <scope ilk="function" name="minute" />
        <scope ilk="function" name="minutes" />
        <scope ilk="function" name="month" />
        <scope ilk="function" name="months" />
        <scope ilk="function" name="petabyte" />
        <scope ilk="function" name="petabytes" />
        <scope ilk="function" name="second" />
        <scope ilk="function" name="seconds" />
        <scope ilk="function" name="since" />
        <scope ilk="function" name="terabyte" />
        <scope ilk="function" name="terabytes" />
        <scope ilk="function" name="until" />
        <scope ilk="function" name="week" />
        <scope ilk="function" name="weeks" />
        <scope ilk="function" name="year" />
        <scope ilk="function" name="years" />
      </scope>
      <scope ilk="class" name="Object">
        <scope attributes="__classmethod__" ilk="function" name="method_added" />
        <scope attributes="__classmethod__" ilk="function" name="yaml_tag_subclasses?" />
        <scope ilk="function" name="`" />
        <scope ilk="function" name="b64encode" />
        <scope ilk="function" name="blank?" />
        <scope ilk="function" name="copy_instance_variables_from" />
        <scope ilk="function" name="daemonize" />
        <scope ilk="function" name="dclone" />
        <scope ilk="function" name="decode64" />
        <scope ilk="function" name="decode_b" />
        <scope ilk="function" name="enable_warnings" />
        <scope ilk="function" name="encode64" />
        <scope ilk="function" name="extend_with_included_modules_from" />
        <scope ilk="function" name="extended_by" />
        <scope ilk="function" name="instance_exec" />
        <scope ilk="function" name="instance_values" />
        <scope ilk="function" name="load" />
        <scope ilk="function" name="remove_subclasses_of" />
        <scope ilk="function" name="require_library_or_gem" />
        <scope ilk="function" name="returning" />
        <scope ilk="function" name="silence_stderr" />
        <scope ilk="function" name="silence_stream" />
        <scope ilk="function" name="silence_warnings" />
        <scope ilk="function" name="subclasses_of" />
        <scope ilk="function" name="suppress" />
        <scope ilk="function" name="taguri" />
        <scope ilk="function" name="taguri=" />
        <scope ilk="function" name="to_json" />
        <scope ilk="function" name="to_yaml" />
        <scope ilk="function" name="to_yaml_properties" />
        <scope ilk="function" name="to_yaml_style" />
        <scope ilk="function" name="with_options" />
      </scope>
      <scope ilk="class" name="Pathname">
        <scope attributes="__classmethod__" ilk="function" name="clean_within" />
      </scope>
      <scope ilk="class" name="Proc">
        <scope ilk="function" name="bind" />
      </scope>
      <scope ilk="class" name="Range">
        <scope attributes="__classmethod__" ilk="function" name="yaml_new" />
        <scope ilk="function" name="first_match" />
        <scope ilk="function" name="group_by" />
        <scope ilk="function" name="to_default_s" />
        <scope ilk="function" name="to_formatted_s" />
        <scope ilk="function" name="to_set" />
      </scope>
      <scope ilk="class" name="String">
        <scope attributes="__classmethod__" ilk="function" name="yaml_new" />
        <scope ilk="function" name="at" />
        <scope ilk="function" name="camelcase" />
        <scope ilk="function" name="camelize" />
        <scope ilk="function" name="classify" />
        <scope ilk="function" name="constantize" />
        <scope ilk="function" name="dasherize" />
        <scope ilk="function" name="demodulize" />
        <scope ilk="function" name="each_char" />
        <scope ilk="function" name="ends_with?" />
        <scope ilk="function" name="first" />
        <scope ilk="function" name="first_match" />
        <scope ilk="function" name="foreign_key" />
        <scope ilk="function" name="from" />
        <scope ilk="function" name="group_by" />
        <scope ilk="function" name="humanize" />
        <scope ilk="function" name="is_binary_data?" />
        <scope ilk="function" name="is_complex_yaml?" />
        <scope ilk="function" name="iseuc" />
        <scope ilk="function" name="issjis" />
        <scope ilk="function" name="isutf8" />
        <scope ilk="function" name="kconv" />
        <scope ilk="function" name="last" />
        <scope ilk="function" name="pluralize" />
        <scope ilk="function" name="singularize" />
        <scope ilk="function" name="starts_with?" />
        <scope ilk="function" name="tableize" />
        <scope ilk="function" name="titlecase" />
        <scope ilk="function" name="titleize" />
        <scope ilk="function" name="to" />
        <scope ilk="function" name="to_date" />
        <scope ilk="function" name="to_set" />
        <scope ilk="function" name="to_time" />
        <scope ilk="function" name="toeuc" />
        <scope ilk="function" name="tojis" />
        <scope ilk="function" name="tosjis" />
        <scope ilk="function" name="toutf16" />
        <scope ilk="function" name="toutf8" />
        <scope ilk="function" name="underscore" />
      </scope>
      <scope ilk="class" name="Symbol">
        <scope attributes="__classmethod__" ilk="function" name="yaml_new" />
        <scope doc="Turns the symbol into a simple proc, which is especially&#xA;useful for enumerations. Examples:  # The same as&#xA;people.collect { |p| p.name }  people.collect(&amp;:name)&#xA;  # The same as&#xA;people.select { |p| p.manager? }.collect { |p| p.salary }&#xA;  people.select(&amp;:manager?).collect(&amp;:salary)" ilk="function" name="to_proc" signature="()" />
      </scope>
      <scope ilk="class" name="Time">
        <scope attributes="__classmethod__" ilk="function" name="days_in_month" />
        <scope attributes="__classmethod__" ilk="function" name="yaml_new" />
        <scope ilk="function" name="advance" />
        <scope ilk="function" name="ago" />
        <scope ilk="function" name="at_beginning_of_day" />
        <scope ilk="function" name="at_beginning_of_month" />
        <scope ilk="function" name="at_beginning_of_quarter" />
        <scope ilk="function" name="at_beginning_of_week" />
        <scope ilk="function" name="at_beginning_of_year" />
        <scope ilk="function" name="at_end_of_month" />
        <scope ilk="function" name="at_midnight" />
        <scope ilk="function" name="beginning_of_day" />
        <scope ilk="function" name="beginning_of_month" />
        <scope ilk="function" name="beginning_of_quarter" />
        <scope ilk="function" name="beginning_of_week" />
        <scope ilk="function" name="beginning_of_year" />
        <scope ilk="function" name="change" />
        <scope ilk="function" name="end_of_month" />
        <scope ilk="function" name="in" />
        <scope ilk="function" name="last_month" />
        <scope ilk="function" name="last_year" />
        <scope ilk="function" name="midnight" />
        <scope ilk="function" name="monday" />
        <scope ilk="function" name="months_ago" />
        <scope ilk="function" name="months_since" />
        <scope ilk="function" name="next_month" />
        <scope ilk="function" name="next_week" />
        <scope ilk="function" name="next_year" />
        <scope ilk="function" name="seconds_since_midnight" />
        <scope ilk="function" name="since" />
        <scope ilk="function" name="to_date" />
        <scope ilk="function" name="to_default_s" />
        <scope ilk="function" name="to_formatted_s" />
        <scope ilk="function" name="to_time" />
        <scope ilk="function" name="tomorrow" />
        <scope ilk="function" name="years_ago" />
        <scope ilk="function" name="years_since" />
        <scope ilk="function" name="yesterday" />
      </scope>
    </scope>
  